
ArduinoLockOpener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000026a  00800100  000026ce  00002762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bb  0080036a  0080036a  000029cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  00002a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000107b7  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039df  00000000  00000000  0001385f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000044e9  00000000  00000000  0001723e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001178  00000000  00000000  0001b728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000039de  00000000  00000000  0001c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000061ef  00000000  00000000  0002027e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000610  00000000  00000000  0002646d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__vector_1>
       8:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__vector_2>
       c:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__vector_3>
      10:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__vector_3>
      14:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__vector_7>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_18>
      4c:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	Address 0x00000068 is out of bounds.
.word	0xffff	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	50 02       	muls	r21, r16
      c6:	bf 02       	muls	r27, r31

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	13 e0       	ldi	r17, 0x03	; 3
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	ee ec       	ldi	r30, 0xCE	; 206
      dc:	f6 e2       	ldi	r31, 0x26	; 38
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	aa 36       	cpi	r26, 0x6A	; 106
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	25 e0       	ldi	r18, 0x05	; 5
      ec:	aa e6       	ldi	r26, 0x6A	; 106
      ee:	b3 e0       	ldi	r27, 0x03	; 3
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a5 32       	cpi	r26, 0x25	; 37
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c4 e6       	ldi	r28, 0x64	; 100
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__tablejump2__>
     10a:	c2 36       	cpi	r28, 0x62	; 98
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 cb 02 	call	0x596	; 0x596 <main>
     114:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     11c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     11e:	91 8d       	ldd	r25, Z+25	; 0x19
     120:	22 8d       	ldd	r18, Z+26	; 0x1a
     122:	89 2f       	mov	r24, r25
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	80 5c       	subi	r24, 0xC0	; 192
     128:	9f 4f       	sbci	r25, 0xFF	; 255
     12a:	82 1b       	sub	r24, r18
     12c:	91 09       	sbc	r25, r1
}
     12e:	8f 73       	andi	r24, 0x3F	; 63
     130:	99 27       	eor	r25, r25
     132:	08 95       	ret

00000134 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     134:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     136:	91 8d       	ldd	r25, Z+25	; 0x19
     138:	82 8d       	ldd	r24, Z+26	; 0x1a
     13a:	98 17       	cp	r25, r24
     13c:	31 f0       	breq	.+12     	; 0x14a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     13e:	82 8d       	ldd	r24, Z+26	; 0x1a
     140:	e8 0f       	add	r30, r24
     142:	f1 1d       	adc	r31, r1
     144:	85 8d       	ldd	r24, Z+29	; 0x1d
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     14e:	08 95       	ret

00000150 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     150:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     152:	91 8d       	ldd	r25, Z+25	; 0x19
     154:	82 8d       	ldd	r24, Z+26	; 0x1a
     156:	98 17       	cp	r25, r24
     158:	61 f0       	breq	.+24     	; 0x172 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     15a:	82 8d       	ldd	r24, Z+26	; 0x1a
     15c:	df 01       	movw	r26, r30
     15e:	a8 0f       	add	r26, r24
     160:	b1 1d       	adc	r27, r1
     162:	5d 96       	adiw	r26, 0x1d	; 29
     164:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     166:	92 8d       	ldd	r25, Z+26	; 0x1a
     168:	9f 5f       	subi	r25, 0xFF	; 255
     16a:	9f 73       	andi	r25, 0x3F	; 63
     16c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     172:	8f ef       	ldi	r24, 0xFF	; 255
     174:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     176:	08 95       	ret

00000178 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     178:	fc 01       	movw	r30, r24
     17a:	23 8d       	ldd	r18, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     17c:	34 8d       	ldd	r19, Z+28	; 0x1c
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     17e:	23 17       	cp	r18, r19
     180:	38 f0       	brcs	.+14     	; 0x190 <_ZN14HardwareSerial17availableForWriteEv+0x18>
     182:	8f e3       	ldi	r24, 0x3F	; 63
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	82 1b       	sub	r24, r18
     188:	91 09       	sbc	r25, r1
     18a:	83 0f       	add	r24, r19
     18c:	91 1d       	adc	r25, r1
     18e:	08 95       	ret
  return tail - head - 1;
     190:	83 2f       	mov	r24, r19
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	82 1b       	sub	r24, r18
     196:	91 09       	sbc	r25, r1
     198:	01 97       	sbiw	r24, 0x01	; 1
}
     19a:	08 95       	ret

0000019c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     19c:	86 e4       	ldi	r24, 0x46	; 70
     19e:	92 e0       	ldi	r25, 0x02	; 2
     1a0:	89 2b       	or	r24, r25
     1a2:	49 f0       	breq	.+18     	; 0x1b6 <_Z14serialEventRunv+0x1a>
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	89 2b       	or	r24, r25
     1aa:	29 f0       	breq	.+10     	; 0x1b6 <_Z14serialEventRunv+0x1a>
     1ac:	0e 94 46 02 	call	0x48c	; 0x48c <_Z17Serial0_availablev>
     1b0:	81 11       	cpse	r24, r1
     1b2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     1b6:	08 95       	ret

000001b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     1b8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	df 01       	movw	r26, r30
     1be:	a8 0f       	add	r26, r24
     1c0:	b1 1d       	adc	r27, r1
     1c2:	a3 5a       	subi	r26, 0xA3	; 163
     1c4:	bf 4f       	sbci	r27, 0xFF	; 255
     1c6:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     1c8:	24 8d       	ldd	r18, Z+28	; 0x1c
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	2f 5f       	subi	r18, 0xFF	; 255
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
     1d0:	2f 73       	andi	r18, 0x3F	; 63
     1d2:	30 78       	andi	r19, 0x80	; 128
     1d4:	33 23       	and	r19, r19
     1d6:	34 f4       	brge	.+12     	; 0x1e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	31 09       	sbc	r19, r1
     1dc:	20 6c       	ori	r18, 0xC0	; 192
     1de:	3f 6f       	ori	r19, 0xFF	; 255
     1e0:	2f 5f       	subi	r18, 0xFF	; 255
     1e2:	3f 4f       	sbci	r19, 0xFF	; 255
     1e4:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     1e6:	a6 89       	ldd	r26, Z+22	; 0x16
     1e8:	b7 89       	ldd	r27, Z+23	; 0x17
     1ea:	8c 93       	st	X, r24
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     1ec:	a0 89       	ldd	r26, Z+16	; 0x10
     1ee:	b1 89       	ldd	r27, Z+17	; 0x11
     1f0:	8c 91       	ld	r24, X
     1f2:	83 70       	andi	r24, 0x03	; 3
     1f4:	80 64       	ori	r24, 0x40	; 64
     1f6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     1f8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1fa:	84 8d       	ldd	r24, Z+28	; 0x1c
     1fc:	98 13       	cpse	r25, r24
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     200:	02 88       	ldd	r0, Z+18	; 0x12
     202:	f3 89       	ldd	r31, Z+19	; 0x13
     204:	e0 2d       	mov	r30, r0
     206:	80 81       	ld	r24, Z
     208:	8f 7d       	andi	r24, 0xDF	; 223
     20a:	80 83       	st	Z, r24
     20c:	08 95       	ret

0000020e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     214:	88 8d       	ldd	r24, Y+24	; 0x18
     216:	88 23       	and	r24, r24
     218:	d9 f0       	breq	.+54     	; 0x250 <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     21a:	ea 89       	ldd	r30, Y+18	; 0x12
     21c:	fb 89       	ldd	r31, Y+19	; 0x13
     21e:	80 81       	ld	r24, Z
     220:	85 fd       	sbrc	r24, 5
     222:	05 c0       	rjmp	.+10     	; 0x22e <_ZN14HardwareSerial5flushEv+0x20>
     224:	a8 89       	ldd	r26, Y+16	; 0x10
     226:	b9 89       	ldd	r27, Y+17	; 0x11
     228:	8c 91       	ld	r24, X
     22a:	86 fd       	sbrc	r24, 6
     22c:	11 c0       	rjmp	.+34     	; 0x250 <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	07 fc       	sbrc	r0, 7
     232:	f5 cf       	rjmp	.-22     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     234:	80 81       	ld	r24, Z
     236:	85 ff       	sbrs	r24, 5
     238:	f2 cf       	rjmp	.-28     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     23a:	04 c0       	rjmp	.+8      	; 0x244 <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
     23c:	ce 01       	movw	r24, r28
     23e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     242:	eb cf       	rjmp	.-42     	; 0x21a <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     244:	a8 89       	ldd	r26, Y+16	; 0x10
     246:	b9 89       	ldd	r27, Y+17	; 0x11
     248:	8c 91       	ld	r24, X
     24a:	85 ff       	sbrs	r24, 5
     24c:	e8 cf       	rjmp	.-48     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     24e:	f6 cf       	rjmp	.-20     	; 0x23c <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	ec 01       	movw	r28, r24
  _written = true;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     264:	9b 8d       	ldd	r25, Y+27	; 0x1b
     266:	8c 8d       	ldd	r24, Y+28	; 0x1c
     268:	98 13       	cpse	r25, r24
     26a:	26 c0       	rjmp	.+76     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x62>
     26c:	e8 89       	ldd	r30, Y+16	; 0x10
     26e:	f9 89       	ldd	r31, Y+17	; 0x11
     270:	80 81       	ld	r24, Z
     272:	85 fd       	sbrc	r24, 5
     274:	32 c0       	rjmp	.+100    	; 0x2da <_ZN14HardwareSerial5writeEh+0x84>
     276:	20 c0       	rjmp	.+64     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x62>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     278:	8c 8d       	ldd	r24, Y+28	; 0x1c
     27a:	18 13       	cpse	r17, r24
     27c:	0c c0       	rjmp	.+24     	; 0x296 <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	07 fc       	sbrc	r0, 7
     282:	fa cf       	rjmp	.-12     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     284:	e8 89       	ldd	r30, Y+16	; 0x10
     286:	f9 89       	ldd	r31, Y+17	; 0x11
     288:	80 81       	ld	r24, Z
     28a:	85 ff       	sbrs	r24, 5
     28c:	f5 cf       	rjmp	.-22     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
     28e:	ce 01       	movw	r24, r28
     290:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     294:	f1 cf       	rjmp	.-30     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     296:	8b 8d       	ldd	r24, Y+27	; 0x1b
     298:	fe 01       	movw	r30, r28
     29a:	e8 0f       	add	r30, r24
     29c:	f1 1d       	adc	r31, r1
     29e:	e3 5a       	subi	r30, 0xA3	; 163
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	00 83       	st	Z, r16

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2a6:	f8 94       	cli
    _tx_buffer_head = i;
     2a8:	1b 8f       	std	Y+27, r17	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     2aa:	ea 89       	ldd	r30, Y+18	; 0x12
     2ac:	fb 89       	ldd	r31, Y+19	; 0x13
     2ae:	80 81       	ld	r24, Z
     2b0:	80 62       	ori	r24, 0x20	; 32
     2b2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2b4:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
     2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <_ZN14HardwareSerial5writeEh+0x9c>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     2b8:	2b 8d       	ldd	r18, Y+27	; 0x1b
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	2f 73       	andi	r18, 0x3F	; 63
     2c2:	30 78       	andi	r19, 0x80	; 128
     2c4:	33 23       	and	r19, r19
     2c6:	34 f4       	brge	.+12     	; 0x2d4 <_ZN14HardwareSerial5writeEh+0x7e>
     2c8:	21 50       	subi	r18, 0x01	; 1
     2ca:	31 09       	sbc	r19, r1
     2cc:	20 6c       	ori	r18, 0xC0	; 192
     2ce:	3f 6f       	ori	r19, 0xFF	; 255
     2d0:	2f 5f       	subi	r18, 0xFF	; 255
     2d2:	3f 4f       	sbci	r19, 0xFF	; 255
     2d4:	06 2f       	mov	r16, r22
     2d6:	12 2f       	mov	r17, r18
     2d8:	cf cf       	rjmp	.-98     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2dc:	f8 94       	cli
      *_udr = c;
     2de:	ee 89       	ldd	r30, Y+22	; 0x16
     2e0:	ff 89       	ldd	r31, Y+23	; 0x17
     2e2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2e4:	e8 89       	ldd	r30, Y+16	; 0x10
     2e6:	f9 89       	ldd	r31, Y+17	; 0x11
     2e8:	80 81       	ld	r24, Z
     2ea:	83 70       	andi	r24, 0x03	; 3
     2ec:	80 64       	ori	r24, 0x40	; 64
     2ee:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2f0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ec 01       	movw	r28, r24
     310:	6a 01       	movw	r12, r20
     312:	7b 01       	movw	r14, r22
     314:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     316:	e8 89       	ldd	r30, Y+16	; 0x10
     318:	f9 89       	ldd	r31, Y+17	; 0x11
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     31e:	41 15       	cp	r20, r1
     320:	51 4e       	sbci	r21, 0xE1	; 225
     322:	61 05       	cpc	r22, r1
     324:	71 05       	cpc	r23, r1
     326:	b1 f0       	breq	.+44     	; 0x354 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	79 e0       	ldi	r23, 0x09	; 9
     32c:	8d e3       	ldi	r24, 0x3D	; 61
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__udivmodsi4>
     338:	da 01       	movw	r26, r20
     33a:	c9 01       	movw	r24, r18
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	a1 09       	sbc	r26, r1
     340:	b1 09       	sbc	r27, r1
     342:	b6 95       	lsr	r27
     344:	a7 95       	ror	r26
     346:	97 95       	ror	r25
     348:	87 95       	ror	r24
     34a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     34c:	21 15       	cp	r18, r1
     34e:	80 e1       	ldi	r24, 0x10	; 16
     350:	38 07       	cpc	r19, r24
     352:	a8 f0       	brcs	.+42     	; 0x37e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     354:	e8 89       	ldd	r30, Y+16	; 0x10
     356:	f9 89       	ldd	r31, Y+17	; 0x11
     358:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     35a:	60 e8       	ldi	r22, 0x80	; 128
     35c:	74 e8       	ldi	r23, 0x84	; 132
     35e:	8e e1       	ldi	r24, 0x1E	; 30
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a7 01       	movw	r20, r14
     364:	96 01       	movw	r18, r12
     366:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__udivmodsi4>
     36a:	da 01       	movw	r26, r20
     36c:	c9 01       	movw	r24, r18
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	a1 09       	sbc	r26, r1
     372:	b1 09       	sbc	r27, r1
     374:	b6 95       	lsr	r27
     376:	a7 95       	ror	r26
     378:	97 95       	ror	r25
     37a:	87 95       	ror	r24
     37c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     37e:	ec 85       	ldd	r30, Y+12	; 0x0c
     380:	fd 85       	ldd	r31, Y+13	; 0x0d
     382:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     384:	ee 85       	ldd	r30, Y+14	; 0x0e
     386:	ff 85       	ldd	r31, Y+15	; 0x0f
     388:	20 83       	st	Z, r18

  _written = false;
     38a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     38c:	ec 89       	ldd	r30, Y+20	; 0x14
     38e:	fd 89       	ldd	r31, Y+21	; 0x15
     390:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     392:	ea 89       	ldd	r30, Y+18	; 0x12
     394:	fb 89       	ldd	r31, Y+19	; 0x13
     396:	80 81       	ld	r24, Z
     398:	80 61       	ori	r24, 0x10	; 16
     39a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     39c:	ea 89       	ldd	r30, Y+18	; 0x12
     39e:	fb 89       	ldd	r31, Y+19	; 0x13
     3a0:	80 81       	ld	r24, Z
     3a2:	88 60       	ori	r24, 0x08	; 8
     3a4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     3a6:	ea 89       	ldd	r30, Y+18	; 0x12
     3a8:	fb 89       	ldd	r31, Y+19	; 0x13
     3aa:	80 81       	ld	r24, Z
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     3b0:	ea 89       	ldd	r30, Y+18	; 0x12
     3b2:	fb 89       	ldd	r31, Y+19	; 0x13
     3b4:	80 81       	ld	r24, Z
     3b6:	8f 7d       	andi	r24, 0xDF	; 223
     3b8:	80 83       	st	Z, r24
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	08 95       	ret

000003ca <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	2f 93       	push	r18
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3e8:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <__data_end+0x10>
     3ec:	f0 91 7b 03 	lds	r31, 0x037B	; 0x80037b <__data_end+0x11>
     3f0:	80 81       	ld	r24, Z
     3f2:	82 fd       	sbrc	r24, 2
     3f4:	14 c0       	rjmp	.+40     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3f6:	ea e6       	ldi	r30, 0x6A	; 106
     3f8:	f3 e0       	ldi	r31, 0x03	; 3
     3fa:	a6 89       	ldd	r26, Z+22	; 0x16
     3fc:	b7 89       	ldd	r27, Z+23	; 0x17
     3fe:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     400:	81 8d       	ldd	r24, Z+25	; 0x19
     402:	8f 5f       	subi	r24, 0xFF	; 255
     404:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     406:	92 8d       	ldd	r25, Z+26	; 0x1a
     408:	89 17       	cp	r24, r25
     40a:	71 f0       	breq	.+28     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
      _rx_buffer[_rx_buffer_head] = c;
     40c:	df 01       	movw	r26, r30
     40e:	e1 8d       	ldd	r30, Z+25	; 0x19
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	e6 59       	subi	r30, 0x96	; 150
     414:	fc 4f       	sbci	r31, 0xFC	; 252
     416:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     418:	59 96       	adiw	r26, 0x19	; 25
     41a:	8c 93       	st	X, r24
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     41e:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end+0x16>
     422:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x17>
     426:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	2f 93       	push	r18
     44c:	3f 93       	push	r19
     44e:	4f 93       	push	r20
     450:	5f 93       	push	r21
     452:	6f 93       	push	r22
     454:	7f 93       	push	r23
     456:	8f 93       	push	r24
     458:	9f 93       	push	r25
     45a:	af 93       	push	r26
     45c:	bf 93       	push	r27
     45e:	ef 93       	push	r30
     460:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     462:	8a e6       	ldi	r24, 0x6A	; 106
     464:	93 e0       	ldi	r25, 0x03	; 3
     466:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	bf 91       	pop	r27
     470:	af 91       	pop	r26
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	7f 91       	pop	r23
     478:	6f 91       	pop	r22
     47a:	5f 91       	pop	r21
     47c:	4f 91       	pop	r20
     47e:	3f 91       	pop	r19
     480:	2f 91       	pop	r18
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     48c:	8a e6       	ldi	r24, 0x6A	; 106
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN14HardwareSerial9availableEv>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	89 2b       	or	r24, r25
     498:	09 f4       	brne	.+2      	; 0x49c <_Z17Serial0_availablev+0x10>
     49a:	20 e0       	ldi	r18, 0x00	; 0
}
     49c:	82 2f       	mov	r24, r18
     49e:	08 95       	ret

000004a0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     4a0:	ea e6       	ldi	r30, 0x6A	; 106
     4a2:	f3 e0       	ldi	r31, 0x03	; 3
     4a4:	13 82       	std	Z+3, r1	; 0x03
     4a6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     4a8:	88 ee       	ldi	r24, 0xE8	; 232
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	a0 e0       	ldi	r26, 0x00	; 0
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	84 83       	std	Z+4, r24	; 0x04
     4b2:	95 83       	std	Z+5, r25	; 0x05
     4b4:	a6 83       	std	Z+6, r26	; 0x06
     4b6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     4b8:	8f e0       	ldi	r24, 0x0F	; 15
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	85 ec       	ldi	r24, 0xC5	; 197
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	95 87       	std	Z+13, r25	; 0x0d
     4c6:	84 87       	std	Z+12, r24	; 0x0c
     4c8:	84 ec       	ldi	r24, 0xC4	; 196
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	97 87       	std	Z+15, r25	; 0x0f
     4ce:	86 87       	std	Z+14, r24	; 0x0e
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	91 8b       	std	Z+17, r25	; 0x11
     4d6:	80 8b       	std	Z+16, r24	; 0x10
     4d8:	81 ec       	ldi	r24, 0xC1	; 193
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	93 8b       	std	Z+19, r25	; 0x13
     4de:	82 8b       	std	Z+18, r24	; 0x12
     4e0:	82 ec       	ldi	r24, 0xC2	; 194
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	95 8b       	std	Z+21, r25	; 0x15
     4e6:	84 8b       	std	Z+20, r24	; 0x14
     4e8:	86 ec       	ldi	r24, 0xC6	; 198
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	97 8b       	std	Z+23, r25	; 0x17
     4ee:	86 8b       	std	Z+22, r24	; 0x16
     4f0:	11 8e       	std	Z+25, r1	; 0x19
     4f2:	12 8e       	std	Z+26, r1	; 0x1a
     4f4:	13 8e       	std	Z+27, r1	; 0x1b
     4f6:	14 8e       	std	Z+28, r1	; 0x1c
     4f8:	08 95       	ret

000004fa <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
     4fa:	8f 92       	push	r8
     4fc:	9f 92       	push	r9
     4fe:	af 92       	push	r10
     500:	bf 92       	push	r11
     502:	cf 92       	push	r12
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	6c 01       	movw	r12, r24
     514:	7b 01       	movw	r14, r22
     516:	4c 01       	movw	r8, r24
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	88 0e       	add	r8, r24
     51c:	91 1c       	adc	r9, r1
     51e:	56 01       	movw	r10, r12
     520:	e5 e0       	ldi	r30, 0x05	; 5
     522:	ae 0e       	add	r10, r30
     524:	b1 1c       	adc	r11, r1
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	10 e0       	ldi	r17, 0x00	; 0
     52a:	f4 01       	movw	r30, r8
     52c:	61 91       	ld	r22, Z+
     52e:	4f 01       	movw	r8, r30
     530:	4a e0       	ldi	r20, 0x0A	; 10
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	c7 01       	movw	r24, r14
     536:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN5Print5printEhi>
     53a:	ec 01       	movw	r28, r24
     53c:	6e e2       	ldi	r22, 0x2E	; 46
     53e:	c7 01       	movw	r24, r14
     540:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print5printEc>
     544:	8c 0f       	add	r24, r28
     546:	9d 1f       	adc	r25, r29
     548:	08 0f       	add	r16, r24
     54a:	19 1f       	adc	r17, r25
     54c:	8a 14       	cp	r8, r10
     54e:	9b 04       	cpc	r9, r11
     550:	61 f7       	brne	.-40     	; 0x52a <_ZNK9IPAddress7printToER5Print+0x30>
     552:	4a e0       	ldi	r20, 0x0A	; 10
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	f6 01       	movw	r30, r12
     558:	65 81       	ldd	r22, Z+5	; 0x05
     55a:	c7 01       	movw	r24, r14
     55c:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN5Print5printEhi>
     560:	80 0f       	add	r24, r16
     562:	91 1f       	adc	r25, r17
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	8f 90       	pop	r8
     57c:	08 95       	ret

0000057e <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     57e:	e7 e0       	ldi	r30, 0x07	; 7
     580:	f4 e0       	ldi	r31, 0x04	; 4
     582:	81 e2       	ldi	r24, 0x21	; 33
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     58a:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     58c:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     58e:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     590:	15 82       	std	Z+5, r1	; 0x05
     592:	08 95       	ret

00000594 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     594:	08 95       	ret

00000596 <main>:

int main(void)
{
	init();
     596:	0e 94 e7 04 	call	0x9ce	; 0x9ce <init>
	initVariant();
     59a:	0e 94 ca 02 	call	0x594	; 0x594 <initVariant>
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
		if (serialEventRun) serialEventRun();
     59e:	ce ec       	ldi	r28, 0xCE	; 206
     5a0:	d0 e0       	ldi	r29, 0x00	; 0
	USBDevice.attach();
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
     5a2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <main_ArduinoLockOpener>
		if (serialEventRun) serialEventRun();
     5a6:	20 97       	sbiw	r28, 0x00	; 0
     5a8:	e1 f3       	breq	.-8      	; 0x5a2 <main+0xc>
     5aa:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z14serialEventRunv>
     5ae:	f9 cf       	rjmp	.-14     	; 0x5a2 <main+0xc>

000005b0 <_Znwj>:
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
     5b0:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <malloc>
}
     5b4:	08 95       	ret

000005b6 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	41 15       	cp	r20, r1
     5c8:	51 05       	cpc	r21, r1
     5ca:	c1 f0       	breq	.+48     	; 0x5fc <_ZN5Print5writeEPKhj+0x46>
     5cc:	6a 01       	movw	r12, r20
     5ce:	8c 01       	movw	r16, r24
     5d0:	e6 2e       	mov	r14, r22
     5d2:	f7 2e       	mov	r15, r23
     5d4:	c0 e0       	ldi	r28, 0x00	; 0
     5d6:	d0 e0       	ldi	r29, 0x00	; 0
     5d8:	d7 01       	movw	r26, r14
     5da:	6d 91       	ld	r22, X+
     5dc:	7d 01       	movw	r14, r26
     5de:	d8 01       	movw	r26, r16
     5e0:	ed 91       	ld	r30, X+
     5e2:	fc 91       	ld	r31, X
     5e4:	01 90       	ld	r0, Z+
     5e6:	f0 81       	ld	r31, Z
     5e8:	e0 2d       	mov	r30, r0
     5ea:	c8 01       	movw	r24, r16
     5ec:	09 95       	icall
     5ee:	89 2b       	or	r24, r25
     5f0:	39 f0       	breq	.+14     	; 0x600 <_ZN5Print5writeEPKhj+0x4a>
     5f2:	21 96       	adiw	r28, 0x01	; 1
     5f4:	cc 16       	cp	r12, r28
     5f6:	dd 06       	cpc	r13, r29
     5f8:	79 f7       	brne	.-34     	; 0x5d8 <_ZN5Print5writeEPKhj+0x22>
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <_ZN5Print5writeEPKhj+0x4a>
     5fc:	c0 e0       	ldi	r28, 0x00	; 0
     5fe:	d0 e0       	ldi	r29, 0x00	; 0
     600:	ce 01       	movw	r24, r28
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	1f 91       	pop	r17
     608:	0f 91       	pop	r16
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	08 95       	ret

00000614 <_ZN5Print5printEPKc>:
     614:	61 15       	cp	r22, r1
     616:	71 05       	cpc	r23, r1
     618:	81 f0       	breq	.+32     	; 0x63a <_ZN5Print5printEPKc+0x26>
     61a:	fb 01       	movw	r30, r22
     61c:	01 90       	ld	r0, Z+
     61e:	00 20       	and	r0, r0
     620:	e9 f7       	brne	.-6      	; 0x61c <_ZN5Print5printEPKc+0x8>
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	af 01       	movw	r20, r30
     626:	46 1b       	sub	r20, r22
     628:	57 0b       	sbc	r21, r23
     62a:	dc 01       	movw	r26, r24
     62c:	ed 91       	ld	r30, X+
     62e:	fc 91       	ld	r31, X
     630:	02 80       	ldd	r0, Z+2	; 0x02
     632:	f3 81       	ldd	r31, Z+3	; 0x03
     634:	e0 2d       	mov	r30, r0
     636:	09 95       	icall
     638:	08 95       	ret
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	08 95       	ret

00000640 <_ZN5Print5printEc>:
     640:	dc 01       	movw	r26, r24
     642:	ed 91       	ld	r30, X+
     644:	fc 91       	ld	r31, X
     646:	01 90       	ld	r0, Z+
     648:	f0 81       	ld	r31, Z
     64a:	e0 2d       	mov	r30, r0
     64c:	09 95       	icall
     64e:	08 95       	ret

00000650 <_ZN5Print7printlnEv>:
     650:	dc 01       	movw	r26, r24
     652:	ed 91       	ld	r30, X+
     654:	fc 91       	ld	r31, X
     656:	02 80       	ldd	r0, Z+2	; 0x02
     658:	f3 81       	ldd	r31, Z+3	; 0x03
     65a:	e0 2d       	mov	r30, r0
     65c:	42 e0       	ldi	r20, 0x02	; 2
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	63 e2       	ldi	r22, 0x23	; 35
     662:	71 e0       	ldi	r23, 0x01	; 1
     664:	09 95       	icall
     666:	08 95       	ret

00000668 <_ZN5Print7printlnEPKc>:
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	ec 01       	movw	r28, r24
     672:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN5Print5printEPKc>
     676:	8c 01       	movw	r16, r24
     678:	ce 01       	movw	r24, r28
     67a:	0e 94 28 03 	call	0x650	; 0x650 <_ZN5Print7printlnEv>
     67e:	80 0f       	add	r24, r16
     680:	91 1f       	adc	r25, r17
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <_ZN5Print11printNumberEmh>:
     68c:	8f 92       	push	r8
     68e:	9f 92       	push	r9
     690:	af 92       	push	r10
     692:	bf 92       	push	r11
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	a1 97       	sbiw	r28, 0x21	; 33
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	7c 01       	movw	r14, r24
     6b2:	cb 01       	movw	r24, r22
     6b4:	ba 01       	movw	r22, r20
     6b6:	19 a2       	std	Y+33, r1	; 0x21
     6b8:	22 30       	cpi	r18, 0x02	; 2
     6ba:	08 f4       	brcc	.+2      	; 0x6be <_ZN5Print11printNumberEmh+0x32>
     6bc:	2a e0       	ldi	r18, 0x0A	; 10
     6be:	8e 01       	movw	r16, r28
     6c0:	0f 5d       	subi	r16, 0xDF	; 223
     6c2:	1f 4f       	sbci	r17, 0xFF	; 255
     6c4:	82 2e       	mov	r8, r18
     6c6:	91 2c       	mov	r9, r1
     6c8:	a1 2c       	mov	r10, r1
     6ca:	b1 2c       	mov	r11, r1
     6cc:	a5 01       	movw	r20, r10
     6ce:	94 01       	movw	r18, r8
     6d0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__udivmodsi4>
     6d4:	e6 2f       	mov	r30, r22
     6d6:	62 2f       	mov	r22, r18
     6d8:	73 2f       	mov	r23, r19
     6da:	84 2f       	mov	r24, r20
     6dc:	95 2f       	mov	r25, r21
     6de:	01 50       	subi	r16, 0x01	; 1
     6e0:	11 09       	sbc	r17, r1
     6e2:	ea 30       	cpi	r30, 0x0A	; 10
     6e4:	10 f4       	brcc	.+4      	; 0x6ea <_ZN5Print11printNumberEmh+0x5e>
     6e6:	e0 5d       	subi	r30, 0xD0	; 208
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <_ZN5Print11printNumberEmh+0x60>
     6ea:	e9 5c       	subi	r30, 0xC9	; 201
     6ec:	d8 01       	movw	r26, r16
     6ee:	ec 93       	st	X, r30
     6f0:	61 15       	cp	r22, r1
     6f2:	71 05       	cpc	r23, r1
     6f4:	81 05       	cpc	r24, r1
     6f6:	91 05       	cpc	r25, r1
     6f8:	49 f7       	brne	.-46     	; 0x6cc <_ZN5Print11printNumberEmh+0x40>
     6fa:	01 15       	cp	r16, r1
     6fc:	11 05       	cpc	r17, r1
     6fe:	91 f0       	breq	.+36     	; 0x724 <_ZN5Print11printNumberEmh+0x98>
     700:	f8 01       	movw	r30, r16
     702:	01 90       	ld	r0, Z+
     704:	00 20       	and	r0, r0
     706:	e9 f7       	brne	.-6      	; 0x702 <_ZN5Print11printNumberEmh+0x76>
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	af 01       	movw	r20, r30
     70c:	40 1b       	sub	r20, r16
     70e:	51 0b       	sbc	r21, r17
     710:	d7 01       	movw	r26, r14
     712:	ed 91       	ld	r30, X+
     714:	fc 91       	ld	r31, X
     716:	02 80       	ldd	r0, Z+2	; 0x02
     718:	f3 81       	ldd	r31, Z+3	; 0x03
     71a:	e0 2d       	mov	r30, r0
     71c:	b8 01       	movw	r22, r16
     71e:	c7 01       	movw	r24, r14
     720:	09 95       	icall
     722:	02 c0       	rjmp	.+4      	; 0x728 <_ZN5Print11printNumberEmh+0x9c>
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	a1 96       	adiw	r28, 0x21	; 33
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	0f 91       	pop	r16
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	bf 90       	pop	r11
     742:	af 90       	pop	r10
     744:	9f 90       	pop	r9
     746:	8f 90       	pop	r8
     748:	08 95       	ret

0000074a <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     74a:	21 15       	cp	r18, r1
     74c:	31 05       	cpc	r19, r1
     74e:	49 f4       	brne	.+18     	; 0x762 <_ZN5Print5printEmi+0x18>
     750:	dc 01       	movw	r26, r24
     752:	ed 91       	ld	r30, X+
     754:	fc 91       	ld	r31, X
     756:	01 90       	ld	r0, Z+
     758:	f0 81       	ld	r31, Z
     75a:	e0 2d       	mov	r30, r0
     75c:	64 2f       	mov	r22, r20
     75e:	09 95       	icall
     760:	08 95       	ret
  else return printNumber(n, base);
     762:	0e 94 46 03 	call	0x68c	; 0x68c <_ZN5Print11printNumberEmh>
}
     766:	08 95       	ret

00000768 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     768:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     76a:	46 2f       	mov	r20, r22
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	0e 94 a5 03 	call	0x74a	; 0x74a <_ZN5Print5printEmi>
}
     776:	08 95       	ret

00000778 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	39 f0       	breq	.+14     	; 0x78a <_Z12disableTimerh+0x12>
     77c:	18 f0       	brcs	.+6      	; 0x784 <_Z12disableTimerh+0xc>
     77e:	82 30       	cpi	r24, 0x02	; 2
     780:	51 f0       	breq	.+20     	; 0x796 <_Z12disableTimerh+0x1e>
     782:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     784:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     788:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     78a:	ef e6       	ldi	r30, 0x6F	; 111
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	8d 7f       	andi	r24, 0xFD	; 253
     792:	80 83       	st	Z, r24
      break;
     794:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     796:	e0 e7       	ldi	r30, 0x70	; 112
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	8d 7f       	andi	r24, 0xFD	; 253
     79e:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     7a6:	e1 eb       	ldi	r30, 0xB1	; 177
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	88 7f       	andi	r24, 0xF8	; 248
     7ae:	84 60       	ori	r24, 0x04	; 4
     7b0:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     7b2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     7b6:	08 95       	ret

000007b8 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7b8:	cf 93       	push	r28
     7ba:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL9tone_pins>
     7c0:	c8 13       	cpse	r28, r24
     7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7c4:	e8 e6       	ldi	r30, 0x68	; 104
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     7ca:	9f ef       	ldi	r25, 0xFF	; 255
     7cc:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_ZL9tone_pins>
      break;
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
     7d4:	0e 94 bc 03 	call	0x778	; 0x778 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	8c 2f       	mov	r24, r28
     7dc:	0e 94 90 05 	call	0xb20	; 0xb20 <digitalWrite>
}
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7e4:	1f 92       	push	r1
     7e6:	0f 92       	push	r0
     7e8:	0f b6       	in	r0, 0x3f	; 63
     7ea:	0f 92       	push	r0
     7ec:	11 24       	eor	r1, r1
     7ee:	2f 93       	push	r18
     7f0:	3f 93       	push	r19
     7f2:	4f 93       	push	r20
     7f4:	5f 93       	push	r21
     7f6:	6f 93       	push	r22
     7f8:	7f 93       	push	r23
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	af 93       	push	r26
     800:	bf 93       	push	r27
     802:	ef 93       	push	r30
     804:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     806:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <timer2_toggle_count>
     80a:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <timer2_toggle_count+0x1>
     80e:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <timer2_toggle_count+0x2>
     812:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <timer2_toggle_count+0x3>
     816:	89 2b       	or	r24, r25
     818:	8a 2b       	or	r24, r26
     81a:	8b 2b       	or	r24, r27
     81c:	51 f1       	breq	.+84     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     81e:	90 91 0d 04 	lds	r25, 0x040D	; 0x80040d <timer2_pin_mask>
     822:	e0 91 0e 04 	lds	r30, 0x040E	; 0x80040e <timer2_pin_port>
     826:	f0 91 0f 04 	lds	r31, 0x040F	; 0x80040f <timer2_pin_port+0x1>
     82a:	80 81       	ld	r24, Z
     82c:	89 27       	eor	r24, r25
     82e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     830:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <timer2_toggle_count>
     834:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <timer2_toggle_count+0x1>
     838:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <timer2_toggle_count+0x2>
     83c:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <timer2_toggle_count+0x3>
     840:	18 16       	cp	r1, r24
     842:	19 06       	cpc	r1, r25
     844:	1a 06       	cpc	r1, r26
     846:	1b 06       	cpc	r1, r27
     848:	c4 f4       	brge	.+48     	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
      timer2_toggle_count--;
     84a:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <timer2_toggle_count>
     84e:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <timer2_toggle_count+0x1>
     852:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <timer2_toggle_count+0x2>
     856:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <timer2_toggle_count+0x3>
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	a1 09       	sbc	r26, r1
     85e:	b1 09       	sbc	r27, r1
     860:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <timer2_toggle_count>
     864:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <timer2_toggle_count+0x1>
     868:	a0 93 12 04 	sts	0x0412, r26	; 0x800412 <timer2_toggle_count+0x2>
     86c:	b0 93 13 04 	sts	0x0413, r27	; 0x800413 <timer2_toggle_count+0x3>
     870:	04 c0       	rjmp	.+8      	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     872:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL9tone_pins>
     876:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     87a:	ff 91       	pop	r31
     87c:	ef 91       	pop	r30
     87e:	bf 91       	pop	r27
     880:	af 91       	pop	r26
     882:	9f 91       	pop	r25
     884:	8f 91       	pop	r24
     886:	7f 91       	pop	r23
     888:	6f 91       	pop	r22
     88a:	5f 91       	pop	r21
     88c:	4f 91       	pop	r20
     88e:	3f 91       	pop	r19
     890:	2f 91       	pop	r18
     892:	0f 90       	pop	r0
     894:	0f be       	out	0x3f, r0	; 63
     896:	0f 90       	pop	r0
     898:	1f 90       	pop	r1
     89a:	18 95       	reti

0000089c <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     89c:	08 95       	ret

0000089e <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     89e:	1f 92       	push	r1
     8a0:	0f 92       	push	r0
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	0f 92       	push	r0
     8a6:	11 24       	eor	r1, r1
     8a8:	2f 93       	push	r18
     8aa:	3f 93       	push	r19
     8ac:	4f 93       	push	r20
     8ae:	5f 93       	push	r21
     8b0:	6f 93       	push	r22
     8b2:	7f 93       	push	r23
     8b4:	8f 93       	push	r24
     8b6:	9f 93       	push	r25
     8b8:	af 93       	push	r26
     8ba:	bf 93       	push	r27
     8bc:	ef 93       	push	r30
     8be:	ff 93       	push	r31
     8c0:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <intFunc>
     8c4:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <intFunc+0x1>
     8c8:	09 95       	icall
     8ca:	ff 91       	pop	r31
     8cc:	ef 91       	pop	r30
     8ce:	bf 91       	pop	r27
     8d0:	af 91       	pop	r26
     8d2:	9f 91       	pop	r25
     8d4:	8f 91       	pop	r24
     8d6:	7f 91       	pop	r23
     8d8:	6f 91       	pop	r22
     8da:	5f 91       	pop	r21
     8dc:	4f 91       	pop	r20
     8de:	3f 91       	pop	r19
     8e0:	2f 91       	pop	r18
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0
     8e8:	1f 90       	pop	r1
     8ea:	18 95       	reti

000008ec <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     8ec:	1f 92       	push	r1
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	0f 92       	push	r0
     8f4:	11 24       	eor	r1, r1
     8f6:	2f 93       	push	r18
     8f8:	3f 93       	push	r19
     8fa:	4f 93       	push	r20
     8fc:	5f 93       	push	r21
     8fe:	6f 93       	push	r22
     900:	7f 93       	push	r23
     902:	8f 93       	push	r24
     904:	9f 93       	push	r25
     906:	af 93       	push	r26
     908:	bf 93       	push	r27
     90a:	ef 93       	push	r30
     90c:	ff 93       	push	r31
     90e:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <intFunc+0x2>
     912:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <intFunc+0x3>
     916:	09 95       	icall
     918:	ff 91       	pop	r31
     91a:	ef 91       	pop	r30
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	0f 90       	pop	r0
     932:	0f be       	out	0x3f, r0	; 63
     934:	0f 90       	pop	r0
     936:	1f 90       	pop	r1
     938:	18 95       	reti

0000093a <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     93a:	1f 92       	push	r1
     93c:	0f 92       	push	r0
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	0f 92       	push	r0
     942:	11 24       	eor	r1, r1
     944:	2f 93       	push	r18
     946:	3f 93       	push	r19
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
     94c:	af 93       	push	r26
     94e:	bf 93       	push	r27
     950:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <timer0_millis>
     954:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <timer0_millis+0x1>
     958:	a0 91 17 04 	lds	r26, 0x0417	; 0x800417 <timer0_millis+0x2>
     95c:	b0 91 18 04 	lds	r27, 0x0418	; 0x800418 <timer0_millis+0x3>
     960:	30 91 14 04 	lds	r19, 0x0414	; 0x800414 <timer0_fract>
     964:	23 e0       	ldi	r18, 0x03	; 3
     966:	23 0f       	add	r18, r19
     968:	2d 37       	cpi	r18, 0x7D	; 125
     96a:	20 f4       	brcc	.+8      	; 0x974 <__vector_16+0x3a>
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	a1 1d       	adc	r26, r1
     970:	b1 1d       	adc	r27, r1
     972:	05 c0       	rjmp	.+10     	; 0x97e <__vector_16+0x44>
     974:	26 e8       	ldi	r18, 0x86	; 134
     976:	23 0f       	add	r18, r19
     978:	02 96       	adiw	r24, 0x02	; 2
     97a:	a1 1d       	adc	r26, r1
     97c:	b1 1d       	adc	r27, r1
     97e:	20 93 14 04 	sts	0x0414, r18	; 0x800414 <timer0_fract>
     982:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <timer0_millis>
     986:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <timer0_millis+0x1>
     98a:	a0 93 17 04 	sts	0x0417, r26	; 0x800417 <timer0_millis+0x2>
     98e:	b0 93 18 04 	sts	0x0418, r27	; 0x800418 <timer0_millis+0x3>
     992:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <timer0_overflow_count>
     996:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <timer0_overflow_count+0x1>
     99a:	a0 91 1b 04 	lds	r26, 0x041B	; 0x80041b <timer0_overflow_count+0x2>
     99e:	b0 91 1c 04 	lds	r27, 0x041C	; 0x80041c <timer0_overflow_count+0x3>
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	a1 1d       	adc	r26, r1
     9a6:	b1 1d       	adc	r27, r1
     9a8:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <timer0_overflow_count>
     9ac:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <timer0_overflow_count+0x1>
     9b0:	a0 93 1b 04 	sts	0x041B, r26	; 0x80041b <timer0_overflow_count+0x2>
     9b4:	b0 93 1c 04 	sts	0x041C, r27	; 0x80041c <timer0_overflow_count+0x3>
     9b8:	bf 91       	pop	r27
     9ba:	af 91       	pop	r26
     9bc:	9f 91       	pop	r25
     9be:	8f 91       	pop	r24
     9c0:	3f 91       	pop	r19
     9c2:	2f 91       	pop	r18
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0
     9ca:	1f 90       	pop	r1
     9cc:	18 95       	reti

000009ce <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     9ce:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     9d0:	84 b5       	in	r24, 0x24	; 36
     9d2:	82 60       	ori	r24, 0x02	; 2
     9d4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     9d6:	84 b5       	in	r24, 0x24	; 36
     9d8:	81 60       	ori	r24, 0x01	; 1
     9da:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     9dc:	85 b5       	in	r24, 0x25	; 37
     9de:	82 60       	ori	r24, 0x02	; 2
     9e0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     9e2:	85 b5       	in	r24, 0x25	; 37
     9e4:	81 60       	ori	r24, 0x01	; 1
     9e6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     9e8:	ee e6       	ldi	r30, 0x6E	; 110
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	81 60       	ori	r24, 0x01	; 1
     9f0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     9f2:	e1 e8       	ldi	r30, 0x81	; 129
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     9f8:	80 81       	ld	r24, Z
     9fa:	82 60       	ori	r24, 0x02	; 2
     9fc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     9fe:	80 81       	ld	r24, Z
     a00:	81 60       	ori	r24, 0x01	; 1
     a02:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     a04:	e0 e8       	ldi	r30, 0x80	; 128
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	81 60       	ori	r24, 0x01	; 1
     a0c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     a0e:	e1 eb       	ldi	r30, 0xB1	; 177
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	84 60       	ori	r24, 0x04	; 4
     a16:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     a18:	e0 eb       	ldi	r30, 0xB0	; 176
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	80 81       	ld	r24, Z
     a1e:	81 60       	ori	r24, 0x01	; 1
     a20:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     a22:	ea e7       	ldi	r30, 0x7A	; 122
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	80 81       	ld	r24, Z
     a28:	84 60       	ori	r24, 0x04	; 4
     a2a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     a2c:	80 81       	ld	r24, Z
     a2e:	82 60       	ori	r24, 0x02	; 2
     a30:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     a32:	80 81       	ld	r24, Z
     a34:	81 60       	ori	r24, 0x01	; 1
     a36:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     a38:	80 81       	ld	r24, Z
     a3a:	80 68       	ori	r24, 0x80	; 128
     a3c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     a3e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     a42:	08 95       	ret

00000a44 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     a44:	83 30       	cpi	r24, 0x03	; 3
     a46:	69 f0       	breq	.+26     	; 0xa62 <turnOffPWM+0x1e>
     a48:	28 f4       	brcc	.+10     	; 0xa54 <turnOffPWM+0x10>
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	b1 f0       	breq	.+44     	; 0xa7a <turnOffPWM+0x36>
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	c1 f0       	breq	.+48     	; 0xa82 <turnOffPWM+0x3e>
     a52:	08 95       	ret
     a54:	87 30       	cpi	r24, 0x07	; 7
     a56:	c9 f0       	breq	.+50     	; 0xa8a <turnOffPWM+0x46>
     a58:	88 30       	cpi	r24, 0x08	; 8
     a5a:	e9 f0       	breq	.+58     	; 0xa96 <turnOffPWM+0x52>
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	01 f5       	brne	.+64     	; 0xaa0 <turnOffPWM+0x5c>
     a60:	06 c0       	rjmp	.+12     	; 0xa6e <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     a62:	e0 e8       	ldi	r30, 0x80	; 128
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	80 83       	st	Z, r24
     a6c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     a6e:	e0 e8       	ldi	r30, 0x80	; 128
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	80 81       	ld	r24, Z
     a74:	8f 7d       	andi	r24, 0xDF	; 223
     a76:	80 83       	st	Z, r24
     a78:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     a7a:	84 b5       	in	r24, 0x24	; 36
     a7c:	8f 77       	andi	r24, 0x7F	; 127
     a7e:	84 bd       	out	0x24, r24	; 36
     a80:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     a82:	84 b5       	in	r24, 0x24	; 36
     a84:	8f 7d       	andi	r24, 0xDF	; 223
     a86:	84 bd       	out	0x24, r24	; 36
     a88:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     a8a:	e0 eb       	ldi	r30, 0xB0	; 176
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	80 81       	ld	r24, Z
     a90:	8f 77       	andi	r24, 0x7F	; 127
     a92:	80 83       	st	Z, r24
     a94:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     a96:	e0 eb       	ldi	r30, 0xB0	; 176
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	80 81       	ld	r24, Z
     a9c:	8f 7d       	andi	r24, 0xDF	; 223
     a9e:	80 83       	st	Z, r24
     aa0:	08 95       	ret

00000aa2 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	fc 01       	movw	r30, r24
     aaa:	e3 58       	subi	r30, 0x83	; 131
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     ab0:	fc 01       	movw	r30, r24
     ab2:	ef 56       	subi	r30, 0x6F	; 111
     ab4:	ff 4f       	sbci	r31, 0xFF	; 255
     ab6:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     ab8:	88 23       	and	r24, r24
     aba:	79 f1       	breq	.+94     	; 0xb1a <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	fc 01       	movw	r30, r24
     ac4:	e7 54       	subi	r30, 0x47	; 71
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	a5 91       	lpm	r26, Z+
     aca:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     acc:	fc 01       	movw	r30, r24
     ace:	e1 55       	subi	r30, 0x51	; 81
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	c5 91       	lpm	r28, Z+
     ad4:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     ad6:	61 11       	cpse	r22, r1
     ad8:	0c c0       	rjmp	.+24     	; 0xaf2 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     ada:	9f b7       	in	r25, 0x3f	; 63
                cli();
     adc:	f8 94       	cli
		*reg &= ~bit;
     ade:	8c 91       	ld	r24, X
     ae0:	e2 2f       	mov	r30, r18
     ae2:	e0 95       	com	r30
     ae4:	8e 23       	and	r24, r30
     ae6:	8c 93       	st	X, r24
		*out &= ~bit;
     ae8:	28 81       	ld	r18, Y
     aea:	e2 23       	and	r30, r18
     aec:	e8 83       	st	Y, r30
		SREG = oldSREG;
     aee:	9f bf       	out	0x3f, r25	; 63
     af0:	14 c0       	rjmp	.+40     	; 0xb1a <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     af2:	62 30       	cpi	r22, 0x02	; 2
     af4:	61 f4       	brne	.+24     	; 0xb0e <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     af6:	9f b7       	in	r25, 0x3f	; 63
                cli();
     af8:	f8 94       	cli
		*reg &= ~bit;
     afa:	8c 91       	ld	r24, X
     afc:	32 2f       	mov	r19, r18
     afe:	30 95       	com	r19
     b00:	83 23       	and	r24, r19
     b02:	8c 93       	st	X, r24
		*out |= bit;
     b04:	e8 81       	ld	r30, Y
     b06:	e2 2b       	or	r30, r18
     b08:	e8 83       	st	Y, r30
		SREG = oldSREG;
     b0a:	9f bf       	out	0x3f, r25	; 63
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     b0e:	8f b7       	in	r24, 0x3f	; 63
                cli();
     b10:	f8 94       	cli
		*reg |= bit;
     b12:	ec 91       	ld	r30, X
     b14:	e2 2b       	or	r30, r18
     b16:	ec 93       	st	X, r30
		SREG = oldSREG;
     b18:	8f bf       	out	0x3f, r24	; 63
	}
}
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     b26:	28 2f       	mov	r18, r24
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	f9 01       	movw	r30, r18
     b2c:	e7 59       	subi	r30, 0x97	; 151
     b2e:	ff 4f       	sbci	r31, 0xFF	; 255
     b30:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     b32:	f9 01       	movw	r30, r18
     b34:	e3 58       	subi	r30, 0x83	; 131
     b36:	ff 4f       	sbci	r31, 0xFF	; 255
     b38:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     b3a:	f9 01       	movw	r30, r18
     b3c:	ef 56       	subi	r30, 0x6F	; 111
     b3e:	ff 4f       	sbci	r31, 0xFF	; 255
     b40:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     b42:	cc 23       	and	r28, r28
     b44:	d1 f0       	breq	.+52     	; 0xb7a <digitalWrite+0x5a>
     b46:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     b48:	81 11       	cpse	r24, r1
     b4a:	0e 94 22 05 	call	0xa44	; 0xa44 <turnOffPWM>

	out = portOutputRegister(port);
     b4e:	ec 2f       	mov	r30, r28
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	ee 0f       	add	r30, r30
     b54:	ff 1f       	adc	r31, r31
     b56:	e1 55       	subi	r30, 0x51	; 81
     b58:	ff 4f       	sbci	r31, 0xFF	; 255
     b5a:	a5 91       	lpm	r26, Z+
     b5c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     b5e:	8f b7       	in	r24, 0x3f	; 63
	cli();
     b60:	f8 94       	cli

	if (val == LOW) {
     b62:	d1 11       	cpse	r29, r1
     b64:	06 c0       	rjmp	.+12     	; 0xb72 <digitalWrite+0x52>
		*out &= ~bit;
     b66:	9c 91       	ld	r25, X
     b68:	e1 2f       	mov	r30, r17
     b6a:	e0 95       	com	r30
     b6c:	e9 23       	and	r30, r25
     b6e:	ec 93       	st	X, r30
     b70:	03 c0       	rjmp	.+6      	; 0xb78 <digitalWrite+0x58>
	} else {
		*out |= bit;
     b72:	ec 91       	ld	r30, X
     b74:	e1 2b       	or	r30, r17
     b76:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     b78:	8f bf       	out	0x3f, r24	; 63
}
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	08 95       	ret

00000b82 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     b82:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
     b86:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
     b8a:	28 17       	cp	r18, r24
     b8c:	39 07       	cpc	r19, r25
     b8e:	99 f4       	brne	.+38     	; 0xbb6 <_ZN14SoftwareSerial4readEv+0x34>
     b90:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <_ZN14SoftwareSerial20_receive_buffer_headE>
     b94:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     b98:	98 17       	cp	r25, r24
     b9a:	81 f0       	breq	.+32     	; 0xbbc <_ZN14SoftwareSerial4readEv+0x3a>
     b9c:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <_ZN14SoftwareSerial20_receive_buffer_headE>
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	e1 5e       	subi	r30, 0xE1	; 225
     ba4:	fb 4f       	sbci	r31, 0xFB	; 251
     ba6:	80 81       	ld	r24, Z
     ba8:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <_ZN14SoftwareSerial20_receive_buffer_headE>
     bac:	2f 5f       	subi	r18, 0xFF	; 255
     bae:	20 93 1d 04 	sts	0x041D, r18	; 0x80041d <_ZN14SoftwareSerial20_receive_buffer_headE>
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	08 95       	ret
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	08 95       	ret
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	9f ef       	ldi	r25, 0xFF	; 255
     bc0:	08 95       	ret

00000bc2 <_ZN14SoftwareSerial9availableEv>:
     bc2:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
     bc6:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
     bca:	28 17       	cp	r18, r24
     bcc:	39 07       	cpc	r19, r25
     bce:	99 f4       	brne	.+38     	; 0xbf6 <_ZN14SoftwareSerial9availableEv+0x34>
     bd0:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     bd4:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZN14SoftwareSerial20_receive_buffer_headE>
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	33 95       	inc	r19
     bdc:	28 1b       	sub	r18, r24
     bde:	31 09       	sbc	r19, r1
     be0:	30 78       	andi	r19, 0x80	; 128
     be2:	33 23       	and	r19, r19
     be4:	2c f4       	brge	.+10     	; 0xbf0 <_ZN14SoftwareSerial9availableEv+0x2e>
     be6:	21 50       	subi	r18, 0x01	; 1
     be8:	31 09       	sbc	r19, r1
     bea:	3f 6f       	ori	r19, 0xFF	; 255
     bec:	2f 5f       	subi	r18, 0xFF	; 255
     bee:	3f 4f       	sbci	r19, 0xFF	; 255
     bf0:	82 2f       	mov	r24, r18
     bf2:	93 2f       	mov	r25, r19
     bf4:	08 95       	ret
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	08 95       	ret

00000bfc <_ZN14SoftwareSerial5writeEh>:
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
     c04:	4c 8d       	ldd	r20, Y+28	; 0x1c
     c06:	5d 8d       	ldd	r21, Y+29	; 0x1d
     c08:	41 15       	cp	r20, r1
     c0a:	51 05       	cpc	r21, r1
     c0c:	29 f4       	brne	.+10     	; 0xc18 <_ZN14SoftwareSerial5writeEh+0x1c>
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9b 83       	std	Y+3, r25	; 0x03
     c14:	8a 83       	std	Y+2, r24	; 0x02
     c16:	38 c0       	rjmp	.+112    	; 0xc88 <_ZN14SoftwareSerial5writeEh+0x8c>
     c18:	a9 89       	ldd	r26, Y+17	; 0x11
     c1a:	ba 89       	ldd	r27, Y+18	; 0x12
     c1c:	88 89       	ldd	r24, Y+16	; 0x10
     c1e:	38 2f       	mov	r19, r24
     c20:	30 95       	com	r19
     c22:	1f b7       	in	r17, 0x3f	; 63
     c24:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c26:	79 2f       	mov	r23, r25
     c28:	72 70       	andi	r23, 0x02	; 2
     c2a:	91 fd       	sbrc	r25, 1
     c2c:	60 95       	com	r22
     c2e:	f8 94       	cli
     c30:	77 23       	and	r23, r23
     c32:	21 f0       	breq	.+8      	; 0xc3c <_ZN14SoftwareSerial5writeEh+0x40>
     c34:	9c 91       	ld	r25, X
     c36:	98 2b       	or	r25, r24
     c38:	9c 93       	st	X, r25
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <_ZN14SoftwareSerial5writeEh+0x46>
     c3c:	9c 91       	ld	r25, X
     c3e:	93 23       	and	r25, r19
     c40:	9c 93       	st	X, r25
     c42:	fa 01       	movw	r30, r20
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	f1 f7       	brne	.-4      	; 0xc44 <_ZN14SoftwareSerial5writeEh+0x48>
     c48:	98 e0       	ldi	r25, 0x08	; 8
     c4a:	60 ff       	sbrs	r22, 0
     c4c:	04 c0       	rjmp	.+8      	; 0xc56 <_ZN14SoftwareSerial5writeEh+0x5a>
     c4e:	2c 91       	ld	r18, X
     c50:	28 2b       	or	r18, r24
     c52:	2c 93       	st	X, r18
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <_ZN14SoftwareSerial5writeEh+0x60>
     c56:	2c 91       	ld	r18, X
     c58:	23 23       	and	r18, r19
     c5a:	2c 93       	st	X, r18
     c5c:	fa 01       	movw	r30, r20
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <_ZN14SoftwareSerial5writeEh+0x62>
     c62:	66 95       	lsr	r22
     c64:	91 50       	subi	r25, 0x01	; 1
     c66:	89 f7       	brne	.-30     	; 0xc4a <_ZN14SoftwareSerial5writeEh+0x4e>
     c68:	77 23       	and	r23, r23
     c6a:	21 f0       	breq	.+8      	; 0xc74 <_ZN14SoftwareSerial5writeEh+0x78>
     c6c:	8c 91       	ld	r24, X
     c6e:	38 23       	and	r19, r24
     c70:	3c 93       	st	X, r19
     c72:	03 c0       	rjmp	.+6      	; 0xc7a <_ZN14SoftwareSerial5writeEh+0x7e>
     c74:	9c 91       	ld	r25, X
     c76:	89 2b       	or	r24, r25
     c78:	8c 93       	st	X, r24
     c7a:	1f bf       	out	0x3f, r17	; 63
     c7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c7e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <_ZN14SoftwareSerial5writeEh+0x84>
     c84:	41 e0       	ldi	r20, 0x01	; 1
     c86:	50 e0       	ldi	r21, 0x00	; 0
     c88:	ca 01       	movw	r24, r20
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	08 95       	ret

00000c92 <_ZN14SoftwareSerial5flushEv>:
     c92:	08 95       	ret

00000c94 <_ZN14SoftwareSerial4peekEv>:
     c94:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
     c98:	30 91 20 05 	lds	r19, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
     c9c:	28 17       	cp	r18, r24
     c9e:	39 07       	cpc	r19, r25
     ca0:	71 f4       	brne	.+28     	; 0xcbe <_ZN14SoftwareSerial4peekEv+0x2a>
     ca2:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <_ZN14SoftwareSerial20_receive_buffer_headE>
     ca6:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     caa:	98 17       	cp	r25, r24
     cac:	59 f0       	breq	.+22     	; 0xcc4 <_ZN14SoftwareSerial4peekEv+0x30>
     cae:	e0 91 1d 04 	lds	r30, 0x041D	; 0x80041d <_ZN14SoftwareSerial20_receive_buffer_headE>
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	e1 5e       	subi	r30, 0xE1	; 225
     cb6:	fb 4f       	sbci	r31, 0xFB	; 251
     cb8:	80 81       	ld	r24, Z
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	08 95       	ret
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	08 95       	ret
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	9f ef       	ldi	r25, 0xFF	; 255
     cc8:	08 95       	ret

00000cca <_ZN14SoftwareSerial13stopListeningEv>:
     cca:	e0 91 1f 05 	lds	r30, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
     cce:	f0 91 20 05 	lds	r31, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
     cd2:	e8 17       	cp	r30, r24
     cd4:	f9 07       	cpc	r31, r25
     cd6:	69 f4       	brne	.+26     	; 0xcf2 <_ZN14SoftwareSerial13stopListeningEv+0x28>
     cd8:	a3 89       	ldd	r26, Z+19	; 0x13
     cda:	b4 89       	ldd	r27, Z+20	; 0x14
     cdc:	9c 91       	ld	r25, X
     cde:	85 89       	ldd	r24, Z+21	; 0x15
     ce0:	80 95       	com	r24
     ce2:	89 23       	and	r24, r25
     ce4:	8c 93       	st	X, r24
     ce6:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
     cea:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	08 95       	ret
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	08 95       	ret

00000cf6 <_ZN14SoftwareSerial6listenEv>:
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	ec 01       	movw	r28, r24
     cfc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cfe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d00:	89 2b       	or	r24, r25
     d02:	f1 f0       	breq	.+60     	; 0xd40 <_ZN14SoftwareSerial6listenEv+0x4a>
     d04:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
     d08:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
     d0c:	c8 17       	cp	r28, r24
     d0e:	d9 07       	cpc	r29, r25
     d10:	c9 f0       	breq	.+50     	; 0xd44 <_ZN14SoftwareSerial6listenEv+0x4e>
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	11 f0       	breq	.+4      	; 0xd1a <_ZN14SoftwareSerial6listenEv+0x24>
     d16:	0e 94 65 06 	call	0xcca	; 0xcca <_ZN14SoftwareSerial13stopListeningEv>
     d1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d1c:	8e 7f       	andi	r24, 0xFE	; 254
     d1e:	8e 8f       	std	Y+30, r24	; 0x1e
     d20:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d24:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <_ZN14SoftwareSerial20_receive_buffer_headE>
     d28:	d0 93 20 05 	sts	0x0520, r29	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
     d2c:	c0 93 1f 05 	sts	0x051F, r28	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
     d30:	eb 89       	ldd	r30, Y+19	; 0x13
     d32:	fc 89       	ldd	r31, Y+20	; 0x14
     d34:	90 81       	ld	r25, Z
     d36:	8d 89       	ldd	r24, Y+21	; 0x15
     d38:	89 2b       	or	r24, r25
     d3a:	80 83       	st	Z, r24
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <_ZN14SoftwareSerial6listenEv+0x50>
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <_ZN14SoftwareSerial6listenEv+0x50>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <__vector_3>:
     d4c:	1f 92       	push	r1
     d4e:	0f 92       	push	r0
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	0f 92       	push	r0
     d54:	11 24       	eor	r1, r1
     d56:	2f 93       	push	r18
     d58:	3f 93       	push	r19
     d5a:	4f 93       	push	r20
     d5c:	5f 93       	push	r21
     d5e:	6f 93       	push	r22
     d60:	7f 93       	push	r23
     d62:	8f 93       	push	r24
     d64:	9f 93       	push	r25
     d66:	af 93       	push	r26
     d68:	bf 93       	push	r27
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
     d6e:	ef 93       	push	r30
     d70:	ff 93       	push	r31
     d72:	a0 91 1f 05 	lds	r26, 0x051F	; 0x80051f <_ZN14SoftwareSerial13active_objectE>
     d76:	b0 91 20 05 	lds	r27, 0x0520	; 0x800520 <_ZN14SoftwareSerial13active_objectE+0x1>
     d7a:	10 97       	sbiw	r26, 0x00	; 0
     d7c:	09 f4       	brne	.+2      	; 0xd80 <__vector_3+0x34>
     d7e:	78 c0       	rjmp	.+240    	; 0xe70 <__vector_3+0x124>
     d80:	5e 96       	adiw	r26, 0x1e	; 30
     d82:	8c 91       	ld	r24, X
     d84:	5e 97       	sbiw	r26, 0x1e	; 30
     d86:	81 ff       	sbrs	r24, 1
     d88:	0d c0       	rjmp	.+26     	; 0xda4 <__vector_3+0x58>
     d8a:	1e 96       	adiw	r26, 0x0e	; 14
     d8c:	ed 91       	ld	r30, X+
     d8e:	fc 91       	ld	r31, X
     d90:	1f 97       	sbiw	r26, 0x0f	; 15
     d92:	90 81       	ld	r25, Z
     d94:	1d 96       	adiw	r26, 0x0d	; 13
     d96:	8c 91       	ld	r24, X
     d98:	1d 97       	sbiw	r26, 0x0d	; 13
     d9a:	98 23       	and	r25, r24
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	71 f4       	brne	.+28     	; 0xdbc <__vector_3+0x70>
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0c c0       	rjmp	.+24     	; 0xdbc <__vector_3+0x70>
     da4:	1e 96       	adiw	r26, 0x0e	; 14
     da6:	ed 91       	ld	r30, X+
     da8:	fc 91       	ld	r31, X
     daa:	1f 97       	sbiw	r26, 0x0f	; 15
     dac:	90 81       	ld	r25, Z
     dae:	1d 96       	adiw	r26, 0x0d	; 13
     db0:	8c 91       	ld	r24, X
     db2:	1d 97       	sbiw	r26, 0x0d	; 13
     db4:	98 23       	and	r25, r24
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	09 f0       	breq	.+2      	; 0xdbc <__vector_3+0x70>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	88 23       	and	r24, r24
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <__vector_3+0x76>
     dc0:	57 c0       	rjmp	.+174    	; 0xe70 <__vector_3+0x124>
     dc2:	53 96       	adiw	r26, 0x13	; 19
     dc4:	ed 91       	ld	r30, X+
     dc6:	fc 91       	ld	r31, X
     dc8:	54 97       	sbiw	r26, 0x14	; 20
     dca:	90 81       	ld	r25, Z
     dcc:	55 96       	adiw	r26, 0x15	; 21
     dce:	8c 91       	ld	r24, X
     dd0:	55 97       	sbiw	r26, 0x15	; 21
     dd2:	80 95       	com	r24
     dd4:	89 23       	and	r24, r25
     dd6:	80 83       	st	Z, r24
     dd8:	56 96       	adiw	r26, 0x16	; 22
     dda:	8d 91       	ld	r24, X+
     ddc:	9c 91       	ld	r25, X
     dde:	57 97       	sbiw	r26, 0x17	; 23
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <__vector_3+0x94>
     de4:	58 96       	adiw	r26, 0x18	; 24
     de6:	6d 91       	ld	r22, X+
     de8:	7c 91       	ld	r23, X
     dea:	59 97       	sbiw	r26, 0x19	; 25
     dec:	1e 96       	adiw	r26, 0x0e	; 14
     dee:	cd 91       	ld	r28, X+
     df0:	dc 91       	ld	r29, X
     df2:	1f 97       	sbiw	r26, 0x0f	; 15
     df4:	1d 96       	adiw	r26, 0x0d	; 13
     df6:	5c 91       	ld	r21, X
     df8:	1d 97       	sbiw	r26, 0x0d	; 13
     dfa:	38 e0       	ldi	r19, 0x08	; 8
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	fb 01       	movw	r30, r22
     e00:	31 97       	sbiw	r30, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <__vector_3+0xb4>
     e04:	84 2f       	mov	r24, r20
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	95 95       	asr	r25
     e0a:	87 95       	ror	r24
     e0c:	48 2f       	mov	r20, r24
     e0e:	28 81       	ld	r18, Y
     e10:	25 23       	and	r18, r21
     e12:	09 f0       	breq	.+2      	; 0xe16 <__vector_3+0xca>
     e14:	40 68       	ori	r20, 0x80	; 128
     e16:	31 50       	subi	r19, 0x01	; 1
     e18:	91 f7       	brne	.-28     	; 0xdfe <__vector_3+0xb2>
     e1a:	5e 96       	adiw	r26, 0x1e	; 30
     e1c:	8c 91       	ld	r24, X
     e1e:	5e 97       	sbiw	r26, 0x1e	; 30
     e20:	81 fd       	sbrc	r24, 1
     e22:	40 95       	com	r20
     e24:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e28:	8f 5f       	subi	r24, 0xFF	; 255
     e2a:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <_ZN14SoftwareSerial20_receive_buffer_headE>
     e2e:	28 17       	cp	r18, r24
     e30:	49 f0       	breq	.+18     	; 0xe44 <__vector_3+0xf8>
     e32:	e0 91 1e 04 	lds	r30, 0x041E	; 0x80041e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	e1 5e       	subi	r30, 0xE1	; 225
     e3a:	fb 4f       	sbci	r31, 0xFB	; 251
     e3c:	40 83       	st	Z, r20
     e3e:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e42:	07 c0       	rjmp	.+14     	; 0xe52 <__vector_3+0x106>
     e44:	5e 96       	adiw	r26, 0x1e	; 30
     e46:	8c 91       	ld	r24, X
     e48:	5e 97       	sbiw	r26, 0x1e	; 30
     e4a:	81 60       	ori	r24, 0x01	; 1
     e4c:	5e 96       	adiw	r26, 0x1e	; 30
     e4e:	8c 93       	st	X, r24
     e50:	5e 97       	sbiw	r26, 0x1e	; 30
     e52:	5a 96       	adiw	r26, 0x1a	; 26
     e54:	8d 91       	ld	r24, X+
     e56:	9c 91       	ld	r25, X
     e58:	5b 97       	sbiw	r26, 0x1b	; 27
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <__vector_3+0x10e>
     e5e:	53 96       	adiw	r26, 0x13	; 19
     e60:	ed 91       	ld	r30, X+
     e62:	fc 91       	ld	r31, X
     e64:	54 97       	sbiw	r26, 0x14	; 20
     e66:	90 81       	ld	r25, Z
     e68:	55 96       	adiw	r26, 0x15	; 21
     e6a:	8c 91       	ld	r24, X
     e6c:	89 2b       	or	r24, r25
     e6e:	80 83       	st	Z, r24
     e70:	ff 91       	pop	r31
     e72:	ef 91       	pop	r30
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	bf 91       	pop	r27
     e7a:	af 91       	pop	r26
     e7c:	9f 91       	pop	r25
     e7e:	8f 91       	pop	r24
     e80:	7f 91       	pop	r23
     e82:	6f 91       	pop	r22
     e84:	5f 91       	pop	r21
     e86:	4f 91       	pop	r20
     e88:	3f 91       	pop	r19
     e8a:	2f 91       	pop	r18
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <_ZN14SoftwareSerial5setTXEh>:
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	ec 01       	movw	r28, r24
     e9e:	16 2f       	mov	r17, r22
     ea0:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ea2:	66 95       	lsr	r22
     ea4:	61 70       	andi	r22, 0x01	; 1
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	68 27       	eor	r22, r24
     eaa:	81 2f       	mov	r24, r17
     eac:	0e 94 90 05 	call	0xb20	; 0xb20 <digitalWrite>
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	81 2f       	mov	r24, r17
     eb4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <pinMode>
     eb8:	81 2f       	mov	r24, r17
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	fc 01       	movw	r30, r24
     ebe:	e3 58       	subi	r30, 0x83	; 131
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	e4 91       	lpm	r30, Z
     ec4:	e8 8b       	std	Y+16, r30	; 0x10
     ec6:	fc 01       	movw	r30, r24
     ec8:	ef 56       	subi	r30, 0x6F	; 111
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	e4 91       	lpm	r30, Z
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	e1 55       	subi	r30, 0x51	; 81
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	85 91       	lpm	r24, Z+
     eda:	94 91       	lpm	r25, Z
     edc:	9a 8b       	std	Y+18, r25	; 0x12
     ede:	89 8b       	std	Y+17, r24	; 0x11
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	08 95       	ret

00000ee8 <_ZN14SoftwareSerial5setRXEh>:
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	ec 01       	movw	r28, r24
     ef0:	16 2f       	mov	r17, r22
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	81 2f       	mov	r24, r17
     ef6:	0e 94 51 05 	call	0xaa2	; 0xaa2 <pinMode>
     efa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     efc:	81 fd       	sbrc	r24, 1
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <_ZN14SoftwareSerial5setRXEh+0x20>
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	81 2f       	mov	r24, r17
     f04:	0e 94 90 05 	call	0xb20	; 0xb20 <digitalWrite>
     f08:	1c 87       	std	Y+12, r17	; 0x0c
     f0a:	61 2f       	mov	r22, r17
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	fb 01       	movw	r30, r22
     f10:	e3 58       	subi	r30, 0x83	; 131
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	e4 91       	lpm	r30, Z
     f16:	ed 87       	std	Y+13, r30	; 0x0d
     f18:	fb 01       	movw	r30, r22
     f1a:	ef 56       	subi	r30, 0x6F	; 111
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	e4 91       	lpm	r30, Z
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	ee 0f       	add	r30, r30
     f24:	ff 1f       	adc	r31, r31
     f26:	eb 55       	subi	r30, 0x5B	; 91
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	85 91       	lpm	r24, Z+
     f2c:	94 91       	lpm	r25, Z
     f2e:	9f 87       	std	Y+15, r25	; 0x0f
     f30:	8e 87       	std	Y+14, r24	; 0x0e
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	08 95       	ret

00000f3a <_ZN14SoftwareSerialC1Ehhb>:
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	ec 01       	movw	r28, r24
     f42:	16 2f       	mov	r17, r22
     f44:	1b 82       	std	Y+3, r1	; 0x03
     f46:	1a 82       	std	Y+2, r1	; 0x02
     f48:	88 ee       	ldi	r24, 0xE8	; 232
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	8c 83       	std	Y+4, r24	; 0x04
     f52:	9d 83       	std	Y+5, r25	; 0x05
     f54:	ae 83       	std	Y+6, r26	; 0x06
     f56:	bf 83       	std	Y+7, r27	; 0x07
     f58:	86 e3       	ldi	r24, 0x36	; 54
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	99 83       	std	Y+1, r25	; 0x01
     f5e:	88 83       	st	Y, r24
     f60:	1f 8a       	std	Y+23, r1	; 0x17
     f62:	1e 8a       	std	Y+22, r1	; 0x16
     f64:	19 8e       	std	Y+25, r1	; 0x19
     f66:	18 8e       	std	Y+24, r1	; 0x18
     f68:	1b 8e       	std	Y+27, r1	; 0x1b
     f6a:	1a 8e       	std	Y+26, r1	; 0x1a
     f6c:	1d 8e       	std	Y+29, r1	; 0x1d
     f6e:	1c 8e       	std	Y+28, r1	; 0x1c
     f70:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	20 fb       	bst	r18, 0
     f76:	81 f9       	bld	r24, 1
     f78:	8e 8f       	std	Y+30, r24	; 0x1e
     f7a:	64 2f       	mov	r22, r20
     f7c:	ce 01       	movw	r24, r28
     f7e:	0e 94 4b 07 	call	0xe96	; 0xe96 <_ZN14SoftwareSerial5setTXEh>
     f82:	61 2f       	mov	r22, r17
     f84:	ce 01       	movw	r24, r28
     f86:	0e 94 74 07 	call	0xee8	; 0xee8 <_ZN14SoftwareSerial5setRXEh>
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	08 95       	ret

00000f92 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
     f98:	9a 01       	movw	r18, r20
     f9a:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     f9c:	1b 8e       	std	Y+27, r1	; 0x1b
     f9e:	1a 8e       	std	Y+26, r1	; 0x1a
     fa0:	19 8e       	std	Y+25, r1	; 0x19
     fa2:	18 8e       	std	Y+24, r1	; 0x18
     fa4:	1f 8a       	std	Y+23, r1	; 0x17
     fa6:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	79 e0       	ldi	r23, 0x09	; 9
     fac:	8d e3       	ldi	r24, 0x3D	; 61
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__udivmodsi4>
     fb4:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     fb6:	24 30       	cpi	r18, 0x04	; 4
     fb8:	31 05       	cpc	r19, r1
     fba:	18 f0       	brcs	.+6      	; 0xfc2 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
     fbc:	c9 01       	movw	r24, r18
     fbe:	03 97       	sbiw	r24, 0x03	; 3
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     fc6:	9d 8f       	std	Y+29, r25	; 0x1d
     fc8:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
     fca:	8c 85       	ldd	r24, Y+12	; 0x0c
     fcc:	86 31       	cpi	r24, 0x16	; 22
     fce:	08 f0       	brcs	.+2      	; 0xfd2 <_ZN14SoftwareSerial5beginEl+0x40>
     fd0:	41 c0       	rjmp	.+130    	; 0x1054 <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     fd2:	b9 01       	movw	r22, r18
     fd4:	76 95       	lsr	r23
     fd6:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     fd8:	64 31       	cpi	r22, 0x14	; 20
     fda:	71 05       	cpc	r23, r1
     fdc:	18 f0       	brcs	.+6      	; 0xfe4 <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
     fde:	63 51       	subi	r22, 0x13	; 19
     fe0:	71 09       	sbc	r23, r1
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     fe8:	7f 8b       	std	Y+23, r23	; 0x17
     fea:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     fec:	36 97       	sbiw	r30, 0x06	; 6
     fee:	20 f0       	brcs	.+8      	; 0xff8 <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
     ff0:	b9 01       	movw	r22, r18
     ff2:	65 50       	subi	r22, 0x05	; 5
     ff4:	71 09       	sbc	r23, r1
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
     ff8:	61 e0       	ldi	r22, 0x01	; 1
     ffa:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     ffc:	79 8f       	std	Y+25, r23	; 0x19
     ffe:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1000:	b9 01       	movw	r22, r18
    1002:	66 0f       	add	r22, r22
    1004:	77 1f       	adc	r23, r23
    1006:	26 0f       	add	r18, r22
    1008:	37 1f       	adc	r19, r23
    100a:	36 95       	lsr	r19
    100c:	27 95       	ror	r18
    100e:	36 95       	lsr	r19
    1010:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1012:	2d 30       	cpi	r18, 0x0D	; 13
    1014:	31 05       	cpc	r19, r1
    1016:	10 f1       	brcs	.+68     	; 0x105c <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
    1018:	2c 50       	subi	r18, 0x0C	; 12
    101a:	31 09       	sbc	r19, r1
    101c:	21 c0       	rjmp	.+66     	; 0x1060 <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	8e 30       	cpi	r24, 0x0E	; 14
    1022:	08 f4       	brcc	.+2      	; 0x1026 <_ZN14SoftwareSerial5beginEl+0x94>
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	01 c0       	rjmp	.+2      	; 0x102c <_ZN14SoftwareSerial5beginEl+0x9a>
    102a:	88 0f       	add	r24, r24
    102c:	2a 95       	dec	r18
    102e:	ea f7       	brpl	.-6      	; 0x102a <_ZN14SoftwareSerial5beginEl+0x98>
    1030:	98 2b       	or	r25, r24
    1032:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1036:	9c 85       	ldd	r25, Y+12	; 0x0c
    1038:	98 30       	cpi	r25, 0x08	; 8
    103a:	d0 f0       	brcs	.+52     	; 0x1070 <_ZN14SoftwareSerial5beginEl+0xde>
    103c:	9e 30       	cpi	r25, 0x0E	; 14
    103e:	10 f1       	brcs	.+68     	; 0x1084 <_ZN14SoftwareSerial5beginEl+0xf2>
    1040:	96 31       	cpi	r25, 0x16	; 22
    1042:	58 f1       	brcs	.+86     	; 0x109a <_ZN14SoftwareSerial5beginEl+0x108>
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	2a c0       	rjmp	.+84     	; 0x109e <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    104a:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    104c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    104e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    1054:	ce 01       	movw	r24, r28
    1056:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <_ZN14SoftwareSerial6listenEv>
}
    105a:	2a c0       	rjmp	.+84     	; 0x10b0 <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    105c:	21 e0       	ldi	r18, 0x01	; 1
    105e:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1060:	3b 8f       	std	Y+27, r19	; 0x1b
    1062:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1064:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    1068:	88 30       	cpi	r24, 0x08	; 8
    106a:	c8 f6       	brcc	.-78     	; 0x101e <_ZN14SoftwareSerial5beginEl+0x8c>
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	e0 cf       	rjmp	.-64     	; 0x1030 <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1070:	2d e6       	ldi	r18, 0x6D	; 109
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	3c 8b       	std	Y+20, r19	; 0x14
    1076:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	01 c0       	rjmp	.+2      	; 0x107e <_ZN14SoftwareSerial5beginEl+0xec>
    107c:	88 0f       	add	r24, r24
    107e:	9a 95       	dec	r25
    1080:	ea f7       	brpl	.-6      	; 0x107c <_ZN14SoftwareSerial5beginEl+0xea>
    1082:	e3 cf       	rjmp	.-58     	; 0x104a <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1084:	2b e6       	ldi	r18, 0x6B	; 107
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	3c 8b       	std	Y+20, r19	; 0x14
    108a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    108c:	98 50       	subi	r25, 0x08	; 8
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <_ZN14SoftwareSerial5beginEl+0x102>
    1092:	88 0f       	add	r24, r24
    1094:	9a 95       	dec	r25
    1096:	ea f7       	brpl	.-6      	; 0x1092 <_ZN14SoftwareSerial5beginEl+0x100>
    1098:	d8 cf       	rjmp	.-80     	; 0x104a <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    109a:	2c e6       	ldi	r18, 0x6C	; 108
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3c 8b       	std	Y+20, r19	; 0x14
    10a0:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    10a2:	9e 50       	subi	r25, 0x0E	; 14
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <_ZN14SoftwareSerial5beginEl+0x118>
    10a8:	88 0f       	add	r24, r24
    10aa:	9a 95       	dec	r25
    10ac:	ea f7       	brpl	.-6      	; 0x10a8 <_ZN14SoftwareSerial5beginEl+0x116>
    10ae:	cd cf       	rjmp	.-102    	; 0x104a <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <_ZN25AuthorizationHandlerClassC1EP21GsmCommunicationClass>:
{
	GsmCommunication = NewCommunication;
} //AuthorizationHandlerClass

// default destructor
AuthorizationHandlerClass::~AuthorizationHandlerClass()
    10b6:	fc 01       	movw	r30, r24
    10b8:	71 83       	std	Z+1, r23	; 0x01
    10ba:	60 83       	st	Z, r22
    10bc:	08 95       	ret

000010be <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass>:
			Serial.write("Number DECLINED \n\n");
		}
	}
}

int AuthorizationHandlerClass::checkAuthorization(char *nrToCheck, ContactDirectoryClass *ContactDirectory){
    10be:	6f 92       	push	r6
    10c0:	7f 92       	push	r7
    10c2:	8f 92       	push	r8
    10c4:	9f 92       	push	r9
    10c6:	af 92       	push	r10
    10c8:	bf 92       	push	r11
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	c4 56       	subi	r28, 0x64	; 100
    10e0:	d1 09       	sbc	r29, r1
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	4b 01       	movw	r8, r22
    10ee:	7a 01       	movw	r14, r20
	char displayString[100] = {0};
    10f0:	fe 01       	movw	r30, r28
    10f2:	31 96       	adiw	r30, 0x01	; 1
    10f4:	84 e6       	ldi	r24, 0x64	; 100
    10f6:	df 01       	movw	r26, r30
    10f8:	1d 92       	st	X+, r1
    10fa:	8a 95       	dec	r24
    10fc:	e9 f7       	brne	.-6      	; 0x10f8 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x3a>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    10fe:	0a e6       	ldi	r16, 0x6A	; 106
    1100:	13 e0       	ldi	r17, 0x03	; 3
    1102:	d8 01       	movw	r26, r16
    1104:	ed 91       	ld	r30, X+
    1106:	fc 91       	ld	r31, X
    1108:	02 80       	ldd	r0, Z+2	; 0x02
    110a:	f3 81       	ldd	r31, Z+3	; 0x03
    110c:	e0 2d       	mov	r30, r0
    110e:	43 e1       	ldi	r20, 0x13	; 19
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	64 e4       	ldi	r22, 0x44	; 68
    1114:	71 e0       	ldi	r23, 0x01	; 1
    1116:	c8 01       	movw	r24, r16
    1118:	09 95       	icall
	
	Serial.write("CheckAuthorization\n");
	
	ContactClass *currentContact = ContactDirectory->head;
    111a:	f7 01       	movw	r30, r14
    111c:	e0 80       	ld	r14, Z
    111e:	f1 80       	ldd	r15, Z+1	; 0x01
    1120:	d8 01       	movw	r26, r16
    1122:	ed 91       	ld	r30, X+
    1124:	fc 91       	ld	r31, X
    1126:	02 80       	ldd	r0, Z+2	; 0x02
    1128:	f3 81       	ldd	r31, Z+3	; 0x03
    112a:	e0 2d       	mov	r30, r0
    112c:	4b e1       	ldi	r20, 0x1B	; 27
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	68 e5       	ldi	r22, 0x58	; 88
    1132:	71 e0       	ldi	r23, 0x01	; 1
    1134:	c8 01       	movw	r24, r16
    1136:	09 95       	icall
	int numberOfMatchingDigits = 0;
	
	// check temporary numbers
	Serial.write("phone numbers in Contacts:\n");
	while(currentContact != NULL){		// until end of list reached
    1138:	e1 14       	cp	r14, r1
    113a:	f1 04       	cpc	r15, r1
    113c:	09 f4       	brne	.+2      	; 0x1140 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x82>
    113e:	5e c0       	rjmp	.+188    	; 0x11fc <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x13e>
    1140:	00 e0       	ldi	r16, 0x00	; 0
    1142:	10 e0       	ldi	r17, 0x00	; 0
		sprintf(displayString,"phone number: %s		Name: %s \n", currentContact->phoneNumber, currentContact->Name);
    1144:	0f 2e       	mov	r0, r31
    1146:	f4 e7       	ldi	r31, 0x74	; 116
    1148:	af 2e       	mov	r10, r31
    114a:	f1 e0       	ldi	r31, 0x01	; 1
    114c:	bf 2e       	mov	r11, r31
    114e:	f0 2d       	mov	r31, r0
    1150:	fe 01       	movw	r30, r28
    1152:	31 96       	adiw	r30, 0x01	; 1
    1154:	6f 01       	movw	r12, r30
    1156:	0f 2e       	mov	r0, r31
    1158:	fa e6       	ldi	r31, 0x6A	; 106
    115a:	6f 2e       	mov	r6, r31
    115c:	f3 e0       	ldi	r31, 0x03	; 3
    115e:	7f 2e       	mov	r7, r31
    1160:	f0 2d       	mov	r31, r0
    1162:	ff 92       	push	r15
    1164:	ef 92       	push	r14
    1166:	c7 01       	movw	r24, r14
    1168:	c2 96       	adiw	r24, 0x32	; 50
    116a:	9f 93       	push	r25
    116c:	8f 93       	push	r24
    116e:	bf 92       	push	r11
    1170:	af 92       	push	r10
    1172:	df 92       	push	r13
    1174:	cf 92       	push	r12
    1176:	0e 94 65 10 	call	0x20ca	; 0x20ca <sprintf>
    117a:	f6 01       	movw	r30, r12
    117c:	01 90       	ld	r0, Z+
    117e:	00 20       	and	r0, r0
    1180:	e9 f7       	brne	.-6      	; 0x117c <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0xbe>
    1182:	31 97       	sbiw	r30, 0x01	; 1
    1184:	af 01       	movw	r20, r30
    1186:	4c 19       	sub	r20, r12
    1188:	5d 09       	sbc	r21, r13
    118a:	d3 01       	movw	r26, r6
    118c:	ed 91       	ld	r30, X+
    118e:	fc 91       	ld	r31, X
    1190:	02 80       	ldd	r0, Z+2	; 0x02
    1192:	f3 81       	ldd	r31, Z+3	; 0x03
    1194:	e0 2d       	mov	r30, r0
    1196:	b6 01       	movw	r22, r12
    1198:	c3 01       	movw	r24, r6
    119a:	09 95       	icall
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    119c:	bf ef       	ldi	r27, 0xFF	; 255
    119e:	e1 ee       	ldi	r30, 0xE1	; 225
    11a0:	f4 e0       	ldi	r31, 0x04	; 4
    11a2:	b1 50       	subi	r27, 0x01	; 1
    11a4:	e0 40       	sbci	r30, 0x00	; 0
    11a6:	f0 40       	sbci	r31, 0x00	; 0
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0xe4>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0xee>
    11ac:	00 00       	nop
		Serial.write(displayString);	// display current phone nr
		
		_delay_ms(100);		// for debug
		
		for(int u=0; nrToCheck[u] != '\0'; u++){
    11ae:	d4 01       	movw	r26, r8
    11b0:	8c 91       	ld	r24, X
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	de bf       	out	0x3e, r29	; 62
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	cd bf       	out	0x3d, r28	; 61
    11bc:	88 23       	and	r24, r24
    11be:	91 f0       	breq	.+36     	; 0x11e4 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x126>
    11c0:	11 96       	adiw	r26, 0x01	; 1
			if(nrToCheck[u] == currentContact->phoneNumber[numberOfMatchingDigits]){ // compare the single digits
    11c2:	f7 01       	movw	r30, r14
    11c4:	e0 0f       	add	r30, r16
    11c6:	f1 1f       	adc	r31, r17
    11c8:	92 a9       	ldd	r25, Z+50	; 0x32
    11ca:	98 13       	cpse	r25, r24
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x11c>
				numberOfMatchingDigits++;
    11ce:	0f 5f       	subi	r16, 0xFF	; 255
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
			}else{
				numberOfMatchingDigits = 0;
			}
			if(numberOfMatchingDigits >= MATCHING_DIGITS){	// return 1 if Number matches
    11d2:	09 30       	cpi	r16, 0x09	; 9
    11d4:	11 05       	cpc	r17, r1
    11d6:	1c f0       	brlt	.+6      	; 0x11de <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x120>
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x144>
		
		for(int u=0; nrToCheck[u] != '\0'; u++){
			if(nrToCheck[u] == currentContact->phoneNumber[numberOfMatchingDigits]){ // compare the single digits
				numberOfMatchingDigits++;
			}else{
				numberOfMatchingDigits = 0;
    11da:	00 e0       	ldi	r16, 0x00	; 0
    11dc:	10 e0       	ldi	r17, 0x00	; 0
		sprintf(displayString,"phone number: %s		Name: %s \n", currentContact->phoneNumber, currentContact->Name);
		Serial.write(displayString);	// display current phone nr
		
		_delay_ms(100);		// for debug
		
		for(int u=0; nrToCheck[u] != '\0'; u++){
    11de:	8d 91       	ld	r24, X+
    11e0:	81 11       	cpse	r24, r1
    11e2:	ef cf       	rjmp	.-34     	; 0x11c2 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x104>
			}
			if(numberOfMatchingDigits >= MATCHING_DIGITS){	// return 1 if Number matches
				return(1);
			}
		}
		currentContact = currentContact->next;	// rearch in next contact in the list
    11e4:	f7 01       	movw	r30, r14
    11e6:	ea 5b       	subi	r30, 0xBA	; 186
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	e0 80       	ld	r14, Z
    11ec:	f1 80       	ldd	r15, Z+1	; 0x01
	ContactClass *currentContact = ContactDirectory->head;
	int numberOfMatchingDigits = 0;
	
	// check temporary numbers
	Serial.write("phone numbers in Contacts:\n");
	while(currentContact != NULL){		// until end of list reached
    11ee:	e1 14       	cp	r14, r1
    11f0:	f1 04       	cpc	r15, r1
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x138>
    11f4:	b6 cf       	rjmp	.-148    	; 0x1162 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0xa4>
				return(1);
			}
		}
		currentContact = currentContact->next;	// rearch in next contact in the list
	}	
	return(0);		// return 0 if no matching phone number was detected
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	05 c0       	rjmp	.+10     	; 0x1206 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x148>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass+0x148>
				numberOfMatchingDigits++;
			}else{
				numberOfMatchingDigits = 0;
			}
			if(numberOfMatchingDigits >= MATCHING_DIGITS){	// return 1 if Number matches
				return(1);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		currentContact = currentContact->next;	// rearch in next contact in the list
	}	
	return(0);		// return 0 if no matching phone number was detected
}
    1206:	cc 59       	subi	r28, 0x9C	; 156
    1208:	df 4f       	sbci	r29, 0xFF	; 255
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	7f 90       	pop	r7
    122e:	6f 90       	pop	r6
    1230:	08 95       	ret

00001232 <_ZN25AuthorizationHandlerClass10answerCallEv>:

void AuthorizationHandlerClass::answerCall(){
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	ec 01       	movw	r28, r24
	
	// hang up incoming Call
	GsmCommunication->sendAtCmd("ATA");
    1238:	61 e9       	ldi	r22, 0x91	; 145
    123a:	71 e0       	ldi	r23, 0x01	; 1
    123c:	88 81       	ld	r24, Y
    123e:	99 81       	ldd	r25, Y+1	; 0x01
    1240:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN21GsmCommunicationClass9sendAtCmdEPc>
	GsmCommunication->readSerial();
    1244:	88 81       	ld	r24, Y
    1246:	99 81       	ldd	r25, Y+1	; 0x01
    1248:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN21GsmCommunicationClass10readSerialEv>
	GsmCommunication->sendAtCmd("AT+CVHU=0");
    124c:	65 e9       	ldi	r22, 0x95	; 149
    124e:	71 e0       	ldi	r23, 0x01	; 1
    1250:	88 81       	ld	r24, Y
    1252:	99 81       	ldd	r25, Y+1	; 0x01
    1254:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN21GsmCommunicationClass9sendAtCmdEPc>
	GsmCommunication->readSerial();
    1258:	88 81       	ld	r24, Y
    125a:	99 81       	ldd	r25, Y+1	; 0x01
    125c:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN21GsmCommunicationClass10readSerialEv>
	GsmCommunication->sendAtCmd("ATH");
    1260:	6f e9       	ldi	r22, 0x9F	; 159
    1262:	71 e0       	ldi	r23, 0x01	; 1
    1264:	88 81       	ld	r24, Y
    1266:	99 81       	ldd	r25, Y+1	; 0x01
    1268:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN21GsmCommunicationClass9sendAtCmdEPc>
	GsmCommunication->readSerial();
    126c:	88 81       	ld	r24, Y
    126e:	99 81       	ldd	r25, Y+1	; 0x01
    1270:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN21GsmCommunicationClass10readSerialEv>
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	08 95       	ret

0000127a <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_>:
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/

void AuthorizationHandlerClass::handleReceivedCall(ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass* ContactDirectoryPermanent){
    127a:	cf 92       	push	r12
    127c:	df 92       	push	r13
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	ec 01       	movw	r28, r24
    128c:	6b 01       	movw	r12, r22
    128e:	7a 01       	movw	r14, r20
	if(strstr(GsmCommunication->receiveBuffer, "RING") != NULL){ // if call received
    1290:	08 81       	ld	r16, Y
    1292:	19 81       	ldd	r17, Y+1	; 0x01
    1294:	63 ea       	ldi	r22, 0xA3	; 163
    1296:	71 e0       	ldi	r23, 0x01	; 1
    1298:	c8 01       	movw	r24, r16
    129a:	04 96       	adiw	r24, 0x04	; 4
    129c:	0e 94 4b 10 	call	0x2096	; 0x2096 <strstr>
    12a0:	89 2b       	or	r24, r25
    12a2:	e9 f1       	breq	.+122    	; 0x131e <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_+0xa4>
		// check phone Number from caller
		GsmCommunication->sendAtCmd((char*)"AT+CLCC");	
    12a4:	68 ea       	ldi	r22, 0xA8	; 168
    12a6:	71 e0       	ldi	r23, 0x01	; 1
    12a8:	c8 01       	movw	r24, r16
    12aa:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN21GsmCommunicationClass9sendAtCmdEPc>
		GsmCommunication->readSerial();
    12ae:	88 81       	ld	r24, Y
    12b0:	99 81       	ldd	r25, Y+1	; 0x01
    12b2:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN21GsmCommunicationClass10readSerialEv>
		if(checkAuthorization((char*)&GsmCommunication->receiveBuffer, ContactDirectoryTemporary) == 1		// check all contacts
    12b6:	68 81       	ld	r22, Y
    12b8:	79 81       	ldd	r23, Y+1	; 0x01
    12ba:	6c 5f       	subi	r22, 0xFC	; 252
    12bc:	7f 4f       	sbci	r23, 0xFF	; 255
    12be:	a6 01       	movw	r20, r12
    12c0:	ce 01       	movw	r24, r28
    12c2:	0e 94 5f 08 	call	0x10be	; 0x10be <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass>
		|| checkAuthorization((char*)&GsmCommunication->receiveBuffer, ContactDirectoryPermanent) == 1){
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	51 f0       	breq	.+20     	; 0x12de <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_+0x64>
    12ca:	68 81       	ld	r22, Y
    12cc:	79 81       	ldd	r23, Y+1	; 0x01
    12ce:	6c 5f       	subi	r22, 0xFC	; 252
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255
    12d2:	a7 01       	movw	r20, r14
    12d4:	ce 01       	movw	r24, r28
    12d6:	0e 94 5f 08 	call	0x10be	; 0x10be <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass>
void AuthorizationHandlerClass::handleReceivedCall(ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass* ContactDirectoryPermanent){
	if(strstr(GsmCommunication->receiveBuffer, "RING") != NULL){ // if call received
		// check phone Number from caller
		GsmCommunication->sendAtCmd((char*)"AT+CLCC");	
		GsmCommunication->readSerial();
		if(checkAuthorization((char*)&GsmCommunication->receiveBuffer, ContactDirectoryTemporary) == 1		// check all contacts
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	91 f4       	brne	.+36     	; 0x1302 <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_+0x88>
    12de:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    12e2:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    12e6:	02 80       	ldd	r0, Z+2	; 0x02
    12e8:	f3 81       	ldd	r31, Z+3	; 0x03
    12ea:	e0 2d       	mov	r30, r0
    12ec:	41 e2       	ldi	r20, 0x21	; 33
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	60 eb       	ldi	r22, 0xB0	; 176
    12f2:	71 e0       	ldi	r23, 0x01	; 1
    12f4:	8a e6       	ldi	r24, 0x6A	; 106
    12f6:	93 e0       	ldi	r25, 0x03	; 3
    12f8:	09 95       	icall
		|| checkAuthorization((char*)&GsmCommunication->receiveBuffer, ContactDirectoryPermanent) == 1){
			Serial.write("Number authorized -> OPEN LOCK \n\n");
			answerCall();		
    12fa:	ce 01       	movw	r24, r28
    12fc:	0e 94 19 09 	call	0x1232	; 0x1232 <_ZN25AuthorizationHandlerClass10answerCallEv>
    1300:	0e c0       	rjmp	.+28     	; 0x131e <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_+0xa4>
    1302:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    1306:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    130a:	02 80       	ldd	r0, Z+2	; 0x02
    130c:	f3 81       	ldd	r31, Z+3	; 0x03
    130e:	e0 2d       	mov	r30, r0
    1310:	42 e1       	ldi	r20, 0x12	; 18
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	62 ed       	ldi	r22, 0xD2	; 210
    1316:	71 e0       	ldi	r23, 0x01	; 1
    1318:	8a e6       	ldi	r24, 0x6A	; 106
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	09 95       	icall
			// open lock
		}else{
			Serial.write("Number DECLINED \n\n");
		}
	}
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	08 95       	ret

00001330 <_ZN12ContactClassC1EPcS0_>:
/* Class data declaration      */

/* Class procedure declaration */

// default constructor
ContactClass::ContactClass(char *NewName, char *NewphoneNumber)
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ec 01       	movw	r28, r24
    133a:	8a 01       	movw	r16, r20
{
	strcpy(Name, NewName);
    133c:	0e 94 44 10 	call	0x2088	; 0x2088 <strcpy>
	strcpy(phoneNumber,NewphoneNumber);
    1340:	b8 01       	movw	r22, r16
    1342:	ce 01       	movw	r24, r28
    1344:	c2 96       	adiw	r24, 0x32	; 50
    1346:	0e 94 44 10 	call	0x2088	; 0x2088 <strcpy>
} //ContactClass
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret

00001354 <_ZN21ContactDirectoryClassC1Ev>:
ContactDirectoryClass::ContactDirectoryClass()
{
} //ContactDirectoryClass

// default destructor
ContactDirectoryClass::~ContactDirectoryClass()
    1354:	fc 01       	movw	r30, r24
    1356:	11 82       	std	Z+1, r1	; 0x01
    1358:	10 82       	st	Z, r1
    135a:	13 82       	std	Z+3, r1	; 0x03
    135c:	12 82       	std	Z+2, r1	; 0x02
    135e:	08 95       	ret

00001360 <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass>:
		
		tempEeprom.eepromToContactDirectory(this);
	}
}

void ContactDirectoryClass::pushFront(ContactClass *newContact){
    1360:	fc 01       	movw	r30, r24
	if(head == NULL){
    1362:	20 81       	ld	r18, Z
    1364:	31 81       	ldd	r19, Z+1	; 0x01
    1366:	21 15       	cp	r18, r1
    1368:	31 05       	cpc	r19, r1
    136a:	19 f4       	brne	.+6      	; 0x1372 <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass+0x12>
		tail = newContact;
    136c:	73 83       	std	Z+3, r23	; 0x03
    136e:	62 83       	std	Z+2, r22	; 0x02
    1370:	05 c0       	rjmp	.+10     	; 0x137c <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass+0x1c>
	}else{
		head->prev = newContact;
    1372:	d9 01       	movw	r26, r18
    1374:	a8 5b       	subi	r26, 0xB8	; 184
    1376:	bf 4f       	sbci	r27, 0xFF	; 255
    1378:	6d 93       	st	X+, r22
    137a:	7c 93       	st	X, r23
	}
	newContact->next = head;
    137c:	80 81       	ld	r24, Z
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	db 01       	movw	r26, r22
    1382:	aa 5b       	subi	r26, 0xBA	; 186
    1384:	bf 4f       	sbci	r27, 0xFF	; 255
    1386:	8d 93       	st	X+, r24
    1388:	9c 93       	st	X, r25
	head = newContact;
    138a:	71 83       	std	Z+1, r23	; 0x01
    138c:	60 83       	st	Z, r22
	newContact->prev = NULL;
    138e:	fb 01       	movw	r30, r22
    1390:	e8 5b       	subi	r30, 0xB8	; 184
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	11 82       	std	Z+1, r1	; 0x01
    1396:	10 82       	st	Z, r1
    1398:	08 95       	ret

0000139a <_ZN21ContactDirectoryClass10addContactEPcS0_i>:
// default destructor
ContactDirectoryClass::~ContactDirectoryClass()
{
} //~ContactDirectoryClass

void ContactDirectoryClass::addContact(char *newName, char *newPhoneNr, int priority){
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x16>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	7c 01       	movw	r14, r24
    13b6:	6b 01       	movw	r12, r22
    13b8:	8a 01       	movw	r16, r20
	
	// add temporary data until power off
	if(priority == TEMPORARY){
    13ba:	21 30       	cpi	r18, 0x01	; 1
    13bc:	31 05       	cpc	r19, r1
    13be:	09 f0       	breq	.+2      	; 0x13c2 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x28>
    13c0:	40 c0       	rjmp	.+128    	; 0x1442 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xa8>
		ContactClass *newContact;		// pointer to new Contact
		newContact = new ContactClass(newName, newPhoneNr);	// new Contact
    13c2:	8a e4       	ldi	r24, 0x4A	; 74
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_Znwj>
    13ca:	5c 01       	movw	r10, r24
    13cc:	a8 01       	movw	r20, r16
    13ce:	b6 01       	movw	r22, r12
    13d0:	0e 94 98 09 	call	0x1330	; 0x1330 <_ZN12ContactClassC1EPcS0_>
		/*
		for(int i=0; i<10; i++){	// store 10 digits from phone Nr
		newContact->phoneNumber[i] = newPhoneNr[i];
		}
		*/
		pushFront(newContact);	// add to List
    13d4:	b5 01       	movw	r22, r10
    13d6:	c7 01       	movw	r24, r14
    13d8:	0e 94 b0 09 	call	0x1360	; 0x1360 <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass>
    13dc:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    13e0:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    13e4:	02 80       	ldd	r0, Z+2	; 0x02
    13e6:	f3 81       	ldd	r31, Z+3	; 0x03
    13e8:	e0 2d       	mov	r30, r0
    13ea:	49 e0       	ldi	r20, 0x09	; 9
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	65 ee       	ldi	r22, 0xE5	; 229
    13f0:	71 e0       	ldi	r23, 0x01	; 1
    13f2:	8a e6       	ldi	r24, 0x6A	; 106
    13f4:	93 e0       	ldi	r25, 0x03	; 3
    13f6:	09 95       	icall
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    13f8:	01 15       	cp	r16, r1
    13fa:	11 05       	cpc	r17, r1
    13fc:	99 f0       	breq	.+38     	; 0x1424 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x8a>
      return write((const uint8_t *)str, strlen(str));
    13fe:	f8 01       	movw	r30, r16
    1400:	01 90       	ld	r0, Z+
    1402:	00 20       	and	r0, r0
    1404:	e9 f7       	brne	.-6      	; 0x1400 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x66>
    1406:	31 97       	sbiw	r30, 0x01	; 1
    1408:	af 01       	movw	r20, r30
    140a:	40 1b       	sub	r20, r16
    140c:	51 0b       	sbc	r21, r17
    140e:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    1412:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    1416:	02 80       	ldd	r0, Z+2	; 0x02
    1418:	f3 81       	ldd	r31, Z+3	; 0x03
    141a:	e0 2d       	mov	r30, r0
    141c:	b8 01       	movw	r22, r16
    141e:	8a e6       	ldi	r24, 0x6A	; 106
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	09 95       	icall
    1424:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    1428:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    142c:	02 80       	ldd	r0, Z+2	; 0x02
    142e:	f3 81       	ldd	r31, Z+3	; 0x03
    1430:	e0 2d       	mov	r30, r0
    1432:	4f e0       	ldi	r20, 0x0F	; 15
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	6f ee       	ldi	r22, 0xEF	; 239
    1438:	71 e0       	ldi	r23, 0x01	; 1
    143a:	8a e6       	ldi	r24, 0x6A	; 106
    143c:	93 e0       	ldi	r25, 0x03	; 3
    143e:	09 95       	icall
    1440:	16 c0       	rjmp	.+44     	; 0x146e <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xd4>

	}
	
	// add to EEPROM
	
	if(priority == PERMANENT){
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	99 f4       	brne	.+38     	; 0x146e <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xd4>
		EepromClass tempEeprom;
    1448:	ce 01       	movw	r24, r28
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN11EepromClassC1Ev>
		tempEeprom.addContactToEeprom(newName, newPhoneNr);
    1450:	a8 01       	movw	r20, r16
    1452:	b6 01       	movw	r22, r12
    1454:	ce 01       	movw	r24, r28
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN11EepromClass18addContactToEepromEPcS0_>
		
		tempEeprom.eepromToContactDirectory(this);
    145c:	b7 01       	movw	r22, r14
    145e:	ce 01       	movw	r24, r28
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass>
	}
	
	// add to EEPROM
	
	if(priority == PERMANENT){
		EepromClass tempEeprom;
    1466:	ce 01       	movw	r24, r28
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	0e 94 45 0a 	call	0x148a	; 0x148a <_ZN11EepromClassD1Ev>
		tempEeprom.addContactToEeprom(newName, newPhoneNr);
		
		tempEeprom.eepromToContactDirectory(this);
	}
}
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	af 90       	pop	r10
    1486:	08 95       	ret

00001488 <_ZN11EepromClassC1Ev>:
/* Class data declaration      */

/* Class procedure declaration */

// default constructor
EepromClass::EepromClass()
    1488:	08 95       	ret

0000148a <_ZN11EepromClassD1Ev>:
{
} //EepromClass

// default destructor
EepromClass::~EepromClass()
    148a:	08 95       	ret

0000148c <_ZN11EepromClass16getEepromAddressEv>:
	Serial.write("Added...\"");
	Serial.write(newPhoneNr);
	Serial.write("\" to EEPROM \n\n");
}

int EepromClass::getEepromAddress(){
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	c0 e0       	ldi	r28, 0x00	; 0
    1492:	d0 e0       	ldi	r29, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1494:	ce 01       	movw	r24, r28
    1496:	0e 94 18 13 	call	0x2630	; 0x2630 <eeprom_read_byte>
	for(int address=0; address < EEPROM.length();address++){
		if(EEPROM.read(address)== 0){
    149a:	88 23       	and	r24, r24
    149c:	41 f0       	breq	.+16     	; 0x14ae <_ZN11EepromClass16getEepromAddressEv+0x22>
	Serial.write(newPhoneNr);
	Serial.write("\" to EEPROM \n\n");
}

int EepromClass::getEepromAddress(){
	for(int address=0; address < EEPROM.length();address++){
    149e:	21 96       	adiw	r28, 0x01	; 1
    14a0:	c1 15       	cp	r28, r1
    14a2:	84 e0       	ldi	r24, 0x04	; 4
    14a4:	d8 07       	cpc	r29, r24
    14a6:	b1 f7       	brne	.-20     	; 0x1494 <_ZN11EepromClass16getEepromAddressEv+0x8>
		if(EEPROM.read(address)== 0){
			return(address);
		}
	}
	return(EEPROM.length());
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	94 e0       	ldi	r25, 0x04	; 4
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <_ZN11EepromClass16getEepromAddressEv+0x26>
    14ae:	8c 2f       	mov	r24, r28
    14b0:	9d 2f       	mov	r25, r29
}
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	08 95       	ret

000014b8 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass>:
// default destructor
EepromClass::~EepromClass()
{
} //~EepromClass

void EepromClass::eepromToContactDirectory(ContactDirectoryClass *ContactDirectory){
    14b8:	2f 92       	push	r2
    14ba:	3f 92       	push	r3
    14bc:	4f 92       	push	r4
    14be:	5f 92       	push	r5
    14c0:	6f 92       	push	r6
    14c2:	7f 92       	push	r7
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	c6 54       	subi	r28, 0x46	; 70
    14e2:	d1 09       	sbc	r29, r1
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	3c 01       	movw	r6, r24
    14f0:	2b 01       	movw	r4, r22
	
	eepromAddress = getEepromAddress();
    14f2:	0e 94 46 0a 	call	0x148c	; 0x148c <_ZN11EepromClass16getEepromAddressEv>
    14f6:	d3 01       	movw	r26, r6
    14f8:	8d 93       	st	X+, r24
    14fa:	9c 93       	st	X, r25
	char tempNumber[PHONE_NR_SIZE]={0};
    14fc:	fe 01       	movw	r30, r28
    14fe:	31 96       	adiw	r30, 0x01	; 1
    1500:	24 e1       	ldi	r18, 0x14	; 20
    1502:	df 01       	movw	r26, r30
    1504:	1d 92       	st	X+, r1
    1506:	2a 95       	dec	r18
    1508:	e9 f7       	brne	.-6      	; 0x1504 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x4c>
	char tempName[NAME_SIZE]={0};
    150a:	74 96       	adiw	r30, 0x14	; 20
    150c:	22 e3       	ldi	r18, 0x32	; 50
    150e:	df 01       	movw	r26, r30
    1510:	1d 92       	st	X+, r1
    1512:	2a 95       	dec	r18
    1514:	e9 f7       	brne	.-6      	; 0x1510 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x58>
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
    1516:	18 16       	cp	r1, r24
    1518:	19 06       	cpc	r1, r25
    151a:	0c f0       	brlt	.+2      	; 0x151e <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x66>
    151c:	55 c0       	rjmp	.+170    	; 0x15c8 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x110>
    151e:	5f 01       	movw	r10, r30
    1520:	74 97       	sbiw	r30, 0x14	; 20
    1522:	7f 01       	movw	r14, r30
    1524:	00 e0       	ldi	r16, 0x00	; 0
    1526:	10 e0       	ldi	r17, 0x00	; 0
    1528:	81 2c       	mov	r8, r1
    152a:	91 2c       	mov	r9, r1
    152c:	c1 2c       	mov	r12, r1
    152e:	d1 2c       	mov	r13, r1
			}else{
				tempName[i] = '\0';			// end name string
				
				// add contact readed out of eeprom to contact
				ContactDirectory->addContact((char*)&tempName,(char*)&tempNumber,TEMPORARY);	
				state = 0;
    1530:	21 2c       	mov	r2, r1
    1532:	31 2c       	mov	r3, r1
    1534:	c8 01       	movw	r24, r16
    1536:	0e 94 18 13 	call	0x2630	; 0x2630 <eeprom_read_byte>
	char tempName[NAME_SIZE]={0};
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
		if(EEPROM.read(i) == ','){			// change state if number or name ended
    153a:	8c 32       	cpi	r24, 0x2C	; 44
    153c:	e1 f4       	brne	.+56     	; 0x1576 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xbe>
			v=0;
			if(state == 0){					// toggle between states
    153e:	89 28       	or	r8, r9
    1540:	41 f4       	brne	.+16     	; 0x1552 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x9a>
				tempNumber[i] = '\0';		// end number string
    1542:	d7 01       	movw	r26, r14
    1544:	1c 92       	st	X, r1
				state = 1;
    1546:	88 24       	eor	r8, r8
    1548:	83 94       	inc	r8
    154a:	91 2c       	mov	r9, r1
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
		if(EEPROM.read(i) == ','){			// change state if number or name ended
			v=0;
    154c:	c1 2c       	mov	r12, r1
    154e:	d1 2c       	mov	r13, r1
    1550:	2c c0       	rjmp	.+88     	; 0x15aa <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xf2>
			if(state == 0){					// toggle between states
				tempNumber[i] = '\0';		// end number string
				state = 1;
			}else{
				tempName[i] = '\0';			// end name string
    1552:	f5 01       	movw	r30, r10
    1554:	10 82       	st	Z, r1
				
				// add contact readed out of eeprom to contact
				ContactDirectory->addContact((char*)&tempName,(char*)&tempNumber,TEMPORARY);	
    1556:	21 e0       	ldi	r18, 0x01	; 1
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	ae 01       	movw	r20, r28
    155c:	4f 5f       	subi	r20, 0xFF	; 255
    155e:	5f 4f       	sbci	r21, 0xFF	; 255
    1560:	be 01       	movw	r22, r28
    1562:	6b 5e       	subi	r22, 0xEB	; 235
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	c2 01       	movw	r24, r4
    1568:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN21ContactDirectoryClass10addContactEPcS0_i>
				state = 0;
    156c:	82 2c       	mov	r8, r2
    156e:	93 2c       	mov	r9, r3
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
		if(EEPROM.read(i) == ','){			// change state if number or name ended
			v=0;
    1570:	c1 2c       	mov	r12, r1
    1572:	d1 2c       	mov	r13, r1
    1574:	1a c0       	rjmp	.+52     	; 0x15aa <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xf2>
				// add contact readed out of eeprom to contact
				ContactDirectory->addContact((char*)&tempName,(char*)&tempNumber,TEMPORARY);	
				state = 0;
			}
		}else{
			switch(state){
    1576:	81 14       	cp	r8, r1
    1578:	91 04       	cpc	r9, r1
    157a:	29 f0       	breq	.+10     	; 0x1586 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xce>
    157c:	f1 e0       	ldi	r31, 0x01	; 1
    157e:	8f 16       	cp	r8, r31
    1580:	91 04       	cpc	r9, r1
    1582:	49 f0       	breq	.+18     	; 0x1596 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xde>
    1584:	0f c0       	rjmp	.+30     	; 0x15a4 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xec>
				case 0:	// read number
					tempNumber[v]=EEPROM.read(i);						
    1586:	e1 e0       	ldi	r30, 0x01	; 1
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	ec 0f       	add	r30, r28
    158c:	fd 1f       	adc	r31, r29
    158e:	ec 0d       	add	r30, r12
    1590:	fd 1d       	adc	r31, r13
    1592:	80 83       	st	Z, r24
				break;
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xec>
		
				case 1: // read name
					tempName[v] = EEPROM.read(i);	
    1596:	e5 e1       	ldi	r30, 0x15	; 21
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	ec 0f       	add	r30, r28
    159c:	fd 1f       	adc	r31, r29
    159e:	ec 0d       	add	r30, r12
    15a0:	fd 1d       	adc	r31, r13
    15a2:	80 83       	st	Z, r24
				break;
			}
			v++;
    15a4:	8f ef       	ldi	r24, 0xFF	; 255
    15a6:	c8 1a       	sub	r12, r24
    15a8:	d8 0a       	sbc	r13, r24
	char tempNumber[PHONE_NR_SIZE]={0};
	char tempName[NAME_SIZE]={0};
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
    15aa:	0f 5f       	subi	r16, 0xFF	; 255
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	9f ef       	ldi	r25, 0xFF	; 255
    15b0:	a9 1a       	sub	r10, r25
    15b2:	b9 0a       	sbc	r11, r25
    15b4:	af ef       	ldi	r26, 0xFF	; 255
    15b6:	ea 1a       	sub	r14, r26
    15b8:	fa 0a       	sbc	r15, r26
    15ba:	f3 01       	movw	r30, r6
    15bc:	80 81       	ld	r24, Z
    15be:	91 81       	ldd	r25, Z+1	; 0x01
    15c0:	08 17       	cp	r16, r24
    15c2:	19 07       	cpc	r17, r25
    15c4:	0c f4       	brge	.+2      	; 0x15c8 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x110>
    15c6:	b6 cf       	rjmp	.-148    	; 0x1534 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x7c>
				break;
			}
			v++;
		}
	}
}
    15c8:	ca 5b       	subi	r28, 0xBA	; 186
    15ca:	df 4f       	sbci	r29, 0xFF	; 255
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	ef 90       	pop	r14
    15e2:	df 90       	pop	r13
    15e4:	cf 90       	pop	r12
    15e6:	bf 90       	pop	r11
    15e8:	af 90       	pop	r10
    15ea:	9f 90       	pop	r9
    15ec:	8f 90       	pop	r8
    15ee:	7f 90       	pop	r7
    15f0:	6f 90       	pop	r6
    15f2:	5f 90       	pop	r5
    15f4:	4f 90       	pop	r4
    15f6:	3f 90       	pop	r3
    15f8:	2f 90       	pop	r2
    15fa:	08 95       	ret

000015fc <_ZN11EepromClass18addContactToEepromEPcS0_>:

void EepromClass::addContactToEeprom(char *newName, char *newPhoneNr){
    15fc:	cf 92       	push	r12
    15fe:	df 92       	push	r13
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	ec 01       	movw	r28, r24
    160e:	8b 01       	movw	r16, r22
    1610:	7a 01       	movw	r14, r20
		
	eepromAddress = getEepromAddress();							// "Phone_Number0","Name0","Phone_Number1","Name1",...
    1612:	0e 94 46 0a 	call	0x148c	; 0x148c <_ZN11EepromClass16getEepromAddressEv>
    1616:	99 83       	std	Y+1, r25	; 0x01
    1618:	88 83       	st	Y, r24
	
	for(int i=0; newPhoneNr[i]!= NULL ; i++, eepromAddress++){	// until end of phone number is not reached
    161a:	f7 01       	movw	r30, r14
    161c:	60 81       	ld	r22, Z
    161e:	66 23       	and	r22, r22
    1620:	e9 f0       	breq	.+58     	; 0x165c <_ZN11EepromClass18addContactToEepromEPcS0_+0x60>
    1622:	67 01       	movw	r12, r14
    1624:	ff ef       	ldi	r31, 0xFF	; 255
    1626:	cf 1a       	sub	r12, r31
    1628:	df 0a       	sbc	r13, r31
		if(eepromAddress < (EEPROM.length())){					// error if eeprom full
    162a:	88 81       	ld	r24, Y
    162c:	99 81       	ldd	r25, Y+1	; 0x01
    162e:	81 15       	cp	r24, r1
    1630:	24 e0       	ldi	r18, 0x04	; 4
    1632:	92 07       	cpc	r25, r18
    1634:	18 f4       	brcc	.+6      	; 0x163c <_ZN11EepromClass18addContactToEepromEPcS0_+0x40>
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1636:	0e 94 20 13 	call	0x2640	; 0x2640 <eeprom_write_byte>
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <_ZN11EepromClass18addContactToEepromEPcS0_+0x4c>
			EEPROM.write(eepromAddress, newPhoneNr[i]);			// write phone number into eeprom
			}else{
			Serial.print("ERROR EEPROM is full");
    163c:	6f ef       	ldi	r22, 0xFF	; 255
    163e:	71 e0       	ldi	r23, 0x01	; 1
    1640:	8a e6       	ldi	r24, 0x6A	; 106
    1642:	93 e0       	ldi	r25, 0x03	; 3
    1644:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN5Print5printEPKc>

void EepromClass::addContactToEeprom(char *newName, char *newPhoneNr){
		
	eepromAddress = getEepromAddress();							// "Phone_Number0","Name0","Phone_Number1","Name1",...
	
	for(int i=0; newPhoneNr[i]!= NULL ; i++, eepromAddress++){	// until end of phone number is not reached
    1648:	88 81       	ld	r24, Y
    164a:	99 81       	ldd	r25, Y+1	; 0x01
    164c:	01 96       	adiw	r24, 0x01	; 1
    164e:	99 83       	std	Y+1, r25	; 0x01
    1650:	88 83       	st	Y, r24
    1652:	f6 01       	movw	r30, r12
    1654:	61 91       	ld	r22, Z+
    1656:	6f 01       	movw	r12, r30
    1658:	61 11       	cpse	r22, r1
    165a:	e7 cf       	rjmp	.-50     	; 0x162a <_ZN11EepromClass18addContactToEepromEPcS0_+0x2e>
    165c:	6c e2       	ldi	r22, 0x2C	; 44
    165e:	88 81       	ld	r24, Y
    1660:	99 81       	ldd	r25, Y+1	; 0x01
    1662:	0e 94 20 13 	call	0x2640	; 0x2640 <eeprom_write_byte>
			}else{
			Serial.print("ERROR EEPROM is full");
		}
	}
	EEPROM.write(eepromAddress, ',');							// write delimiter
	eepromAddress++;
    1666:	88 81       	ld	r24, Y
    1668:	99 81       	ldd	r25, Y+1	; 0x01
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	99 83       	std	Y+1, r25	; 0x01
    166e:	88 83       	st	Y, r24
	
	for(int i=0; newName[i] != NULL; i++, eepromAddress++){
    1670:	f8 01       	movw	r30, r16
    1672:	60 81       	ld	r22, Z
    1674:	66 23       	and	r22, r22
    1676:	d9 f0       	breq	.+54     	; 0x16ae <_ZN11EepromClass18addContactToEepromEPcS0_+0xb2>
    1678:	0f 5f       	subi	r16, 0xFF	; 255
    167a:	1f 4f       	sbci	r17, 0xFF	; 255
		if(eepromAddress < (EEPROM.length())){					// error if eeprom full
    167c:	88 81       	ld	r24, Y
    167e:	99 81       	ldd	r25, Y+1	; 0x01
    1680:	81 15       	cp	r24, r1
    1682:	f4 e0       	ldi	r31, 0x04	; 4
    1684:	9f 07       	cpc	r25, r31
    1686:	18 f4       	brcc	.+6      	; 0x168e <_ZN11EepromClass18addContactToEepromEPcS0_+0x92>
    1688:	0e 94 20 13 	call	0x2640	; 0x2640 <eeprom_write_byte>
    168c:	06 c0       	rjmp	.+12     	; 0x169a <_ZN11EepromClass18addContactToEepromEPcS0_+0x9e>
			EEPROM.write(eepromAddress, newName[i]);			// write Name into eeprom
			}else{
			Serial.print("ERROR EEPROM is full");
    168e:	6f ef       	ldi	r22, 0xFF	; 255
    1690:	71 e0       	ldi	r23, 0x01	; 1
    1692:	8a e6       	ldi	r24, 0x6A	; 106
    1694:	93 e0       	ldi	r25, 0x03	; 3
    1696:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN5Print5printEPKc>
		}
	}
	EEPROM.write(eepromAddress, ',');							// write delimiter
	eepromAddress++;
	
	for(int i=0; newName[i] != NULL; i++, eepromAddress++){
    169a:	88 81       	ld	r24, Y
    169c:	99 81       	ldd	r25, Y+1	; 0x01
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	99 83       	std	Y+1, r25	; 0x01
    16a2:	88 83       	st	Y, r24
    16a4:	f8 01       	movw	r30, r16
    16a6:	61 91       	ld	r22, Z+
    16a8:	8f 01       	movw	r16, r30
    16aa:	61 11       	cpse	r22, r1
    16ac:	e7 cf       	rjmp	.-50     	; 0x167c <_ZN11EepromClass18addContactToEepromEPcS0_+0x80>
    16ae:	6c e2       	ldi	r22, 0x2C	; 44
    16b0:	88 81       	ld	r24, Y
    16b2:	99 81       	ldd	r25, Y+1	; 0x01
    16b4:	0e 94 20 13 	call	0x2640	; 0x2640 <eeprom_write_byte>
    16b8:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    16bc:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    16c0:	02 80       	ldd	r0, Z+2	; 0x02
    16c2:	f3 81       	ldd	r31, Z+3	; 0x03
    16c4:	e0 2d       	mov	r30, r0
    16c6:	49 e0       	ldi	r20, 0x09	; 9
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	65 ee       	ldi	r22, 0xE5	; 229
    16cc:	71 e0       	ldi	r23, 0x01	; 1
    16ce:	8a e6       	ldi	r24, 0x6A	; 106
    16d0:	93 e0       	ldi	r25, 0x03	; 3
    16d2:	09 95       	icall
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    16d4:	e1 14       	cp	r14, r1
    16d6:	f1 04       	cpc	r15, r1
    16d8:	99 f0       	breq	.+38     	; 0x1700 <_ZN11EepromClass18addContactToEepromEPcS0_+0x104>
      return write((const uint8_t *)str, strlen(str));
    16da:	f7 01       	movw	r30, r14
    16dc:	01 90       	ld	r0, Z+
    16de:	00 20       	and	r0, r0
    16e0:	e9 f7       	brne	.-6      	; 0x16dc <_ZN11EepromClass18addContactToEepromEPcS0_+0xe0>
    16e2:	31 97       	sbiw	r30, 0x01	; 1
    16e4:	af 01       	movw	r20, r30
    16e6:	4e 19       	sub	r20, r14
    16e8:	5f 09       	sbc	r21, r15
    16ea:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    16ee:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    16f2:	02 80       	ldd	r0, Z+2	; 0x02
    16f4:	f3 81       	ldd	r31, Z+3	; 0x03
    16f6:	e0 2d       	mov	r30, r0
    16f8:	b7 01       	movw	r22, r14
    16fa:	8a e6       	ldi	r24, 0x6A	; 106
    16fc:	93 e0       	ldi	r25, 0x03	; 3
    16fe:	09 95       	icall
    1700:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    1704:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    1708:	02 80       	ldd	r0, Z+2	; 0x02
    170a:	f3 81       	ldd	r31, Z+3	; 0x03
    170c:	e0 2d       	mov	r30, r0
    170e:	4e e0       	ldi	r20, 0x0E	; 14
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	64 e1       	ldi	r22, 0x14	; 20
    1714:	72 e0       	ldi	r23, 0x02	; 2
    1716:	8a e6       	ldi	r24, 0x6A	; 106
    1718:	93 e0       	ldi	r25, 0x03	; 3
    171a:	09 95       	icall
	EEPROM.write(eepromAddress, ',');							// write delimiter
	
	Serial.write("Added...\"");
	Serial.write(newPhoneNr);
	Serial.write("\" to EEPROM \n\n");
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	df 90       	pop	r13
    172a:	cf 90       	pop	r12
    172c:	08 95       	ret

0000172e <_ZN11EepromClass11clearEepromEv>:
		}
	}
	return(EEPROM.length());
}

void EepromClass::clearEeprom(){
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	c0 e0       	ldi	r28, 0x00	; 0
    1734:	d0 e0       	ldi	r29, 0x00	; 0
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	ce 01       	movw	r24, r28
    173a:	0e 94 20 13 	call	0x2640	; 0x2640 <eeprom_write_byte>
	for (int i = 0 ; i < EEPROM.length() ; i++) {
    173e:	21 96       	adiw	r28, 0x01	; 1
    1740:	c1 15       	cp	r28, r1
    1742:	84 e0       	ldi	r24, 0x04	; 4
    1744:	d8 07       	cpc	r29, r24
    1746:	b9 f7       	brne	.-18     	; 0x1736 <_ZN11EepromClass11clearEepromEv+0x8>
    1748:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    174c:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    1750:	02 80       	ldd	r0, Z+2	; 0x02
    1752:	f3 81       	ldd	r31, Z+3	; 0x03
    1754:	e0 2d       	mov	r30, r0
    1756:	40 e1       	ldi	r20, 0x10	; 16
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	63 e2       	ldi	r22, 0x23	; 35
    175c:	72 e0       	ldi	r23, 0x02	; 2
    175e:	8a e6       	ldi	r24, 0x6A	; 106
    1760:	93 e0       	ldi	r25, 0x03	; 3
    1762:	09 95       	icall
		EEPROM.write(i, 0);
	}
	Serial.write("EEPROM cleared\n\n");	
}
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <_ZN21GsmCommunicationClass13displayStringEPc>:
		}
		Serial.print("\n");
	}
}

void GsmCommunicationClass::checkReceivedData(){
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	61 15       	cp	r22, r1
    1770:	71 05       	cpc	r23, r1
    1772:	91 f0       	breq	.+36     	; 0x1798 <_ZN21GsmCommunicationClass13displayStringEPc+0x2e>
    1774:	eb 01       	movw	r28, r22
    1776:	68 81       	ld	r22, Y
    1778:	66 23       	and	r22, r22
    177a:	41 f0       	breq	.+16     	; 0x178c <_ZN21GsmCommunicationClass13displayStringEPc+0x22>
    177c:	21 96       	adiw	r28, 0x01	; 1
    177e:	8a e6       	ldi	r24, 0x6A	; 106
    1780:	93 e0       	ldi	r25, 0x03	; 3
    1782:	0e 94 20 03 	call	0x640	; 0x640 <_ZN5Print5printEc>
    1786:	69 91       	ld	r22, Y+
    1788:	61 11       	cpse	r22, r1
    178a:	f9 cf       	rjmp	.-14     	; 0x177e <_ZN21GsmCommunicationClass13displayStringEPc+0x14>
    178c:	6b ed       	ldi	r22, 0xDB	; 219
    178e:	72 e0       	ldi	r23, 0x02	; 2
    1790:	8a e6       	ldi	r24, 0x6A	; 106
    1792:	93 e0       	ldi	r25, 0x03	; 3
    1794:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN5Print5printEPKc>
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret

0000179e <_ZN21GsmCommunicationClass10readSerialEv>:
    179e:	ef 92       	push	r14
    17a0:	ff 92       	push	r15
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	ec 01       	movw	r28, r24
    17ac:	2f ef       	ldi	r18, 0xFF	; 255
    17ae:	89 e6       	ldi	r24, 0x69	; 105
    17b0:	98 e1       	ldi	r25, 0x18	; 24
    17b2:	21 50       	subi	r18, 0x01	; 1
    17b4:	80 40       	sbci	r24, 0x00	; 0
    17b6:	90 40       	sbci	r25, 0x00	; 0
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <_ZN21GsmCommunicationClass10readSerialEv+0x14>
    17ba:	00 c0       	rjmp	.+0      	; 0x17bc <_ZN21GsmCommunicationClass10readSerialEv+0x1e>
    17bc:	00 00       	nop
    17be:	7e 01       	movw	r14, r28
    17c0:	a4 e0       	ldi	r26, 0x04	; 4
    17c2:	ea 0e       	add	r14, r26
    17c4:	f1 1c       	adc	r15, r1
    17c6:	ce 01       	movw	r24, r28
    17c8:	8c 5f       	subi	r24, 0xFC	; 252
    17ca:	9e 4f       	sbci	r25, 0xFE	; 254
    17cc:	f7 01       	movw	r30, r14
    17ce:	11 92       	st	Z+, r1
    17d0:	e8 17       	cp	r30, r24
    17d2:	f9 07       	cpc	r31, r25
    17d4:	e1 f7       	brne	.-8      	; 0x17ce <_ZN21GsmCommunicationClass10readSerialEv+0x30>
    17d6:	00 e0       	ldi	r16, 0x00	; 0
    17d8:	10 e0       	ldi	r17, 0x00	; 0
    17da:	88 81       	ld	r24, Y
    17dc:	99 81       	ldd	r25, Y+1	; 0x01
    17de:	dc 01       	movw	r26, r24
    17e0:	ed 91       	ld	r30, X+
    17e2:	fc 91       	ld	r31, X
    17e4:	00 84       	ldd	r0, Z+8	; 0x08
    17e6:	f1 85       	ldd	r31, Z+9	; 0x09
    17e8:	e0 2d       	mov	r30, r0
    17ea:	09 95       	icall
    17ec:	89 2b       	or	r24, r25
    17ee:	79 f0       	breq	.+30     	; 0x180e <_ZN21GsmCommunicationClass10readSerialEv+0x70>
    17f0:	88 81       	ld	r24, Y
    17f2:	99 81       	ldd	r25, Y+1	; 0x01
    17f4:	dc 01       	movw	r26, r24
    17f6:	ed 91       	ld	r30, X+
    17f8:	fc 91       	ld	r31, X
    17fa:	02 84       	ldd	r0, Z+10	; 0x0a
    17fc:	f3 85       	ldd	r31, Z+11	; 0x0b
    17fe:	e0 2d       	mov	r30, r0
    1800:	09 95       	icall
    1802:	f7 01       	movw	r30, r14
    1804:	81 93       	st	Z+, r24
    1806:	7f 01       	movw	r14, r30
    1808:	0f 5f       	subi	r16, 0xFF	; 255
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	e6 cf       	rjmp	.-52     	; 0x17da <_ZN21GsmCommunicationClass10readSerialEv+0x3c>
    180e:	fe 01       	movw	r30, r28
    1810:	e0 0f       	add	r30, r16
    1812:	f1 1f       	adc	r31, r17
    1814:	14 82       	std	Z+4, r1	; 0x04
    1816:	be 01       	movw	r22, r28
    1818:	6c 5f       	subi	r22, 0xFC	; 252
    181a:	7f 4f       	sbci	r23, 0xFF	; 255
    181c:	ce 01       	movw	r24, r28
    181e:	0e 94 b5 0b 	call	0x176a	; 0x176a <_ZN21GsmCommunicationClass13displayStringEPc>
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	08 95       	ret

00001830 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial>:
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	ec 01       	movw	r28, r24
    1836:	fc 01       	movw	r30, r24
    1838:	ec 5f       	subi	r30, 0xFC	; 252
    183a:	fe 4f       	sbci	r31, 0xFE	; 254
    183c:	10 82       	st	Z, r1
    183e:	31 96       	adiw	r30, 0x01	; 1
    1840:	10 82       	st	Z, r1
    1842:	31 96       	adiw	r30, 0x01	; 1
    1844:	10 82       	st	Z, r1
    1846:	79 83       	std	Y+1, r23	; 0x01
    1848:	68 83       	st	Y, r22
    184a:	26 e0       	ldi	r18, 0x06	; 6
    184c:	40 e8       	ldi	r20, 0x80	; 128
    184e:	55 e2       	ldi	r21, 0x25	; 37
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	8a e6       	ldi	r24, 0x6A	; 106
    1856:	93 e0       	ldi	r25, 0x03	; 3
    1858:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial5beginEmh>
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	55 e2       	ldi	r21, 0x25	; 37
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	88 81       	ld	r24, Y
    1866:	99 81       	ldd	r25, Y+1	; 0x01
    1868:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN14SoftwareSerial5beginEl>
    186c:	2f ef       	ldi	r18, 0xFF	; 255
    186e:	83 ed       	ldi	r24, 0xD3	; 211
    1870:	90 e3       	ldi	r25, 0x30	; 48
    1872:	21 50       	subi	r18, 0x01	; 1
    1874:	80 40       	sbci	r24, 0x00	; 0
    1876:	90 40       	sbci	r25, 0x00	; 0
    1878:	e1 f7       	brne	.-8      	; 0x1872 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x42>
    187a:	00 c0       	rjmp	.+0      	; 0x187c <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x4c>
    187c:	00 00       	nop
    187e:	64 e3       	ldi	r22, 0x34	; 52
    1880:	72 e0       	ldi	r23, 0x02	; 2
    1882:	88 81       	ld	r24, Y
    1884:	99 81       	ldd	r25, Y+1	; 0x01
    1886:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
    188a:	ce 01       	movw	r24, r28
    188c:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN21GsmCommunicationClass10readSerialEv>
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <_ZN21GsmCommunicationClass12setUpSmsModeEv>:



	

void GsmCommunicationClass::setUpSmsMode(){
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	ec 01       	movw	r28, r24
	GsmSerial->println("AT+CMGF=1");	// Configure TEXT mode
    18a0:	67 e3       	ldi	r22, 0x37	; 55
    18a2:	72 e0       	ldi	r23, 0x02	; 2
    18a4:	88 81       	ld	r24, Y
    18a6:	99 81       	ldd	r25, Y+1	; 0x01
    18a8:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
	readSerial();
    18ac:	ce 01       	movw	r24, r28
    18ae:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN21GsmCommunicationClass10readSerialEv>
	
	GsmSerial->println("AT+CNMI=1,2,0,0,0");	// define how newly arrived SMS Msg. should be handled
    18b2:	61 e4       	ldi	r22, 0x41	; 65
    18b4:	72 e0       	ldi	r23, 0x02	; 2
    18b6:	88 81       	ld	r24, Y
    18b8:	99 81       	ldd	r25, Y+1	; 0x01
    18ba:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
	readSerial();
    18be:	ce 01       	movw	r24, r28
    18c0:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN21GsmCommunicationClass10readSerialEv>
	// check Answer
	if(strstr(receiveBuffer, "OK") != NULL){ // check if configured
    18c4:	8e 01       	movw	r16, r28
    18c6:	0c 5f       	subi	r16, 0xFC	; 252
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	63 e5       	ldi	r22, 0x53	; 83
    18cc:	72 e0       	ldi	r23, 0x02	; 2
    18ce:	c8 01       	movw	r24, r16
    18d0:	0e 94 4b 10 	call	0x2096	; 0x2096 <strstr>
    18d4:	89 2b       	or	r24, r25
    18d6:	b1 f0       	breq	.+44     	; 0x1904 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0x6e>
    18d8:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    18dc:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    18e0:	02 80       	ldd	r0, Z+2	; 0x02
    18e2:	f3 81       	ldd	r31, Z+3	; 0x03
    18e4:	e0 2d       	mov	r30, r0
    18e6:	48 e1       	ldi	r20, 0x18	; 24
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	66 e5       	ldi	r22, 0x56	; 86
    18ec:	72 e0       	ldi	r23, 0x02	; 2
    18ee:	8a e6       	ldi	r24, 0x6A	; 106
    18f0:	93 e0       	ldi	r25, 0x03	; 3
    18f2:	09 95       	icall
		Serial.write("SMS Mode is configured\n\n");
		gsmIsConnectedOld = gsmIsConnected;
    18f4:	fe 01       	movw	r30, r28
    18f6:	eb 5f       	subi	r30, 0xFB	; 251
    18f8:	fe 4f       	sbci	r31, 0xFE	; 254
    18fa:	cc 5f       	subi	r28, 0xFC	; 252
    18fc:	de 4f       	sbci	r29, 0xFE	; 254
    18fe:	88 81       	ld	r24, Y
    1900:	80 83       	st	Z, r24
    1902:	24 c0       	rjmp	.+72     	; 0x194c <_ZN21GsmCommunicationClass12setUpSmsModeEv+0xb6>
	}else if(strstr(receiveBuffer, "ERROR")){
    1904:	6f e6       	ldi	r22, 0x6F	; 111
    1906:	72 e0       	ldi	r23, 0x02	; 2
    1908:	c8 01       	movw	r24, r16
    190a:	0e 94 4b 10 	call	0x2096	; 0x2096 <strstr>
    190e:	89 2b       	or	r24, r25
    1910:	79 f0       	breq	.+30     	; 0x1930 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0x9a>
    1912:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    1916:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    191a:	02 80       	ldd	r0, Z+2	; 0x02
    191c:	f3 81       	ldd	r31, Z+3	; 0x03
    191e:	e0 2d       	mov	r30, r0
    1920:	40 e2       	ldi	r20, 0x20	; 32
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	65 e7       	ldi	r22, 0x75	; 117
    1926:	72 e0       	ldi	r23, 0x02	; 2
    1928:	8a e6       	ldi	r24, 0x6A	; 106
    192a:	93 e0       	ldi	r25, 0x03	; 3
    192c:	09 95       	icall
    192e:	0e c0       	rjmp	.+28     	; 0x194c <_ZN21GsmCommunicationClass12setUpSmsModeEv+0xb6>
    1930:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    1934:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    1938:	02 80       	ldd	r0, Z+2	; 0x02
    193a:	f3 81       	ldd	r31, Z+3	; 0x03
    193c:	e0 2d       	mov	r30, r0
    193e:	41 e2       	ldi	r20, 0x21	; 33
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	66 e9       	ldi	r22, 0x96	; 150
    1944:	72 e0       	ldi	r23, 0x02	; 2
    1946:	8a e6       	ldi	r24, 0x6A	; 106
    1948:	93 e0       	ldi	r25, 0x03	; 3
    194a:	09 95       	icall
		Serial.write("ERROR in SMS mode configuration\n");
	}else{
		Serial.write("No response in SMS configuration\n");
	}
}
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret

00001956 <_ZN21GsmCommunicationClass15checkConnectionEv>:
/*                                                                           */
/*  History     : 23.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void GsmCommunicationClass::checkConnection()
{	
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
	if(checkConnectionTime > 10){	// check connection loop rate
    195e:	dc 01       	movw	r26, r24
    1960:	12 96       	adiw	r26, 0x02	; 2
    1962:	2d 91       	ld	r18, X+
    1964:	3c 91       	ld	r19, X
    1966:	13 97       	sbiw	r26, 0x03	; 3
    1968:	2b 30       	cpi	r18, 0x0B	; 11
    196a:	31 05       	cpc	r19, r1
    196c:	0c f4       	brge	.+2      	; 0x1970 <_ZN21GsmCommunicationClass15checkConnectionEv+0x1a>
    196e:	4c c0       	rjmp	.+152    	; 0x1a08 <_ZN21GsmCommunicationClass15checkConnectionEv+0xb2>
    1970:	ec 01       	movw	r28, r24
		checkConnectionTime = 0;
    1972:	1b 82       	std	Y+3, r1	; 0x03
    1974:	1a 82       	std	Y+2, r1	; 0x02
	if (GsmSerial->available()==0){
    1976:	88 81       	ld	r24, Y
    1978:	99 81       	ldd	r25, Y+1	; 0x01
    197a:	dc 01       	movw	r26, r24
    197c:	ed 91       	ld	r30, X+
    197e:	fc 91       	ld	r31, X
    1980:	00 84       	ldd	r0, Z+8	; 0x08
    1982:	f1 85       	ldd	r31, Z+9	; 0x09
    1984:	e0 2d       	mov	r30, r0
    1986:	09 95       	icall
    1988:	89 2b       	or	r24, r25
    198a:	31 f4       	brne	.+12     	; 0x1998 <_ZN21GsmCommunicationClass15checkConnectionEv+0x42>
		GsmSerial->println("AT+CREG?");		// ask if connected to cellular Network
    198c:	68 eb       	ldi	r22, 0xB8	; 184
    198e:	72 e0       	ldi	r23, 0x02	; 2
    1990:	88 81       	ld	r24, Y
    1992:	99 81       	ldd	r25, Y+1	; 0x01
    1994:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
	}
	readSerial();		// read Answer
    1998:	ce 01       	movw	r24, r28
    199a:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN21GsmCommunicationClass10readSerialEv>
	
	if(strstr(receiveBuffer, "+CREG: 0,1") != NULL){ // check if connection was successful
    199e:	61 ec       	ldi	r22, 0xC1	; 193
    19a0:	72 e0       	ldi	r23, 0x02	; 2
    19a2:	ce 01       	movw	r24, r28
    19a4:	04 96       	adiw	r24, 0x04	; 4
    19a6:	0e 94 4b 10 	call	0x2096	; 0x2096 <strstr>
    19aa:	89 2b       	or	r24, r25
    19ac:	49 f1       	breq	.+82     	; 0x1a00 <_ZN21GsmCommunicationClass15checkConnectionEv+0xaa>
		gsmIsConnected = true;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	8e 01       	movw	r16, r28
    19b2:	0c 5f       	subi	r16, 0xFC	; 252
    19b4:	1e 4f       	sbci	r17, 0xFE	; 254
    19b6:	f8 01       	movw	r30, r16
    19b8:	80 83       	st	Z, r24
    19ba:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    19be:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    19c2:	02 80       	ldd	r0, Z+2	; 0x02
    19c4:	f3 81       	ldd	r31, Z+3	; 0x03
    19c6:	e0 2d       	mov	r30, r0
    19c8:	40 e1       	ldi	r20, 0x10	; 16
    19ca:	50 e0       	ldi	r21, 0x00	; 0
    19cc:	6c ec       	ldi	r22, 0xCC	; 204
    19ce:	72 e0       	ldi	r23, 0x02	; 2
    19d0:	8a e6       	ldi	r24, 0x6A	; 106
    19d2:	93 e0       	ldi	r25, 0x03	; 3
    19d4:	09 95       	icall
		Serial.write("GSM Connected\n\n\n");
		if(gsmIsConnected == true && gsmIsConnectedOld == false){
    19d6:	d8 01       	movw	r26, r16
    19d8:	8c 91       	ld	r24, X
    19da:	88 23       	and	r24, r24
    19dc:	49 f0       	breq	.+18     	; 0x19f0 <_ZN21GsmCommunicationClass15checkConnectionEv+0x9a>
    19de:	fe 01       	movw	r30, r28
    19e0:	eb 5f       	subi	r30, 0xFB	; 251
    19e2:	fe 4f       	sbci	r31, 0xFE	; 254
    19e4:	80 81       	ld	r24, Z
    19e6:	81 11       	cpse	r24, r1
    19e8:	03 c0       	rjmp	.+6      	; 0x19f0 <_ZN21GsmCommunicationClass15checkConnectionEv+0x9a>
			setUpSmsMode();		// set up Sms Mode if connected
    19ea:	ce 01       	movw	r24, r28
    19ec:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN21GsmCommunicationClass12setUpSmsModeEv>
		}
		gsmIsConnectedOld = gsmIsConnected;
    19f0:	fe 01       	movw	r30, r28
    19f2:	eb 5f       	subi	r30, 0xFB	; 251
    19f4:	fe 4f       	sbci	r31, 0xFE	; 254
    19f6:	cc 5f       	subi	r28, 0xFC	; 252
    19f8:	de 4f       	sbci	r29, 0xFE	; 254
    19fa:	88 81       	ld	r24, Y
    19fc:	80 83       	st	Z, r24
    19fe:	09 c0       	rjmp	.+18     	; 0x1a12 <_ZN21GsmCommunicationClass15checkConnectionEv+0xbc>
		}else{
		gsmIsConnected = false;
    1a00:	cc 5f       	subi	r28, 0xFC	; 252
    1a02:	de 4f       	sbci	r29, 0xFE	; 254
    1a04:	18 82       	st	Y, r1
    1a06:	05 c0       	rjmp	.+10     	; 0x1a12 <_ZN21GsmCommunicationClass15checkConnectionEv+0xbc>
	}
	}else{
		checkConnectionTime++;
    1a08:	2f 5f       	subi	r18, 0xFF	; 255
    1a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	33 83       	std	Z+3, r19	; 0x03
    1a10:	22 83       	std	Z+2, r18	; 0x02
	}
}
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	08 95       	ret

00001a1c <_ZN21GsmCommunicationClass9sendAtCmdEPc>:
	}
}


void GsmCommunicationClass::sendAtCmd(char atCmd[256]){
	GsmSerial->println(atCmd);
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>
    1a26:	08 95       	ret

00001a28 <_ZN13GpioPortClassC1EPh>:
		   ShadowLedRegister  &= ~Mask; 
	   }
	   
	   *LedBase = ShadowLedRegister;
	}
   }
    1a28:	fc 01       	movw	r30, r24
    1a2a:	12 82       	std	Z+2, r1	; 0x02
    1a2c:	11 82       	std	Z+1, r1	; 0x01
    1a2e:	74 83       	std	Z+4, r23	; 0x04
    1a30:	63 83       	std	Z+3, r22	; 0x03
    1a32:	15 82       	std	Z+5, r1	; 0x05
    1a34:	16 82       	std	Z+6, r1	; 0x06
    1a36:	17 82       	std	Z+7, r1	; 0x07
    1a38:	10 86       	std	Z+8, r1	; 0x08
    1a3a:	25 9a       	sbi	0x04, 5	; 4
    1a3c:	2d 98       	cbi	0x05, 5	; 5
    1a3e:	20 9a       	sbi	0x04, 0	; 4
    1a40:	28 98       	cbi	0x05, 0	; 5
    1a42:	55 9a       	sbi	0x0a, 5	; 10
    1a44:	5d 98       	cbi	0x0b, 5	; 11
    1a46:	08 95       	ret

00001a48 <_ZN13GpioPortClass9ToggleLedEi>:

void GpioPortClass::ToggleLed(int LedNumber)
{
    1a48:	fc 01       	movw	r30, r24
	if(toggleTime > 15){
    1a4a:	81 81       	ldd	r24, Z+1	; 0x01
    1a4c:	92 81       	ldd	r25, Z+2	; 0x02
    1a4e:	80 31       	cpi	r24, 0x10	; 16
    1a50:	91 05       	cpc	r25, r1
    1a52:	0c f1       	brlt	.+66     	; 0x1a96 <_ZN13GpioPortClass9ToggleLedEi+0x4e>
		toggleTime = 0;
    1a54:	12 82       	std	Z+2, r1	; 0x02
    1a56:	11 82       	std	Z+1, r1	; 0x01
	if ((LedNumber >= 0) && (LedNumber <= MAX_LED-1)) {
    1a58:	68 30       	cpi	r22, 0x08	; 8
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	f8 f4       	brcc	.+62     	; 0x1a9c <_ZN13GpioPortClass9ToggleLedEi+0x54>

	   /* Find correct bitposition */
		unsigned long  Mask = 1 << (LedNumber);

	   /* and clear or set bit according to State */
		ShadowLedRegister ^= Mask;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <_ZN13GpioPortClass9ToggleLedEi+0x20>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	6a 95       	dec	r22
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <_ZN13GpioPortClass9ToggleLedEi+0x1c>
    1a6c:	09 2e       	mov	r0, r25
    1a6e:	00 0c       	add	r0, r0
    1a70:	aa 0b       	sbc	r26, r26
    1a72:	bb 0b       	sbc	r27, r27
    1a74:	45 81       	ldd	r20, Z+5	; 0x05
    1a76:	56 81       	ldd	r21, Z+6	; 0x06
    1a78:	67 81       	ldd	r22, Z+7	; 0x07
    1a7a:	70 85       	ldd	r23, Z+8	; 0x08
    1a7c:	84 27       	eor	r24, r20
    1a7e:	95 27       	eor	r25, r21
    1a80:	a6 27       	eor	r26, r22
    1a82:	b7 27       	eor	r27, r23
    1a84:	85 83       	std	Z+5, r24	; 0x05
    1a86:	96 83       	std	Z+6, r25	; 0x06
    1a88:	a7 83       	std	Z+7, r26	; 0x07
    1a8a:	b0 87       	std	Z+8, r27	; 0x08
	   
	   *LedBase = ShadowLedRegister;
    1a8c:	03 80       	ldd	r0, Z+3	; 0x03
    1a8e:	f4 81       	ldd	r31, Z+4	; 0x04
    1a90:	e0 2d       	mov	r30, r0
    1a92:	80 83       	st	Z, r24
    1a94:	08 95       	ret
	}
	}else{
		toggleTime++;
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	92 83       	std	Z+2, r25	; 0x02
    1a9a:	81 83       	std	Z+1, r24	; 0x01
    1a9c:	08 95       	ret

00001a9e <main_ArduinoLockOpener>:
#include "EepromClass.h"



// the loop function runs over and over again forever
void main_ArduinoLockOpener() {
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	cc 55       	subi	r28, 0x5C	; 92
    1aa8:	d2 40       	sbci	r29, 0x02	; 2
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
	
	SoftwareSerial GsmSerial(RX, TX); // RX TX
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	42 e0       	ldi	r20, 0x02	; 2
    1ab8:	63 e0       	ldi	r22, 0x03	; 3
    1aba:	ce 01       	movw	r24, r28
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	0e 94 9d 07 	call	0xf3a	; 0xf3a <_ZN14SoftwareSerialC1Ehhb>
	
	GsmCommunicationClass GsmCommunication(&GsmSerial);
    1ac2:	be 01       	movw	r22, r28
    1ac4:	6f 5f       	subi	r22, 0xFF	; 255
    1ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac8:	ce 01       	movw	r24, r28
    1aca:	80 96       	adiw	r24, 0x20	; 32
    1acc:	0e 94 18 0c 	call	0x1830	; 0x1830 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial>
	AuthorizationHandlerClass AuthorizationHandler(&GsmCommunication);
    1ad0:	be 01       	movw	r22, r28
    1ad2:	60 5e       	subi	r22, 0xE0	; 224
    1ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	89 5d       	subi	r24, 0xD9	; 217
    1ada:	9e 4f       	sbci	r25, 0xFE	; 254
    1adc:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_ZN25AuthorizationHandlerClassC1EP21GsmCommunicationClass>
	SmsHandlerClass SmsHandler(&GsmCommunication,&AuthorizationHandler);
    1ae0:	ae 01       	movw	r20, r28
    1ae2:	49 5d       	subi	r20, 0xD9	; 217
    1ae4:	5e 4f       	sbci	r21, 0xFE	; 254
    1ae6:	be 01       	movw	r22, r28
    1ae8:	60 5e       	subi	r22, 0xE0	; 224
    1aea:	7f 4f       	sbci	r23, 0xFF	; 255
    1aec:	ce 01       	movw	r24, r28
    1aee:	87 5d       	subi	r24, 0xD7	; 215
    1af0:	9e 4f       	sbci	r25, 0xFE	; 254
    1af2:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>
	
	ContactDirectoryClass ContactDirectoryTemporary;
    1af6:	ce 01       	movw	r24, r28
    1af8:	8f 5b       	subi	r24, 0xBF	; 191
    1afa:	9d 4f       	sbci	r25, 0xFD	; 253
    1afc:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN21ContactDirectoryClassC1Ev>
	ContactDirectoryClass ContactDirectoryPermanent;
    1b00:	ce 01       	movw	r24, r28
    1b02:	8b 5b       	subi	r24, 0xBB	; 187
    1b04:	9d 4f       	sbci	r25, 0xFD	; 253
    1b06:	0e 94 aa 09 	call	0x1354	; 0x1354 <_ZN21ContactDirectoryClassC1Ev>
	
	EepromClass Eeprom1;
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	87 5b       	subi	r24, 0xB7	; 183
    1b0e:	9d 4f       	sbci	r25, 0xFD	; 253
    1b10:	0e 94 44 0a 	call	0x1488	; 0x1488 <_ZN11EepromClassC1Ev>
	Eeprom1.clearEeprom();
    1b14:	ce 01       	movw	r24, r28
    1b16:	87 5b       	subi	r24, 0xB7	; 183
    1b18:	9d 4f       	sbci	r25, 0xFD	; 253
    1b1a:	0e 94 97 0b 	call	0x172e	; 0x172e <_ZN11EepromClass11clearEepromEv>
	
	ContactDirectoryPermanent.addContact("Anna","555555555",PERMANENT);
    1b1e:	22 e0       	ldi	r18, 0x02	; 2
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4d ed       	ldi	r20, 0xDD	; 221
    1b24:	52 e0       	ldi	r21, 0x02	; 2
    1b26:	67 ee       	ldi	r22, 0xE7	; 231
    1b28:	72 e0       	ldi	r23, 0x02	; 2
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	8b 5b       	subi	r24, 0xBB	; 187
    1b2e:	9d 4f       	sbci	r25, 0xFD	; 253
    1b30:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN21ContactDirectoryClass10addContactEPcS0_i>
	
	ContactDirectoryTemporary.addContact("Martin Streit","564418910",TEMPORARY);
    1b34:	21 e0       	ldi	r18, 0x01	; 1
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4c ee       	ldi	r20, 0xEC	; 236
    1b3a:	52 e0       	ldi	r21, 0x02	; 2
    1b3c:	66 ef       	ldi	r22, 0xF6	; 246
    1b3e:	72 e0       	ldi	r23, 0x02	; 2
    1b40:	ce 01       	movw	r24, r28
    1b42:	8f 5b       	subi	r24, 0xBF	; 191
    1b44:	9d 4f       	sbci	r25, 0xFD	; 253
    1b46:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN21ContactDirectoryClass10addContactEPcS0_i>
	
	
    DDRB = 0b00100000; // configure pin 7 of PORTB as output (digital pin 13 on the Arduino Mega2560) 
    1b4a:	80 e2       	ldi	r24, 0x20	; 32
    1b4c:	84 b9       	out	0x04, r24	; 4
	GpioPortClass GpioPortB((uint8_t*)0x25);
    1b4e:	65 e2       	ldi	r22, 0x25	; 37
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	ce 01       	movw	r24, r28
    1b54:	85 5b       	subi	r24, 0xB5	; 181
    1b56:	9d 4f       	sbci	r25, 0xFD	; 253
    1b58:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN13GpioPortClassC1EPh>
	GpioPortClass GpioPortD((uint8_t*)0x2B);
    1b5c:	6b e2       	ldi	r22, 0x2B	; 43
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	ce 01       	movw	r24, r28
    1b62:	8c 5a       	subi	r24, 0xAC	; 172
    1b64:	9d 4f       	sbci	r25, 0xFD	; 253
    1b66:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN13GpioPortClassC1EPh>
    1b6a:	2f ef       	ldi	r18, 0xFF	; 255
    1b6c:	83 ed       	ldi	r24, 0xD3	; 211
    1b6e:	90 e3       	ldi	r25, 0x30	; 48
    1b70:	21 50       	subi	r18, 0x01	; 1
    1b72:	80 40       	sbci	r24, 0x00	; 0
    1b74:	90 40       	sbci	r25, 0x00	; 0
    1b76:	e1 f7       	brne	.-8      	; 0x1b70 <main_ArduinoLockOpener+0xd2>
    1b78:	00 c0       	rjmp	.+0      	; 0x1b7a <main_ArduinoLockOpener+0xdc>
    1b7a:	00 00       	nop
    1b7c:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    1b80:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    1b84:	02 80       	ldd	r0, Z+2	; 0x02
    1b86:	f3 81       	ldd	r31, Z+3	; 0x03
    1b88:	e0 2d       	mov	r30, r0
    1b8a:	46 e0       	ldi	r20, 0x06	; 6
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	64 e0       	ldi	r22, 0x04	; 4
    1b90:	73 e0       	ldi	r23, 0x03	; 3
    1b92:	8a e6       	ldi	r24, 0x6A	; 106
    1b94:	93 e0       	ldi	r25, 0x03	; 3
    1b96:	09 95       	icall
    1b98:	2f ef       	ldi	r18, 0xFF	; 255
    1b9a:	83 ed       	ldi	r24, 0xD3	; 211
    1b9c:	90 e3       	ldi	r25, 0x30	; 48
    1b9e:	21 50       	subi	r18, 0x01	; 1
    1ba0:	80 40       	sbci	r24, 0x00	; 0
    1ba2:	90 40       	sbci	r25, 0x00	; 0
    1ba4:	e1 f7       	brne	.-8      	; 0x1b9e <main_ArduinoLockOpener+0x100>
    1ba6:	00 c0       	rjmp	.+0      	; 0x1ba8 <main_ArduinoLockOpener+0x10a>
    1ba8:	00 00       	nop
	Serial.write("Start\n");
	_delay_ms(1000);
	

    for(;;){
		GsmCommunication.checkConnection();	
    1baa:	ce 01       	movw	r24, r28
    1bac:	80 96       	adiw	r24, 0x20	; 32
    1bae:	0e 94 ab 0c 	call	0x1956	; 0x1956 <_ZN21GsmCommunicationClass15checkConnectionEv>
		GsmCommunication.readSerial();	
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	80 96       	adiw	r24, 0x20	; 32
    1bb6:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN21GsmCommunicationClass10readSerialEv>
		SmsHandler.handleReceivedSms(&ContactDirectoryTemporary);
    1bba:	be 01       	movw	r22, r28
    1bbc:	6f 5b       	subi	r22, 0xBF	; 191
    1bbe:	7d 4f       	sbci	r23, 0xFD	; 253
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	87 5d       	subi	r24, 0xD7	; 215
    1bc4:	9e 4f       	sbci	r25, 0xFE	; 254
    1bc6:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClass>
		AuthorizationHandler.handleReceivedCall(&ContactDirectoryTemporary,&ContactDirectoryPermanent);
    1bca:	ae 01       	movw	r20, r28
    1bcc:	4b 5b       	subi	r20, 0xBB	; 187
    1bce:	5d 4f       	sbci	r21, 0xFD	; 253
    1bd0:	be 01       	movw	r22, r28
    1bd2:	6f 5b       	subi	r22, 0xBF	; 191
    1bd4:	7d 4f       	sbci	r23, 0xFD	; 253
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	89 5d       	subi	r24, 0xD9	; 217
    1bda:	9e 4f       	sbci	r25, 0xFE	; 254
    1bdc:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_>
	   
	   public:
      GPIOLedClass(GpioPortClass *Parent, int LedNumber) : MyParent(Parent), MyLed(LedNumber) {};
      void On()    {MyParent->SetLed(MyLed, GpioPortClass::ON);};
      void Off()   {MyParent->SetLed(MyLed, GpioPortClass::OFF);};
      void Toggle(){MyParent->ToggleLed(MyLed);};
    1be0:	60 e0       	ldi	r22, 0x00	; 0
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	ce 01       	movw	r24, r28
    1be6:	85 5b       	subi	r24, 0xB5	; 181
    1be8:	9d 4f       	sbci	r25, 0xFD	; 253
    1bea:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN13GpioPortClass9ToggleLedEi>
    1bee:	65 e0       	ldi	r22, 0x05	; 5
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	85 5b       	subi	r24, 0xB5	; 181
    1bf6:	9d 4f       	sbci	r25, 0xFD	; 253
    1bf8:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <_ZN13GpioPortClass9ToggleLedEi>
    1bfc:	2f ef       	ldi	r18, 0xFF	; 255
    1bfe:	80 e7       	ldi	r24, 0x70	; 112
    1c00:	92 e0       	ldi	r25, 0x02	; 2
    1c02:	21 50       	subi	r18, 0x01	; 1
    1c04:	80 40       	sbci	r24, 0x00	; 0
    1c06:	90 40       	sbci	r25, 0x00	; 0
    1c08:	e1 f7       	brne	.-8      	; 0x1c02 <main_ArduinoLockOpener+0x164>
    1c0a:	00 c0       	rjmp	.+0      	; 0x1c0c <main_ArduinoLockOpener+0x16e>
    1c0c:	00 00       	nop
    1c0e:	cd cf       	rjmp	.-102    	; 0x1baa <main_ArduinoLockOpener+0x10c>

00001c10 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>:
	GsmCommunication = NewGsmCommunication;
	AuthorizationHandler = NewAuthorizationHandler;
} //SmsHandlerClass

// default destructor
SmsHandlerClass::~SmsHandlerClass()
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	fc 01       	movw	r30, r24
    1c16:	34 96       	adiw	r30, 0x04	; 4
    1c18:	24 e1       	ldi	r18, 0x14	; 20
    1c1a:	df 01       	movw	r26, r30
    1c1c:	1d 92       	st	X+, r1
    1c1e:	2a 95       	dec	r18
    1c20:	e9 f7       	brne	.-6      	; 0x1c1c <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass+0xc>
    1c22:	74 96       	adiw	r30, 0x14	; 20
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	31 e0       	ldi	r19, 0x01	; 1
    1c28:	ef 01       	movw	r28, r30
    1c2a:	d9 01       	movw	r26, r18
    1c2c:	19 92       	st	Y+, r1
    1c2e:	11 97       	sbiw	r26, 0x01	; 1
    1c30:	e9 f7       	brne	.-6      	; 0x1c2c <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass+0x1c>
    1c32:	ec 01       	movw	r28, r24
    1c34:	79 83       	std	Y+1, r23	; 0x01
    1c36:	68 83       	st	Y, r22
    1c38:	5b 83       	std	Y+3, r21	; 0x03
    1c3a:	4a 83       	std	Y+2, r20	; 0x02
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <_ZN15SmsHandlerClass7readSmsEPc>:
			Serial.write("SMS sender DECLINED \n");
		}
	}
}

void SmsHandlerClass::readSms(char *buffer){
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	ec 01       	movw	r28, r24
    1c48:	fb 01       	movw	r30, r22
    1c4a:	33 97       	sbiw	r30, 0x03	; 3
	int textStart = 0;
	int i = 0;
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
}

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
			textStart = 1;
    1c54:	31 e0       	ldi	r19, 0x01	; 1
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	df 01       	movw	r26, r30

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	99 23       	and	r25, r25
    1c5e:	b9 f0       	breq	.+46     	; 0x1c8e <_ZN15SmsHandlerClass7readSmsEPc+0x4c>
    1c60:	31 96       	adiw	r30, 0x01	; 1
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
    1c62:	2c 91       	ld	r18, X
    1c64:	22 32       	cpi	r18, 0x22	; 34
    1c66:	31 f4       	brne	.+12     	; 0x1c74 <_ZN15SmsHandlerClass7readSmsEPc+0x32>
    1c68:	20 81       	ld	r18, Z
    1c6a:	2d 30       	cpi	r18, 0x0D	; 13
    1c6c:	19 f4       	brne	.+6      	; 0x1c74 <_ZN15SmsHandlerClass7readSmsEPc+0x32>
    1c6e:	21 81       	ldd	r18, Z+1	; 0x01
    1c70:	2a 30       	cpi	r18, 0x0A	; 10
    1c72:	19 f0       	breq	.+6      	; 0x1c7a <_ZN15SmsHandlerClass7readSmsEPc+0x38>
    1c74:	41 30       	cpi	r20, 0x01	; 1
    1c76:	51 05       	cpc	r21, r1
    1c78:	79 f7       	brne	.-34     	; 0x1c58 <_ZN15SmsHandlerClass7readSmsEPc+0x16>
			textStart = 1;
			smsMsg[i]=buffer[u];
    1c7a:	de 01       	movw	r26, r28
    1c7c:	a6 0f       	add	r26, r22
    1c7e:	b7 1f       	adc	r27, r23
    1c80:	58 96       	adiw	r26, 0x18	; 24
    1c82:	9c 93       	st	X, r25
			i++;
    1c84:	6f 5f       	subi	r22, 0xFF	; 255
    1c86:	7f 4f       	sbci	r23, 0xFF	; 255
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
			textStart = 1;
    1c88:	43 2f       	mov	r20, r19
    1c8a:	58 2f       	mov	r21, r24

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
    1c8c:	e5 cf       	rjmp	.-54     	; 0x1c58 <_ZN15SmsHandlerClass7readSmsEPc+0x16>
			textStart = 1;
			smsMsg[i]=buffer[u];
			i++;
		}
	}
	smsMsg[i]='\0';	
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e6 0f       	add	r30, r22
    1c92:	f7 1f       	adc	r31, r23
    1c94:	10 8e       	std	Z+24, r1	; 0x18
}
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc>:

void SmsHandlerClass::isolateSmsSenderPhoneNr(char *buffer){
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	ec 01       	movw	r28, r24
    1ca6:	cb 01       	movw	r24, r22
    char *retBuf;
    int u = 0;
    retBuf = strstr(buffer,"+CMT:");		// find beginning of sms sender
    1ca8:	6b e0       	ldi	r22, 0x0B	; 11
    1caa:	73 e0       	ldi	r23, 0x03	; 3
    1cac:	0e 94 4b 10 	call	0x2096	; 0x2096 <strstr>
    1cb0:	fc 01       	movw	r30, r24
    if(retBuf != NULL){						// if SMS sender Nr received
    1cb2:	89 2b       	or	r24, r25
    1cb4:	b1 f0       	breq	.+44     	; 0x1ce2 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x46>
        for(u=0; retBuf[u+7] !='\"';u++){	// fill Nr into variable until end of Nr reached
    1cb6:	97 81       	ldd	r25, Z+7	; 0x07
    1cb8:	92 32       	cpi	r25, 0x22	; 34
    1cba:	61 f0       	breq	.+24     	; 0x1cd4 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x38>
    1cbc:	de 01       	movw	r26, r28
    1cbe:	14 96       	adiw	r26, 0x04	; 4
    1cc0:	38 96       	adiw	r30, 0x08	; 8
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
            smsSenderNr[u] = retBuf[u+7];
    1cc6:	9d 93       	st	X+, r25
void SmsHandlerClass::isolateSmsSenderPhoneNr(char *buffer){
    char *retBuf;
    int u = 0;
    retBuf = strstr(buffer,"+CMT:");		// find beginning of sms sender
    if(retBuf != NULL){						// if SMS sender Nr received
        for(u=0; retBuf[u+7] !='\"';u++){	// fill Nr into variable until end of Nr reached
    1cc8:	2f 5f       	subi	r18, 0xFF	; 255
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ccc:	91 91       	ld	r25, Z+
    1cce:	92 32       	cpi	r25, 0x22	; 34
    1cd0:	d1 f7       	brne	.-12     	; 0x1cc6 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x2a>
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x3c>
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
            smsSenderNr[u] = retBuf[u+7];
        }
        smsSenderNr[u]='\0';
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e2 0f       	add	r30, r18
    1cdc:	f3 1f       	adc	r31, r19
    1cde:	14 82       	std	Z+4, r1	; 0x04
    1ce0:	01 c0       	rjmp	.+2      	; 0x1ce4 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x48>
    }else{
        smsSenderNr[u]='\0';
    1ce2:	1c 82       	std	Y+4, r1	; 0x04
    1ce4:	0a e6       	ldi	r16, 0x6A	; 106
    1ce6:	13 e0       	ldi	r17, 0x03	; 3
    1ce8:	d8 01       	movw	r26, r16
    1cea:	ed 91       	ld	r30, X+
    1cec:	fc 91       	ld	r31, X
    1cee:	02 80       	ldd	r0, Z+2	; 0x02
    1cf0:	f3 81       	ldd	r31, Z+3	; 0x03
    1cf2:	e0 2d       	mov	r30, r0
    1cf4:	4c e0       	ldi	r20, 0x0C	; 12
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	61 e1       	ldi	r22, 0x11	; 17
    1cfa:	73 e0       	ldi	r23, 0x03	; 3
    1cfc:	c8 01       	movw	r24, r16
    1cfe:	09 95       	icall
    }
	
	// Display SMS sender
	Serial.write("SMS sender: ");
	GsmCommunication->displayString(smsSenderNr);
    1d00:	be 01       	movw	r22, r28
    1d02:	6c 5f       	subi	r22, 0xFC	; 252
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	88 81       	ld	r24, Y
    1d08:	99 81       	ldd	r25, Y+1	; 0x01
    1d0a:	0e 94 b5 0b 	call	0x176a	; 0x176a <_ZN21GsmCommunicationClass13displayStringEPc>
    1d0e:	d8 01       	movw	r26, r16
    1d10:	ed 91       	ld	r30, X+
    1d12:	fc 91       	ld	r31, X
    1d14:	02 80       	ldd	r0, Z+2	; 0x02
    1d16:	f3 81       	ldd	r31, Z+3	; 0x03
    1d18:	e0 2d       	mov	r30, r0
    1d1a:	42 e0       	ldi	r20, 0x02	; 2
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	6a ed       	ldi	r22, 0xDA	; 218
    1d20:	72 e0       	ldi	r23, 0x02	; 2
    1d22:	c8 01       	movw	r24, r16
    1d24:	09 95       	icall
	Serial.write("\n\n");	
    1d26:	df 91       	pop	r29
    1d28:	cf 91       	pop	r28
    1d2a:	1f 91       	pop	r17
    1d2c:	0f 91       	pop	r16
    1d2e:	08 95       	ret

00001d30 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClass>:
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/

void SmsHandlerClass::handleReceivedSms(ContactDirectoryClass *ContactDirectory){
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	ec 01       	movw	r28, r24
    1d3e:	7b 01       	movw	r14, r22
	if(strstr(GsmCommunication->receiveBuffer,"+CMT:") != NULL){	// if SMS received
    1d40:	08 81       	ld	r16, Y
    1d42:	19 81       	ldd	r17, Y+1	; 0x01
    1d44:	0c 5f       	subi	r16, 0xFC	; 252
    1d46:	1f 4f       	sbci	r17, 0xFF	; 255
    1d48:	6b e0       	ldi	r22, 0x0B	; 11
    1d4a:	73 e0       	ldi	r23, 0x03	; 3
    1d4c:	c8 01       	movw	r24, r16
    1d4e:	0e 94 4b 10 	call	0x2096	; 0x2096 <strstr>
    1d52:	89 2b       	or	r24, r25
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClass+0x28>
    1d56:	48 c0       	rjmp	.+144    	; 0x1de8 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClass+0xb8>
		
		isolateSmsSenderPhoneNr(&(GsmCommunication->receiveBuffer[0]));
    1d58:	b8 01       	movw	r22, r16
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc>
		
		// check Authorization
		if(AuthorizationHandler->checkAuthorization((char*)&smsSenderNr, ContactDirectory) == 1){
    1d60:	a7 01       	movw	r20, r14
    1d62:	be 01       	movw	r22, r28
    1d64:	6c 5f       	subi	r22, 0xFC	; 252
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6c:	0e 94 5f 08 	call	0x10be	; 0x10be <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClass>
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	61 f5       	brne	.+88     	; 0x1dcc <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClass+0x9c>
    1d74:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    1d78:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    1d7c:	02 80       	ldd	r0, Z+2	; 0x02
    1d7e:	f3 81       	ldd	r31, Z+3	; 0x03
    1d80:	e0 2d       	mov	r30, r0
    1d82:	48 e1       	ldi	r20, 0x18	; 24
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	6e e1       	ldi	r22, 0x1E	; 30
    1d88:	73 e0       	ldi	r23, 0x03	; 3
    1d8a:	8a e6       	ldi	r24, 0x6A	; 106
    1d8c:	93 e0       	ldi	r25, 0x03	; 3
    1d8e:	09 95       	icall
			Serial.write("SMS sender AUTHORIZED !\n");
			
			// read sms Msg out of the receive Buffer
			readSms((char*)&GsmCommunication->receiveBuffer);
    1d90:	68 81       	ld	r22, Y
    1d92:	79 81       	ldd	r23, Y+1	; 0x01
    1d94:	6c 5f       	subi	r22, 0xFC	; 252
    1d96:	7f 4f       	sbci	r23, 0xFF	; 255
    1d98:	ce 01       	movw	r24, r28
    1d9a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_ZN15SmsHandlerClass7readSmsEPc>
			
			// handle sms commands
			//GsmCommunication->displayString(smsMsg);		// for debbuging
			if(strstr(smsMsg,"Globi 18") != NULL){
    1d9e:	67 e3       	ldi	r22, 0x37	; 55
    1da0:	73 e0       	ldi	r23, 0x03	; 3
    1da2:	ce 01       	movw	r24, r28
    1da4:	48 96       	adiw	r24, 0x18	; 24
    1da6:	0e 94 4b 10 	call	0x2096	; 0x2096 <strstr>
    1daa:	89 2b       	or	r24, r25
    1dac:	e9 f0       	breq	.+58     	; 0x1de8 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClass+0xb8>
    1dae:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    1db2:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    1db6:	02 80       	ldd	r0, Z+2	; 0x02
    1db8:	f3 81       	ldd	r31, Z+3	; 0x03
    1dba:	e0 2d       	mov	r30, r0
    1dbc:	43 e1       	ldi	r20, 0x13	; 19
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	60 e4       	ldi	r22, 0x40	; 64
    1dc2:	73 e0       	ldi	r23, 0x03	; 3
    1dc4:	8a e6       	ldi	r24, 0x6A	; 106
    1dc6:	93 e0       	ldi	r25, 0x03	; 3
    1dc8:	09 95       	icall
    1dca:	0e c0       	rjmp	.+28     	; 0x1de8 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClass+0xb8>
    1dcc:	e0 91 6a 03 	lds	r30, 0x036A	; 0x80036a <__data_end>
    1dd0:	f0 91 6b 03 	lds	r31, 0x036B	; 0x80036b <__data_end+0x1>
    1dd4:	02 80       	ldd	r0, Z+2	; 0x02
    1dd6:	f3 81       	ldd	r31, Z+3	; 0x03
    1dd8:	e0 2d       	mov	r30, r0
    1dda:	45 e1       	ldi	r20, 0x15	; 21
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	64 e5       	ldi	r22, 0x54	; 84
    1de0:	73 e0       	ldi	r23, 0x03	; 3
    1de2:	8a e6       	ldi	r24, 0x6A	; 106
    1de4:	93 e0       	ldi	r25, 0x03	; 3
    1de6:	09 95       	icall
			}
		}else{
			Serial.write("SMS sender DECLINED \n");
		}
	}
}
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	ff 90       	pop	r15
    1df2:	ef 90       	pop	r14
    1df4:	08 95       	ret

00001df6 <__udivmodsi4>:
    1df6:	a1 e2       	ldi	r26, 0x21	; 33
    1df8:	1a 2e       	mov	r1, r26
    1dfa:	aa 1b       	sub	r26, r26
    1dfc:	bb 1b       	sub	r27, r27
    1dfe:	fd 01       	movw	r30, r26
    1e00:	0d c0       	rjmp	.+26     	; 0x1e1c <__udivmodsi4_ep>

00001e02 <__udivmodsi4_loop>:
    1e02:	aa 1f       	adc	r26, r26
    1e04:	bb 1f       	adc	r27, r27
    1e06:	ee 1f       	adc	r30, r30
    1e08:	ff 1f       	adc	r31, r31
    1e0a:	a2 17       	cp	r26, r18
    1e0c:	b3 07       	cpc	r27, r19
    1e0e:	e4 07       	cpc	r30, r20
    1e10:	f5 07       	cpc	r31, r21
    1e12:	20 f0       	brcs	.+8      	; 0x1e1c <__udivmodsi4_ep>
    1e14:	a2 1b       	sub	r26, r18
    1e16:	b3 0b       	sbc	r27, r19
    1e18:	e4 0b       	sbc	r30, r20
    1e1a:	f5 0b       	sbc	r31, r21

00001e1c <__udivmodsi4_ep>:
    1e1c:	66 1f       	adc	r22, r22
    1e1e:	77 1f       	adc	r23, r23
    1e20:	88 1f       	adc	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	1a 94       	dec	r1
    1e26:	69 f7       	brne	.-38     	; 0x1e02 <__udivmodsi4_loop>
    1e28:	60 95       	com	r22
    1e2a:	70 95       	com	r23
    1e2c:	80 95       	com	r24
    1e2e:	90 95       	com	r25
    1e30:	9b 01       	movw	r18, r22
    1e32:	ac 01       	movw	r20, r24
    1e34:	bd 01       	movw	r22, r26
    1e36:	cf 01       	movw	r24, r30
    1e38:	08 95       	ret

00001e3a <__tablejump2__>:
    1e3a:	ee 0f       	add	r30, r30
    1e3c:	ff 1f       	adc	r31, r31
    1e3e:	05 90       	lpm	r0, Z+
    1e40:	f4 91       	lpm	r31, Z
    1e42:	e0 2d       	mov	r30, r0
    1e44:	09 94       	ijmp

00001e46 <malloc>:
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	82 30       	cpi	r24, 0x02	; 2
    1e50:	91 05       	cpc	r25, r1
    1e52:	10 f4       	brcc	.+4      	; 0x1e58 <malloc+0x12>
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <__flp>
    1e5c:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <__flp+0x1>
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	a0 e0       	ldi	r26, 0x00	; 0
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	30 97       	sbiw	r30, 0x00	; 0
    1e6a:	19 f1       	breq	.+70     	; 0x1eb2 <malloc+0x6c>
    1e6c:	40 81       	ld	r20, Z
    1e6e:	51 81       	ldd	r21, Z+1	; 0x01
    1e70:	02 81       	ldd	r16, Z+2	; 0x02
    1e72:	13 81       	ldd	r17, Z+3	; 0x03
    1e74:	48 17       	cp	r20, r24
    1e76:	59 07       	cpc	r21, r25
    1e78:	c8 f0       	brcs	.+50     	; 0x1eac <malloc+0x66>
    1e7a:	84 17       	cp	r24, r20
    1e7c:	95 07       	cpc	r25, r21
    1e7e:	69 f4       	brne	.+26     	; 0x1e9a <malloc+0x54>
    1e80:	10 97       	sbiw	r26, 0x00	; 0
    1e82:	31 f0       	breq	.+12     	; 0x1e90 <malloc+0x4a>
    1e84:	12 96       	adiw	r26, 0x02	; 2
    1e86:	0c 93       	st	X, r16
    1e88:	12 97       	sbiw	r26, 0x02	; 2
    1e8a:	13 96       	adiw	r26, 0x03	; 3
    1e8c:	1c 93       	st	X, r17
    1e8e:	27 c0       	rjmp	.+78     	; 0x1ede <malloc+0x98>
    1e90:	00 93 23 05 	sts	0x0523, r16	; 0x800523 <__flp>
    1e94:	10 93 24 05 	sts	0x0524, r17	; 0x800524 <__flp+0x1>
    1e98:	22 c0       	rjmp	.+68     	; 0x1ede <malloc+0x98>
    1e9a:	21 15       	cp	r18, r1
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	19 f0       	breq	.+6      	; 0x1ea6 <malloc+0x60>
    1ea0:	42 17       	cp	r20, r18
    1ea2:	53 07       	cpc	r21, r19
    1ea4:	18 f4       	brcc	.+6      	; 0x1eac <malloc+0x66>
    1ea6:	9a 01       	movw	r18, r20
    1ea8:	bd 01       	movw	r22, r26
    1eaa:	ef 01       	movw	r28, r30
    1eac:	df 01       	movw	r26, r30
    1eae:	f8 01       	movw	r30, r16
    1eb0:	db cf       	rjmp	.-74     	; 0x1e68 <malloc+0x22>
    1eb2:	21 15       	cp	r18, r1
    1eb4:	31 05       	cpc	r19, r1
    1eb6:	f9 f0       	breq	.+62     	; 0x1ef6 <malloc+0xb0>
    1eb8:	28 1b       	sub	r18, r24
    1eba:	39 0b       	sbc	r19, r25
    1ebc:	24 30       	cpi	r18, 0x04	; 4
    1ebe:	31 05       	cpc	r19, r1
    1ec0:	80 f4       	brcc	.+32     	; 0x1ee2 <malloc+0x9c>
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec6:	61 15       	cp	r22, r1
    1ec8:	71 05       	cpc	r23, r1
    1eca:	21 f0       	breq	.+8      	; 0x1ed4 <malloc+0x8e>
    1ecc:	fb 01       	movw	r30, r22
    1ece:	93 83       	std	Z+3, r25	; 0x03
    1ed0:	82 83       	std	Z+2, r24	; 0x02
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <malloc+0x96>
    1ed4:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <__flp+0x1>
    1ed8:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <__flp>
    1edc:	fe 01       	movw	r30, r28
    1ede:	32 96       	adiw	r30, 0x02	; 2
    1ee0:	44 c0       	rjmp	.+136    	; 0x1f6a <malloc+0x124>
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	e2 0f       	add	r30, r18
    1ee6:	f3 1f       	adc	r31, r19
    1ee8:	81 93       	st	Z+, r24
    1eea:	91 93       	st	Z+, r25
    1eec:	22 50       	subi	r18, 0x02	; 2
    1eee:	31 09       	sbc	r19, r1
    1ef0:	39 83       	std	Y+1, r19	; 0x01
    1ef2:	28 83       	st	Y, r18
    1ef4:	3a c0       	rjmp	.+116    	; 0x1f6a <malloc+0x124>
    1ef6:	20 91 21 05 	lds	r18, 0x0521	; 0x800521 <__brkval>
    1efa:	30 91 22 05 	lds	r19, 0x0522	; 0x800522 <__brkval+0x1>
    1efe:	23 2b       	or	r18, r19
    1f00:	41 f4       	brne	.+16     	; 0x1f12 <malloc+0xcc>
    1f02:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1f06:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1f0a:	30 93 22 05 	sts	0x0522, r19	; 0x800522 <__brkval+0x1>
    1f0e:	20 93 21 05 	sts	0x0521, r18	; 0x800521 <__brkval>
    1f12:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f16:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f1a:	21 15       	cp	r18, r1
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	41 f4       	brne	.+16     	; 0x1f30 <malloc+0xea>
    1f20:	2d b7       	in	r18, 0x3d	; 61
    1f22:	3e b7       	in	r19, 0x3e	; 62
    1f24:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1f28:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1f2c:	24 1b       	sub	r18, r20
    1f2e:	35 0b       	sbc	r19, r21
    1f30:	e0 91 21 05 	lds	r30, 0x0521	; 0x800521 <__brkval>
    1f34:	f0 91 22 05 	lds	r31, 0x0522	; 0x800522 <__brkval+0x1>
    1f38:	e2 17       	cp	r30, r18
    1f3a:	f3 07       	cpc	r31, r19
    1f3c:	a0 f4       	brcc	.+40     	; 0x1f66 <malloc+0x120>
    1f3e:	2e 1b       	sub	r18, r30
    1f40:	3f 0b       	sbc	r19, r31
    1f42:	28 17       	cp	r18, r24
    1f44:	39 07       	cpc	r19, r25
    1f46:	78 f0       	brcs	.+30     	; 0x1f66 <malloc+0x120>
    1f48:	ac 01       	movw	r20, r24
    1f4a:	4e 5f       	subi	r20, 0xFE	; 254
    1f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4e:	24 17       	cp	r18, r20
    1f50:	35 07       	cpc	r19, r21
    1f52:	48 f0       	brcs	.+18     	; 0x1f66 <malloc+0x120>
    1f54:	4e 0f       	add	r20, r30
    1f56:	5f 1f       	adc	r21, r31
    1f58:	50 93 22 05 	sts	0x0522, r21	; 0x800522 <__brkval+0x1>
    1f5c:	40 93 21 05 	sts	0x0521, r20	; 0x800521 <__brkval>
    1f60:	81 93       	st	Z+, r24
    1f62:	91 93       	st	Z+, r25
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <malloc+0x124>
    1f66:	e0 e0       	ldi	r30, 0x00	; 0
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	cf 01       	movw	r24, r30
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <free>:
    1f76:	cf 93       	push	r28
    1f78:	df 93       	push	r29
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <free+0xa>
    1f7e:	81 c0       	rjmp	.+258    	; 0x2082 <free+0x10c>
    1f80:	fc 01       	movw	r30, r24
    1f82:	32 97       	sbiw	r30, 0x02	; 2
    1f84:	13 82       	std	Z+3, r1	; 0x03
    1f86:	12 82       	std	Z+2, r1	; 0x02
    1f88:	a0 91 23 05 	lds	r26, 0x0523	; 0x800523 <__flp>
    1f8c:	b0 91 24 05 	lds	r27, 0x0524	; 0x800524 <__flp+0x1>
    1f90:	10 97       	sbiw	r26, 0x00	; 0
    1f92:	81 f4       	brne	.+32     	; 0x1fb4 <free+0x3e>
    1f94:	20 81       	ld	r18, Z
    1f96:	31 81       	ldd	r19, Z+1	; 0x01
    1f98:	82 0f       	add	r24, r18
    1f9a:	93 1f       	adc	r25, r19
    1f9c:	20 91 21 05 	lds	r18, 0x0521	; 0x800521 <__brkval>
    1fa0:	30 91 22 05 	lds	r19, 0x0522	; 0x800522 <__brkval+0x1>
    1fa4:	28 17       	cp	r18, r24
    1fa6:	39 07       	cpc	r19, r25
    1fa8:	51 f5       	brne	.+84     	; 0x1ffe <free+0x88>
    1faa:	f0 93 22 05 	sts	0x0522, r31	; 0x800522 <__brkval+0x1>
    1fae:	e0 93 21 05 	sts	0x0521, r30	; 0x800521 <__brkval>
    1fb2:	67 c0       	rjmp	.+206    	; 0x2082 <free+0x10c>
    1fb4:	ed 01       	movw	r28, r26
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	ce 17       	cp	r28, r30
    1fbc:	df 07       	cpc	r29, r31
    1fbe:	40 f4       	brcc	.+16     	; 0x1fd0 <free+0x5a>
    1fc0:	4a 81       	ldd	r20, Y+2	; 0x02
    1fc2:	5b 81       	ldd	r21, Y+3	; 0x03
    1fc4:	9e 01       	movw	r18, r28
    1fc6:	41 15       	cp	r20, r1
    1fc8:	51 05       	cpc	r21, r1
    1fca:	f1 f0       	breq	.+60     	; 0x2008 <free+0x92>
    1fcc:	ea 01       	movw	r28, r20
    1fce:	f5 cf       	rjmp	.-22     	; 0x1fba <free+0x44>
    1fd0:	d3 83       	std	Z+3, r29	; 0x03
    1fd2:	c2 83       	std	Z+2, r28	; 0x02
    1fd4:	40 81       	ld	r20, Z
    1fd6:	51 81       	ldd	r21, Z+1	; 0x01
    1fd8:	84 0f       	add	r24, r20
    1fda:	95 1f       	adc	r25, r21
    1fdc:	c8 17       	cp	r28, r24
    1fde:	d9 07       	cpc	r29, r25
    1fe0:	59 f4       	brne	.+22     	; 0x1ff8 <free+0x82>
    1fe2:	88 81       	ld	r24, Y
    1fe4:	99 81       	ldd	r25, Y+1	; 0x01
    1fe6:	84 0f       	add	r24, r20
    1fe8:	95 1f       	adc	r25, r21
    1fea:	02 96       	adiw	r24, 0x02	; 2
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff4:	93 83       	std	Z+3, r25	; 0x03
    1ff6:	82 83       	std	Z+2, r24	; 0x02
    1ff8:	21 15       	cp	r18, r1
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	29 f4       	brne	.+10     	; 0x2008 <free+0x92>
    1ffe:	f0 93 24 05 	sts	0x0524, r31	; 0x800524 <__flp+0x1>
    2002:	e0 93 23 05 	sts	0x0523, r30	; 0x800523 <__flp>
    2006:	3d c0       	rjmp	.+122    	; 0x2082 <free+0x10c>
    2008:	e9 01       	movw	r28, r18
    200a:	fb 83       	std	Y+3, r31	; 0x03
    200c:	ea 83       	std	Y+2, r30	; 0x02
    200e:	49 91       	ld	r20, Y+
    2010:	59 91       	ld	r21, Y+
    2012:	c4 0f       	add	r28, r20
    2014:	d5 1f       	adc	r29, r21
    2016:	ec 17       	cp	r30, r28
    2018:	fd 07       	cpc	r31, r29
    201a:	61 f4       	brne	.+24     	; 0x2034 <free+0xbe>
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	84 0f       	add	r24, r20
    2022:	95 1f       	adc	r25, r21
    2024:	02 96       	adiw	r24, 0x02	; 2
    2026:	e9 01       	movw	r28, r18
    2028:	99 83       	std	Y+1, r25	; 0x01
    202a:	88 83       	st	Y, r24
    202c:	82 81       	ldd	r24, Z+2	; 0x02
    202e:	93 81       	ldd	r25, Z+3	; 0x03
    2030:	9b 83       	std	Y+3, r25	; 0x03
    2032:	8a 83       	std	Y+2, r24	; 0x02
    2034:	e0 e0       	ldi	r30, 0x00	; 0
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	12 96       	adiw	r26, 0x02	; 2
    203a:	8d 91       	ld	r24, X+
    203c:	9c 91       	ld	r25, X
    203e:	13 97       	sbiw	r26, 0x03	; 3
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	19 f0       	breq	.+6      	; 0x204a <free+0xd4>
    2044:	fd 01       	movw	r30, r26
    2046:	dc 01       	movw	r26, r24
    2048:	f7 cf       	rjmp	.-18     	; 0x2038 <free+0xc2>
    204a:	8d 91       	ld	r24, X+
    204c:	9c 91       	ld	r25, X
    204e:	11 97       	sbiw	r26, 0x01	; 1
    2050:	9d 01       	movw	r18, r26
    2052:	2e 5f       	subi	r18, 0xFE	; 254
    2054:	3f 4f       	sbci	r19, 0xFF	; 255
    2056:	82 0f       	add	r24, r18
    2058:	93 1f       	adc	r25, r19
    205a:	20 91 21 05 	lds	r18, 0x0521	; 0x800521 <__brkval>
    205e:	30 91 22 05 	lds	r19, 0x0522	; 0x800522 <__brkval+0x1>
    2062:	28 17       	cp	r18, r24
    2064:	39 07       	cpc	r19, r25
    2066:	69 f4       	brne	.+26     	; 0x2082 <free+0x10c>
    2068:	30 97       	sbiw	r30, 0x00	; 0
    206a:	29 f4       	brne	.+10     	; 0x2076 <free+0x100>
    206c:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <__flp+0x1>
    2070:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <__flp>
    2074:	02 c0       	rjmp	.+4      	; 0x207a <free+0x104>
    2076:	13 82       	std	Z+3, r1	; 0x03
    2078:	12 82       	std	Z+2, r1	; 0x02
    207a:	b0 93 22 05 	sts	0x0522, r27	; 0x800522 <__brkval+0x1>
    207e:	a0 93 21 05 	sts	0x0521, r26	; 0x800521 <__brkval>
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	08 95       	ret

00002088 <strcpy>:
    2088:	fb 01       	movw	r30, r22
    208a:	dc 01       	movw	r26, r24
    208c:	01 90       	ld	r0, Z+
    208e:	0d 92       	st	X+, r0
    2090:	00 20       	and	r0, r0
    2092:	e1 f7       	brne	.-8      	; 0x208c <strcpy+0x4>
    2094:	08 95       	ret

00002096 <strstr>:
    2096:	fb 01       	movw	r30, r22
    2098:	51 91       	ld	r21, Z+
    209a:	55 23       	and	r21, r21
    209c:	a9 f0       	breq	.+42     	; 0x20c8 <strstr+0x32>
    209e:	bf 01       	movw	r22, r30
    20a0:	dc 01       	movw	r26, r24
    20a2:	4d 91       	ld	r20, X+
    20a4:	45 17       	cp	r20, r21
    20a6:	41 11       	cpse	r20, r1
    20a8:	e1 f7       	brne	.-8      	; 0x20a2 <strstr+0xc>
    20aa:	59 f4       	brne	.+22     	; 0x20c2 <strstr+0x2c>
    20ac:	cd 01       	movw	r24, r26
    20ae:	01 90       	ld	r0, Z+
    20b0:	00 20       	and	r0, r0
    20b2:	49 f0       	breq	.+18     	; 0x20c6 <strstr+0x30>
    20b4:	4d 91       	ld	r20, X+
    20b6:	40 15       	cp	r20, r0
    20b8:	41 11       	cpse	r20, r1
    20ba:	c9 f3       	breq	.-14     	; 0x20ae <strstr+0x18>
    20bc:	fb 01       	movw	r30, r22
    20be:	41 11       	cpse	r20, r1
    20c0:	ef cf       	rjmp	.-34     	; 0x20a0 <strstr+0xa>
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	08 95       	ret

000020ca <sprintf>:
    20ca:	ae e0       	ldi	r26, 0x0E	; 14
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	eb e6       	ldi	r30, 0x6B	; 107
    20d0:	f0 e1       	ldi	r31, 0x10	; 16
    20d2:	0c 94 3c 13 	jmp	0x2678	; 0x2678 <__prologue_saves__+0x1c>
    20d6:	0d 89       	ldd	r16, Y+21	; 0x15
    20d8:	1e 89       	ldd	r17, Y+22	; 0x16
    20da:	86 e0       	ldi	r24, 0x06	; 6
    20dc:	8c 83       	std	Y+4, r24	; 0x04
    20de:	1a 83       	std	Y+2, r17	; 0x02
    20e0:	09 83       	std	Y+1, r16	; 0x01
    20e2:	8f ef       	ldi	r24, 0xFF	; 255
    20e4:	9f e7       	ldi	r25, 0x7F	; 127
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	ae 01       	movw	r20, r28
    20ec:	47 5e       	subi	r20, 0xE7	; 231
    20ee:	5f 4f       	sbci	r21, 0xFF	; 255
    20f0:	6f 89       	ldd	r22, Y+23	; 0x17
    20f2:	78 8d       	ldd	r23, Y+24	; 0x18
    20f4:	ce 01       	movw	r24, r28
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	0e 94 87 10 	call	0x210e	; 0x210e <vfprintf>
    20fc:	ef 81       	ldd	r30, Y+7	; 0x07
    20fe:	f8 85       	ldd	r31, Y+8	; 0x08
    2100:	e0 0f       	add	r30, r16
    2102:	f1 1f       	adc	r31, r17
    2104:	10 82       	st	Z, r1
    2106:	2e 96       	adiw	r28, 0x0e	; 14
    2108:	e4 e0       	ldi	r30, 0x04	; 4
    210a:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__epilogue_restores__+0x1c>

0000210e <vfprintf>:
    210e:	ab e0       	ldi	r26, 0x0B	; 11
    2110:	b0 e0       	ldi	r27, 0x00	; 0
    2112:	ed e8       	ldi	r30, 0x8D	; 141
    2114:	f0 e1       	ldi	r31, 0x10	; 16
    2116:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__>
    211a:	6c 01       	movw	r12, r24
    211c:	7b 01       	movw	r14, r22
    211e:	8a 01       	movw	r16, r20
    2120:	fc 01       	movw	r30, r24
    2122:	17 82       	std	Z+7, r1	; 0x07
    2124:	16 82       	std	Z+6, r1	; 0x06
    2126:	83 81       	ldd	r24, Z+3	; 0x03
    2128:	81 ff       	sbrs	r24, 1
    212a:	cc c1       	rjmp	.+920    	; 0x24c4 <vfprintf+0x3b6>
    212c:	ce 01       	movw	r24, r28
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	3c 01       	movw	r6, r24
    2132:	f6 01       	movw	r30, r12
    2134:	93 81       	ldd	r25, Z+3	; 0x03
    2136:	f7 01       	movw	r30, r14
    2138:	93 fd       	sbrc	r25, 3
    213a:	85 91       	lpm	r24, Z+
    213c:	93 ff       	sbrs	r25, 3
    213e:	81 91       	ld	r24, Z+
    2140:	7f 01       	movw	r14, r30
    2142:	88 23       	and	r24, r24
    2144:	09 f4       	brne	.+2      	; 0x2148 <vfprintf+0x3a>
    2146:	ba c1       	rjmp	.+884    	; 0x24bc <vfprintf+0x3ae>
    2148:	85 32       	cpi	r24, 0x25	; 37
    214a:	39 f4       	brne	.+14     	; 0x215a <vfprintf+0x4c>
    214c:	93 fd       	sbrc	r25, 3
    214e:	85 91       	lpm	r24, Z+
    2150:	93 ff       	sbrs	r25, 3
    2152:	81 91       	ld	r24, Z+
    2154:	7f 01       	movw	r14, r30
    2156:	85 32       	cpi	r24, 0x25	; 37
    2158:	29 f4       	brne	.+10     	; 0x2164 <vfprintf+0x56>
    215a:	b6 01       	movw	r22, r12
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    2162:	e7 cf       	rjmp	.-50     	; 0x2132 <vfprintf+0x24>
    2164:	91 2c       	mov	r9, r1
    2166:	21 2c       	mov	r2, r1
    2168:	31 2c       	mov	r3, r1
    216a:	ff e1       	ldi	r31, 0x1F	; 31
    216c:	f3 15       	cp	r31, r3
    216e:	d8 f0       	brcs	.+54     	; 0x21a6 <vfprintf+0x98>
    2170:	8b 32       	cpi	r24, 0x2B	; 43
    2172:	79 f0       	breq	.+30     	; 0x2192 <vfprintf+0x84>
    2174:	38 f4       	brcc	.+14     	; 0x2184 <vfprintf+0x76>
    2176:	80 32       	cpi	r24, 0x20	; 32
    2178:	79 f0       	breq	.+30     	; 0x2198 <vfprintf+0x8a>
    217a:	83 32       	cpi	r24, 0x23	; 35
    217c:	a1 f4       	brne	.+40     	; 0x21a6 <vfprintf+0x98>
    217e:	23 2d       	mov	r18, r3
    2180:	20 61       	ori	r18, 0x10	; 16
    2182:	1d c0       	rjmp	.+58     	; 0x21be <vfprintf+0xb0>
    2184:	8d 32       	cpi	r24, 0x2D	; 45
    2186:	61 f0       	breq	.+24     	; 0x21a0 <vfprintf+0x92>
    2188:	80 33       	cpi	r24, 0x30	; 48
    218a:	69 f4       	brne	.+26     	; 0x21a6 <vfprintf+0x98>
    218c:	23 2d       	mov	r18, r3
    218e:	21 60       	ori	r18, 0x01	; 1
    2190:	16 c0       	rjmp	.+44     	; 0x21be <vfprintf+0xb0>
    2192:	83 2d       	mov	r24, r3
    2194:	82 60       	ori	r24, 0x02	; 2
    2196:	38 2e       	mov	r3, r24
    2198:	e3 2d       	mov	r30, r3
    219a:	e4 60       	ori	r30, 0x04	; 4
    219c:	3e 2e       	mov	r3, r30
    219e:	2a c0       	rjmp	.+84     	; 0x21f4 <vfprintf+0xe6>
    21a0:	f3 2d       	mov	r31, r3
    21a2:	f8 60       	ori	r31, 0x08	; 8
    21a4:	1d c0       	rjmp	.+58     	; 0x21e0 <vfprintf+0xd2>
    21a6:	37 fc       	sbrc	r3, 7
    21a8:	2d c0       	rjmp	.+90     	; 0x2204 <vfprintf+0xf6>
    21aa:	20 ed       	ldi	r18, 0xD0	; 208
    21ac:	28 0f       	add	r18, r24
    21ae:	2a 30       	cpi	r18, 0x0A	; 10
    21b0:	40 f0       	brcs	.+16     	; 0x21c2 <vfprintf+0xb4>
    21b2:	8e 32       	cpi	r24, 0x2E	; 46
    21b4:	b9 f4       	brne	.+46     	; 0x21e4 <vfprintf+0xd6>
    21b6:	36 fc       	sbrc	r3, 6
    21b8:	81 c1       	rjmp	.+770    	; 0x24bc <vfprintf+0x3ae>
    21ba:	23 2d       	mov	r18, r3
    21bc:	20 64       	ori	r18, 0x40	; 64
    21be:	32 2e       	mov	r3, r18
    21c0:	19 c0       	rjmp	.+50     	; 0x21f4 <vfprintf+0xe6>
    21c2:	36 fe       	sbrs	r3, 6
    21c4:	06 c0       	rjmp	.+12     	; 0x21d2 <vfprintf+0xc4>
    21c6:	8a e0       	ldi	r24, 0x0A	; 10
    21c8:	98 9e       	mul	r9, r24
    21ca:	20 0d       	add	r18, r0
    21cc:	11 24       	eor	r1, r1
    21ce:	92 2e       	mov	r9, r18
    21d0:	11 c0       	rjmp	.+34     	; 0x21f4 <vfprintf+0xe6>
    21d2:	ea e0       	ldi	r30, 0x0A	; 10
    21d4:	2e 9e       	mul	r2, r30
    21d6:	20 0d       	add	r18, r0
    21d8:	11 24       	eor	r1, r1
    21da:	22 2e       	mov	r2, r18
    21dc:	f3 2d       	mov	r31, r3
    21de:	f0 62       	ori	r31, 0x20	; 32
    21e0:	3f 2e       	mov	r3, r31
    21e2:	08 c0       	rjmp	.+16     	; 0x21f4 <vfprintf+0xe6>
    21e4:	8c 36       	cpi	r24, 0x6C	; 108
    21e6:	21 f4       	brne	.+8      	; 0x21f0 <vfprintf+0xe2>
    21e8:	83 2d       	mov	r24, r3
    21ea:	80 68       	ori	r24, 0x80	; 128
    21ec:	38 2e       	mov	r3, r24
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <vfprintf+0xe6>
    21f0:	88 36       	cpi	r24, 0x68	; 104
    21f2:	41 f4       	brne	.+16     	; 0x2204 <vfprintf+0xf6>
    21f4:	f7 01       	movw	r30, r14
    21f6:	93 fd       	sbrc	r25, 3
    21f8:	85 91       	lpm	r24, Z+
    21fa:	93 ff       	sbrs	r25, 3
    21fc:	81 91       	ld	r24, Z+
    21fe:	7f 01       	movw	r14, r30
    2200:	81 11       	cpse	r24, r1
    2202:	b3 cf       	rjmp	.-154    	; 0x216a <vfprintf+0x5c>
    2204:	98 2f       	mov	r25, r24
    2206:	9f 7d       	andi	r25, 0xDF	; 223
    2208:	95 54       	subi	r25, 0x45	; 69
    220a:	93 30       	cpi	r25, 0x03	; 3
    220c:	28 f4       	brcc	.+10     	; 0x2218 <vfprintf+0x10a>
    220e:	0c 5f       	subi	r16, 0xFC	; 252
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
    2212:	9f e3       	ldi	r25, 0x3F	; 63
    2214:	99 83       	std	Y+1, r25	; 0x01
    2216:	0d c0       	rjmp	.+26     	; 0x2232 <vfprintf+0x124>
    2218:	83 36       	cpi	r24, 0x63	; 99
    221a:	31 f0       	breq	.+12     	; 0x2228 <vfprintf+0x11a>
    221c:	83 37       	cpi	r24, 0x73	; 115
    221e:	71 f0       	breq	.+28     	; 0x223c <vfprintf+0x12e>
    2220:	83 35       	cpi	r24, 0x53	; 83
    2222:	09 f0       	breq	.+2      	; 0x2226 <vfprintf+0x118>
    2224:	59 c0       	rjmp	.+178    	; 0x22d8 <vfprintf+0x1ca>
    2226:	21 c0       	rjmp	.+66     	; 0x226a <vfprintf+0x15c>
    2228:	f8 01       	movw	r30, r16
    222a:	80 81       	ld	r24, Z
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	0e 5f       	subi	r16, 0xFE	; 254
    2230:	1f 4f       	sbci	r17, 0xFF	; 255
    2232:	88 24       	eor	r8, r8
    2234:	83 94       	inc	r8
    2236:	91 2c       	mov	r9, r1
    2238:	53 01       	movw	r10, r6
    223a:	13 c0       	rjmp	.+38     	; 0x2262 <vfprintf+0x154>
    223c:	28 01       	movw	r4, r16
    223e:	f2 e0       	ldi	r31, 0x02	; 2
    2240:	4f 0e       	add	r4, r31
    2242:	51 1c       	adc	r5, r1
    2244:	f8 01       	movw	r30, r16
    2246:	a0 80       	ld	r10, Z
    2248:	b1 80       	ldd	r11, Z+1	; 0x01
    224a:	36 fe       	sbrs	r3, 6
    224c:	03 c0       	rjmp	.+6      	; 0x2254 <vfprintf+0x146>
    224e:	69 2d       	mov	r22, r9
    2250:	70 e0       	ldi	r23, 0x00	; 0
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <vfprintf+0x14a>
    2254:	6f ef       	ldi	r22, 0xFF	; 255
    2256:	7f ef       	ldi	r23, 0xFF	; 255
    2258:	c5 01       	movw	r24, r10
    225a:	0e 94 73 12 	call	0x24e6	; 0x24e6 <strnlen>
    225e:	4c 01       	movw	r8, r24
    2260:	82 01       	movw	r16, r4
    2262:	f3 2d       	mov	r31, r3
    2264:	ff 77       	andi	r31, 0x7F	; 127
    2266:	3f 2e       	mov	r3, r31
    2268:	16 c0       	rjmp	.+44     	; 0x2296 <vfprintf+0x188>
    226a:	28 01       	movw	r4, r16
    226c:	22 e0       	ldi	r18, 0x02	; 2
    226e:	42 0e       	add	r4, r18
    2270:	51 1c       	adc	r5, r1
    2272:	f8 01       	movw	r30, r16
    2274:	a0 80       	ld	r10, Z
    2276:	b1 80       	ldd	r11, Z+1	; 0x01
    2278:	36 fe       	sbrs	r3, 6
    227a:	03 c0       	rjmp	.+6      	; 0x2282 <vfprintf+0x174>
    227c:	69 2d       	mov	r22, r9
    227e:	70 e0       	ldi	r23, 0x00	; 0
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <vfprintf+0x178>
    2282:	6f ef       	ldi	r22, 0xFF	; 255
    2284:	7f ef       	ldi	r23, 0xFF	; 255
    2286:	c5 01       	movw	r24, r10
    2288:	0e 94 68 12 	call	0x24d0	; 0x24d0 <strnlen_P>
    228c:	4c 01       	movw	r8, r24
    228e:	f3 2d       	mov	r31, r3
    2290:	f0 68       	ori	r31, 0x80	; 128
    2292:	3f 2e       	mov	r3, r31
    2294:	82 01       	movw	r16, r4
    2296:	33 fc       	sbrc	r3, 3
    2298:	1b c0       	rjmp	.+54     	; 0x22d0 <vfprintf+0x1c2>
    229a:	82 2d       	mov	r24, r2
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	88 16       	cp	r8, r24
    22a0:	99 06       	cpc	r9, r25
    22a2:	b0 f4       	brcc	.+44     	; 0x22d0 <vfprintf+0x1c2>
    22a4:	b6 01       	movw	r22, r12
    22a6:	80 e2       	ldi	r24, 0x20	; 32
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    22ae:	2a 94       	dec	r2
    22b0:	f4 cf       	rjmp	.-24     	; 0x229a <vfprintf+0x18c>
    22b2:	f5 01       	movw	r30, r10
    22b4:	37 fc       	sbrc	r3, 7
    22b6:	85 91       	lpm	r24, Z+
    22b8:	37 fe       	sbrs	r3, 7
    22ba:	81 91       	ld	r24, Z+
    22bc:	5f 01       	movw	r10, r30
    22be:	b6 01       	movw	r22, r12
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    22c6:	21 10       	cpse	r2, r1
    22c8:	2a 94       	dec	r2
    22ca:	21 e0       	ldi	r18, 0x01	; 1
    22cc:	82 1a       	sub	r8, r18
    22ce:	91 08       	sbc	r9, r1
    22d0:	81 14       	cp	r8, r1
    22d2:	91 04       	cpc	r9, r1
    22d4:	71 f7       	brne	.-36     	; 0x22b2 <vfprintf+0x1a4>
    22d6:	e8 c0       	rjmp	.+464    	; 0x24a8 <vfprintf+0x39a>
    22d8:	84 36       	cpi	r24, 0x64	; 100
    22da:	11 f0       	breq	.+4      	; 0x22e0 <vfprintf+0x1d2>
    22dc:	89 36       	cpi	r24, 0x69	; 105
    22de:	41 f5       	brne	.+80     	; 0x2330 <vfprintf+0x222>
    22e0:	f8 01       	movw	r30, r16
    22e2:	37 fe       	sbrs	r3, 7
    22e4:	07 c0       	rjmp	.+14     	; 0x22f4 <vfprintf+0x1e6>
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	0c 5f       	subi	r16, 0xFC	; 252
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
    22f2:	08 c0       	rjmp	.+16     	; 0x2304 <vfprintf+0x1f6>
    22f4:	60 81       	ld	r22, Z
    22f6:	71 81       	ldd	r23, Z+1	; 0x01
    22f8:	07 2e       	mov	r0, r23
    22fa:	00 0c       	add	r0, r0
    22fc:	88 0b       	sbc	r24, r24
    22fe:	99 0b       	sbc	r25, r25
    2300:	0e 5f       	subi	r16, 0xFE	; 254
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	f3 2d       	mov	r31, r3
    2306:	ff 76       	andi	r31, 0x6F	; 111
    2308:	3f 2e       	mov	r3, r31
    230a:	97 ff       	sbrs	r25, 7
    230c:	09 c0       	rjmp	.+18     	; 0x2320 <vfprintf+0x212>
    230e:	90 95       	com	r25
    2310:	80 95       	com	r24
    2312:	70 95       	com	r23
    2314:	61 95       	neg	r22
    2316:	7f 4f       	sbci	r23, 0xFF	; 255
    2318:	8f 4f       	sbci	r24, 0xFF	; 255
    231a:	9f 4f       	sbci	r25, 0xFF	; 255
    231c:	f0 68       	ori	r31, 0x80	; 128
    231e:	3f 2e       	mov	r3, r31
    2320:	2a e0       	ldi	r18, 0x0A	; 10
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	a3 01       	movw	r20, r6
    2326:	0e 94 ba 12 	call	0x2574	; 0x2574 <__ultoa_invert>
    232a:	88 2e       	mov	r8, r24
    232c:	86 18       	sub	r8, r6
    232e:	45 c0       	rjmp	.+138    	; 0x23ba <vfprintf+0x2ac>
    2330:	85 37       	cpi	r24, 0x75	; 117
    2332:	31 f4       	brne	.+12     	; 0x2340 <vfprintf+0x232>
    2334:	23 2d       	mov	r18, r3
    2336:	2f 7e       	andi	r18, 0xEF	; 239
    2338:	b2 2e       	mov	r11, r18
    233a:	2a e0       	ldi	r18, 0x0A	; 10
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	25 c0       	rjmp	.+74     	; 0x238a <vfprintf+0x27c>
    2340:	93 2d       	mov	r25, r3
    2342:	99 7f       	andi	r25, 0xF9	; 249
    2344:	b9 2e       	mov	r11, r25
    2346:	8f 36       	cpi	r24, 0x6F	; 111
    2348:	c1 f0       	breq	.+48     	; 0x237a <vfprintf+0x26c>
    234a:	18 f4       	brcc	.+6      	; 0x2352 <vfprintf+0x244>
    234c:	88 35       	cpi	r24, 0x58	; 88
    234e:	79 f0       	breq	.+30     	; 0x236e <vfprintf+0x260>
    2350:	b5 c0       	rjmp	.+362    	; 0x24bc <vfprintf+0x3ae>
    2352:	80 37       	cpi	r24, 0x70	; 112
    2354:	19 f0       	breq	.+6      	; 0x235c <vfprintf+0x24e>
    2356:	88 37       	cpi	r24, 0x78	; 120
    2358:	21 f0       	breq	.+8      	; 0x2362 <vfprintf+0x254>
    235a:	b0 c0       	rjmp	.+352    	; 0x24bc <vfprintf+0x3ae>
    235c:	e9 2f       	mov	r30, r25
    235e:	e0 61       	ori	r30, 0x10	; 16
    2360:	be 2e       	mov	r11, r30
    2362:	b4 fe       	sbrs	r11, 4
    2364:	0d c0       	rjmp	.+26     	; 0x2380 <vfprintf+0x272>
    2366:	fb 2d       	mov	r31, r11
    2368:	f4 60       	ori	r31, 0x04	; 4
    236a:	bf 2e       	mov	r11, r31
    236c:	09 c0       	rjmp	.+18     	; 0x2380 <vfprintf+0x272>
    236e:	34 fe       	sbrs	r3, 4
    2370:	0a c0       	rjmp	.+20     	; 0x2386 <vfprintf+0x278>
    2372:	29 2f       	mov	r18, r25
    2374:	26 60       	ori	r18, 0x06	; 6
    2376:	b2 2e       	mov	r11, r18
    2378:	06 c0       	rjmp	.+12     	; 0x2386 <vfprintf+0x278>
    237a:	28 e0       	ldi	r18, 0x08	; 8
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	05 c0       	rjmp	.+10     	; 0x238a <vfprintf+0x27c>
    2380:	20 e1       	ldi	r18, 0x10	; 16
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	02 c0       	rjmp	.+4      	; 0x238a <vfprintf+0x27c>
    2386:	20 e1       	ldi	r18, 0x10	; 16
    2388:	32 e0       	ldi	r19, 0x02	; 2
    238a:	f8 01       	movw	r30, r16
    238c:	b7 fe       	sbrs	r11, 7
    238e:	07 c0       	rjmp	.+14     	; 0x239e <vfprintf+0x290>
    2390:	60 81       	ld	r22, Z
    2392:	71 81       	ldd	r23, Z+1	; 0x01
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	0c 5f       	subi	r16, 0xFC	; 252
    239a:	1f 4f       	sbci	r17, 0xFF	; 255
    239c:	06 c0       	rjmp	.+12     	; 0x23aa <vfprintf+0x29c>
    239e:	60 81       	ld	r22, Z
    23a0:	71 81       	ldd	r23, Z+1	; 0x01
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	0e 5f       	subi	r16, 0xFE	; 254
    23a8:	1f 4f       	sbci	r17, 0xFF	; 255
    23aa:	a3 01       	movw	r20, r6
    23ac:	0e 94 ba 12 	call	0x2574	; 0x2574 <__ultoa_invert>
    23b0:	88 2e       	mov	r8, r24
    23b2:	86 18       	sub	r8, r6
    23b4:	fb 2d       	mov	r31, r11
    23b6:	ff 77       	andi	r31, 0x7F	; 127
    23b8:	3f 2e       	mov	r3, r31
    23ba:	36 fe       	sbrs	r3, 6
    23bc:	0d c0       	rjmp	.+26     	; 0x23d8 <vfprintf+0x2ca>
    23be:	23 2d       	mov	r18, r3
    23c0:	2e 7f       	andi	r18, 0xFE	; 254
    23c2:	a2 2e       	mov	r10, r18
    23c4:	89 14       	cp	r8, r9
    23c6:	58 f4       	brcc	.+22     	; 0x23de <vfprintf+0x2d0>
    23c8:	34 fe       	sbrs	r3, 4
    23ca:	0b c0       	rjmp	.+22     	; 0x23e2 <vfprintf+0x2d4>
    23cc:	32 fc       	sbrc	r3, 2
    23ce:	09 c0       	rjmp	.+18     	; 0x23e2 <vfprintf+0x2d4>
    23d0:	83 2d       	mov	r24, r3
    23d2:	8e 7e       	andi	r24, 0xEE	; 238
    23d4:	a8 2e       	mov	r10, r24
    23d6:	05 c0       	rjmp	.+10     	; 0x23e2 <vfprintf+0x2d4>
    23d8:	b8 2c       	mov	r11, r8
    23da:	a3 2c       	mov	r10, r3
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <vfprintf+0x2d6>
    23de:	b8 2c       	mov	r11, r8
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <vfprintf+0x2d6>
    23e2:	b9 2c       	mov	r11, r9
    23e4:	a4 fe       	sbrs	r10, 4
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <vfprintf+0x2f8>
    23e8:	fe 01       	movw	r30, r28
    23ea:	e8 0d       	add	r30, r8
    23ec:	f1 1d       	adc	r31, r1
    23ee:	80 81       	ld	r24, Z
    23f0:	80 33       	cpi	r24, 0x30	; 48
    23f2:	21 f4       	brne	.+8      	; 0x23fc <vfprintf+0x2ee>
    23f4:	9a 2d       	mov	r25, r10
    23f6:	99 7e       	andi	r25, 0xE9	; 233
    23f8:	a9 2e       	mov	r10, r25
    23fa:	09 c0       	rjmp	.+18     	; 0x240e <vfprintf+0x300>
    23fc:	a2 fe       	sbrs	r10, 2
    23fe:	06 c0       	rjmp	.+12     	; 0x240c <vfprintf+0x2fe>
    2400:	b3 94       	inc	r11
    2402:	b3 94       	inc	r11
    2404:	04 c0       	rjmp	.+8      	; 0x240e <vfprintf+0x300>
    2406:	8a 2d       	mov	r24, r10
    2408:	86 78       	andi	r24, 0x86	; 134
    240a:	09 f0       	breq	.+2      	; 0x240e <vfprintf+0x300>
    240c:	b3 94       	inc	r11
    240e:	a3 fc       	sbrc	r10, 3
    2410:	11 c0       	rjmp	.+34     	; 0x2434 <vfprintf+0x326>
    2412:	a0 fe       	sbrs	r10, 0
    2414:	06 c0       	rjmp	.+12     	; 0x2422 <vfprintf+0x314>
    2416:	b2 14       	cp	r11, r2
    2418:	88 f4       	brcc	.+34     	; 0x243c <vfprintf+0x32e>
    241a:	28 0c       	add	r2, r8
    241c:	92 2c       	mov	r9, r2
    241e:	9b 18       	sub	r9, r11
    2420:	0e c0       	rjmp	.+28     	; 0x243e <vfprintf+0x330>
    2422:	b2 14       	cp	r11, r2
    2424:	60 f4       	brcc	.+24     	; 0x243e <vfprintf+0x330>
    2426:	b6 01       	movw	r22, r12
    2428:	80 e2       	ldi	r24, 0x20	; 32
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    2430:	b3 94       	inc	r11
    2432:	f7 cf       	rjmp	.-18     	; 0x2422 <vfprintf+0x314>
    2434:	b2 14       	cp	r11, r2
    2436:	18 f4       	brcc	.+6      	; 0x243e <vfprintf+0x330>
    2438:	2b 18       	sub	r2, r11
    243a:	02 c0       	rjmp	.+4      	; 0x2440 <vfprintf+0x332>
    243c:	98 2c       	mov	r9, r8
    243e:	21 2c       	mov	r2, r1
    2440:	a4 fe       	sbrs	r10, 4
    2442:	10 c0       	rjmp	.+32     	; 0x2464 <vfprintf+0x356>
    2444:	b6 01       	movw	r22, r12
    2446:	80 e3       	ldi	r24, 0x30	; 48
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    244e:	a2 fe       	sbrs	r10, 2
    2450:	17 c0       	rjmp	.+46     	; 0x2480 <vfprintf+0x372>
    2452:	a1 fc       	sbrc	r10, 1
    2454:	03 c0       	rjmp	.+6      	; 0x245c <vfprintf+0x34e>
    2456:	88 e7       	ldi	r24, 0x78	; 120
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <vfprintf+0x352>
    245c:	88 e5       	ldi	r24, 0x58	; 88
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	b6 01       	movw	r22, r12
    2462:	0c c0       	rjmp	.+24     	; 0x247c <vfprintf+0x36e>
    2464:	8a 2d       	mov	r24, r10
    2466:	86 78       	andi	r24, 0x86	; 134
    2468:	59 f0       	breq	.+22     	; 0x2480 <vfprintf+0x372>
    246a:	a1 fe       	sbrs	r10, 1
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <vfprintf+0x364>
    246e:	8b e2       	ldi	r24, 0x2B	; 43
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <vfprintf+0x366>
    2472:	80 e2       	ldi	r24, 0x20	; 32
    2474:	a7 fc       	sbrc	r10, 7
    2476:	8d e2       	ldi	r24, 0x2D	; 45
    2478:	b6 01       	movw	r22, r12
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    2480:	89 14       	cp	r8, r9
    2482:	38 f4       	brcc	.+14     	; 0x2492 <vfprintf+0x384>
    2484:	b6 01       	movw	r22, r12
    2486:	80 e3       	ldi	r24, 0x30	; 48
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    248e:	9a 94       	dec	r9
    2490:	f7 cf       	rjmp	.-18     	; 0x2480 <vfprintf+0x372>
    2492:	8a 94       	dec	r8
    2494:	f3 01       	movw	r30, r6
    2496:	e8 0d       	add	r30, r8
    2498:	f1 1d       	adc	r31, r1
    249a:	80 81       	ld	r24, Z
    249c:	b6 01       	movw	r22, r12
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    24a4:	81 10       	cpse	r8, r1
    24a6:	f5 cf       	rjmp	.-22     	; 0x2492 <vfprintf+0x384>
    24a8:	22 20       	and	r2, r2
    24aa:	09 f4       	brne	.+2      	; 0x24ae <vfprintf+0x3a0>
    24ac:	42 ce       	rjmp	.-892    	; 0x2132 <vfprintf+0x24>
    24ae:	b6 01       	movw	r22, r12
    24b0:	80 e2       	ldi	r24, 0x20	; 32
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	0e 94 7e 12 	call	0x24fc	; 0x24fc <fputc>
    24b8:	2a 94       	dec	r2
    24ba:	f6 cf       	rjmp	.-20     	; 0x24a8 <vfprintf+0x39a>
    24bc:	f6 01       	movw	r30, r12
    24be:	86 81       	ldd	r24, Z+6	; 0x06
    24c0:	97 81       	ldd	r25, Z+7	; 0x07
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <vfprintf+0x3ba>
    24c4:	8f ef       	ldi	r24, 0xFF	; 255
    24c6:	9f ef       	ldi	r25, 0xFF	; 255
    24c8:	2b 96       	adiw	r28, 0x0b	; 11
    24ca:	e2 e1       	ldi	r30, 0x12	; 18
    24cc:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__>

000024d0 <strnlen_P>:
    24d0:	fc 01       	movw	r30, r24
    24d2:	05 90       	lpm	r0, Z+
    24d4:	61 50       	subi	r22, 0x01	; 1
    24d6:	70 40       	sbci	r23, 0x00	; 0
    24d8:	01 10       	cpse	r0, r1
    24da:	d8 f7       	brcc	.-10     	; 0x24d2 <strnlen_P+0x2>
    24dc:	80 95       	com	r24
    24de:	90 95       	com	r25
    24e0:	8e 0f       	add	r24, r30
    24e2:	9f 1f       	adc	r25, r31
    24e4:	08 95       	ret

000024e6 <strnlen>:
    24e6:	fc 01       	movw	r30, r24
    24e8:	61 50       	subi	r22, 0x01	; 1
    24ea:	70 40       	sbci	r23, 0x00	; 0
    24ec:	01 90       	ld	r0, Z+
    24ee:	01 10       	cpse	r0, r1
    24f0:	d8 f7       	brcc	.-10     	; 0x24e8 <strnlen+0x2>
    24f2:	80 95       	com	r24
    24f4:	90 95       	com	r25
    24f6:	8e 0f       	add	r24, r30
    24f8:	9f 1f       	adc	r25, r31
    24fa:	08 95       	ret

000024fc <fputc>:
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	fb 01       	movw	r30, r22
    2506:	23 81       	ldd	r18, Z+3	; 0x03
    2508:	21 fd       	sbrc	r18, 1
    250a:	03 c0       	rjmp	.+6      	; 0x2512 <fputc+0x16>
    250c:	8f ef       	ldi	r24, 0xFF	; 255
    250e:	9f ef       	ldi	r25, 0xFF	; 255
    2510:	2c c0       	rjmp	.+88     	; 0x256a <fputc+0x6e>
    2512:	22 ff       	sbrs	r18, 2
    2514:	16 c0       	rjmp	.+44     	; 0x2542 <fputc+0x46>
    2516:	46 81       	ldd	r20, Z+6	; 0x06
    2518:	57 81       	ldd	r21, Z+7	; 0x07
    251a:	24 81       	ldd	r18, Z+4	; 0x04
    251c:	35 81       	ldd	r19, Z+5	; 0x05
    251e:	42 17       	cp	r20, r18
    2520:	53 07       	cpc	r21, r19
    2522:	44 f4       	brge	.+16     	; 0x2534 <fputc+0x38>
    2524:	a0 81       	ld	r26, Z
    2526:	b1 81       	ldd	r27, Z+1	; 0x01
    2528:	9d 01       	movw	r18, r26
    252a:	2f 5f       	subi	r18, 0xFF	; 255
    252c:	3f 4f       	sbci	r19, 0xFF	; 255
    252e:	31 83       	std	Z+1, r19	; 0x01
    2530:	20 83       	st	Z, r18
    2532:	8c 93       	st	X, r24
    2534:	26 81       	ldd	r18, Z+6	; 0x06
    2536:	37 81       	ldd	r19, Z+7	; 0x07
    2538:	2f 5f       	subi	r18, 0xFF	; 255
    253a:	3f 4f       	sbci	r19, 0xFF	; 255
    253c:	37 83       	std	Z+7, r19	; 0x07
    253e:	26 83       	std	Z+6, r18	; 0x06
    2540:	14 c0       	rjmp	.+40     	; 0x256a <fputc+0x6e>
    2542:	8b 01       	movw	r16, r22
    2544:	ec 01       	movw	r28, r24
    2546:	fb 01       	movw	r30, r22
    2548:	00 84       	ldd	r0, Z+8	; 0x08
    254a:	f1 85       	ldd	r31, Z+9	; 0x09
    254c:	e0 2d       	mov	r30, r0
    254e:	09 95       	icall
    2550:	89 2b       	or	r24, r25
    2552:	e1 f6       	brne	.-72     	; 0x250c <fputc+0x10>
    2554:	d8 01       	movw	r26, r16
    2556:	16 96       	adiw	r26, 0x06	; 6
    2558:	8d 91       	ld	r24, X+
    255a:	9c 91       	ld	r25, X
    255c:	17 97       	sbiw	r26, 0x07	; 7
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	17 96       	adiw	r26, 0x07	; 7
    2562:	9c 93       	st	X, r25
    2564:	8e 93       	st	-X, r24
    2566:	16 97       	sbiw	r26, 0x06	; 6
    2568:	ce 01       	movw	r24, r28
    256a:	df 91       	pop	r29
    256c:	cf 91       	pop	r28
    256e:	1f 91       	pop	r17
    2570:	0f 91       	pop	r16
    2572:	08 95       	ret

00002574 <__ultoa_invert>:
    2574:	fa 01       	movw	r30, r20
    2576:	aa 27       	eor	r26, r26
    2578:	28 30       	cpi	r18, 0x08	; 8
    257a:	51 f1       	breq	.+84     	; 0x25d0 <__ultoa_invert+0x5c>
    257c:	20 31       	cpi	r18, 0x10	; 16
    257e:	81 f1       	breq	.+96     	; 0x25e0 <__ultoa_invert+0x6c>
    2580:	e8 94       	clt
    2582:	6f 93       	push	r22
    2584:	6e 7f       	andi	r22, 0xFE	; 254
    2586:	6e 5f       	subi	r22, 0xFE	; 254
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	8f 4f       	sbci	r24, 0xFF	; 255
    258c:	9f 4f       	sbci	r25, 0xFF	; 255
    258e:	af 4f       	sbci	r26, 0xFF	; 255
    2590:	b1 e0       	ldi	r27, 0x01	; 1
    2592:	3e d0       	rcall	.+124    	; 0x2610 <__ultoa_invert+0x9c>
    2594:	b4 e0       	ldi	r27, 0x04	; 4
    2596:	3c d0       	rcall	.+120    	; 0x2610 <__ultoa_invert+0x9c>
    2598:	67 0f       	add	r22, r23
    259a:	78 1f       	adc	r23, r24
    259c:	89 1f       	adc	r24, r25
    259e:	9a 1f       	adc	r25, r26
    25a0:	a1 1d       	adc	r26, r1
    25a2:	68 0f       	add	r22, r24
    25a4:	79 1f       	adc	r23, r25
    25a6:	8a 1f       	adc	r24, r26
    25a8:	91 1d       	adc	r25, r1
    25aa:	a1 1d       	adc	r26, r1
    25ac:	6a 0f       	add	r22, r26
    25ae:	71 1d       	adc	r23, r1
    25b0:	81 1d       	adc	r24, r1
    25b2:	91 1d       	adc	r25, r1
    25b4:	a1 1d       	adc	r26, r1
    25b6:	20 d0       	rcall	.+64     	; 0x25f8 <__ultoa_invert+0x84>
    25b8:	09 f4       	brne	.+2      	; 0x25bc <__ultoa_invert+0x48>
    25ba:	68 94       	set
    25bc:	3f 91       	pop	r19
    25be:	2a e0       	ldi	r18, 0x0A	; 10
    25c0:	26 9f       	mul	r18, r22
    25c2:	11 24       	eor	r1, r1
    25c4:	30 19       	sub	r19, r0
    25c6:	30 5d       	subi	r19, 0xD0	; 208
    25c8:	31 93       	st	Z+, r19
    25ca:	de f6       	brtc	.-74     	; 0x2582 <__ultoa_invert+0xe>
    25cc:	cf 01       	movw	r24, r30
    25ce:	08 95       	ret
    25d0:	46 2f       	mov	r20, r22
    25d2:	47 70       	andi	r20, 0x07	; 7
    25d4:	40 5d       	subi	r20, 0xD0	; 208
    25d6:	41 93       	st	Z+, r20
    25d8:	b3 e0       	ldi	r27, 0x03	; 3
    25da:	0f d0       	rcall	.+30     	; 0x25fa <__ultoa_invert+0x86>
    25dc:	c9 f7       	brne	.-14     	; 0x25d0 <__ultoa_invert+0x5c>
    25de:	f6 cf       	rjmp	.-20     	; 0x25cc <__ultoa_invert+0x58>
    25e0:	46 2f       	mov	r20, r22
    25e2:	4f 70       	andi	r20, 0x0F	; 15
    25e4:	40 5d       	subi	r20, 0xD0	; 208
    25e6:	4a 33       	cpi	r20, 0x3A	; 58
    25e8:	18 f0       	brcs	.+6      	; 0x25f0 <__ultoa_invert+0x7c>
    25ea:	49 5d       	subi	r20, 0xD9	; 217
    25ec:	31 fd       	sbrc	r19, 1
    25ee:	40 52       	subi	r20, 0x20	; 32
    25f0:	41 93       	st	Z+, r20
    25f2:	02 d0       	rcall	.+4      	; 0x25f8 <__ultoa_invert+0x84>
    25f4:	a9 f7       	brne	.-22     	; 0x25e0 <__ultoa_invert+0x6c>
    25f6:	ea cf       	rjmp	.-44     	; 0x25cc <__ultoa_invert+0x58>
    25f8:	b4 e0       	ldi	r27, 0x04	; 4
    25fa:	a6 95       	lsr	r26
    25fc:	97 95       	ror	r25
    25fe:	87 95       	ror	r24
    2600:	77 95       	ror	r23
    2602:	67 95       	ror	r22
    2604:	ba 95       	dec	r27
    2606:	c9 f7       	brne	.-14     	; 0x25fa <__ultoa_invert+0x86>
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	61 05       	cpc	r22, r1
    260c:	71 05       	cpc	r23, r1
    260e:	08 95       	ret
    2610:	9b 01       	movw	r18, r22
    2612:	ac 01       	movw	r20, r24
    2614:	0a 2e       	mov	r0, r26
    2616:	06 94       	lsr	r0
    2618:	57 95       	ror	r21
    261a:	47 95       	ror	r20
    261c:	37 95       	ror	r19
    261e:	27 95       	ror	r18
    2620:	ba 95       	dec	r27
    2622:	c9 f7       	brne	.-14     	; 0x2616 <__ultoa_invert+0xa2>
    2624:	62 0f       	add	r22, r18
    2626:	73 1f       	adc	r23, r19
    2628:	84 1f       	adc	r24, r20
    262a:	95 1f       	adc	r25, r21
    262c:	a0 1d       	adc	r26, r0
    262e:	08 95       	ret

00002630 <eeprom_read_byte>:
    2630:	f9 99       	sbic	0x1f, 1	; 31
    2632:	fe cf       	rjmp	.-4      	; 0x2630 <eeprom_read_byte>
    2634:	92 bd       	out	0x22, r25	; 34
    2636:	81 bd       	out	0x21, r24	; 33
    2638:	f8 9a       	sbi	0x1f, 0	; 31
    263a:	99 27       	eor	r25, r25
    263c:	80 b5       	in	r24, 0x20	; 32
    263e:	08 95       	ret

00002640 <eeprom_write_byte>:
    2640:	26 2f       	mov	r18, r22

00002642 <eeprom_write_r18>:
    2642:	f9 99       	sbic	0x1f, 1	; 31
    2644:	fe cf       	rjmp	.-4      	; 0x2642 <eeprom_write_r18>
    2646:	1f ba       	out	0x1f, r1	; 31
    2648:	92 bd       	out	0x22, r25	; 34
    264a:	81 bd       	out	0x21, r24	; 33
    264c:	20 bd       	out	0x20, r18	; 32
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	f8 94       	cli
    2652:	fa 9a       	sbi	0x1f, 2	; 31
    2654:	f9 9a       	sbi	0x1f, 1	; 31
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	01 96       	adiw	r24, 0x01	; 1
    265a:	08 95       	ret

0000265c <__prologue_saves__>:
    265c:	2f 92       	push	r2
    265e:	3f 92       	push	r3
    2660:	4f 92       	push	r4
    2662:	5f 92       	push	r5
    2664:	6f 92       	push	r6
    2666:	7f 92       	push	r7
    2668:	8f 92       	push	r8
    266a:	9f 92       	push	r9
    266c:	af 92       	push	r10
    266e:	bf 92       	push	r11
    2670:	cf 92       	push	r12
    2672:	df 92       	push	r13
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	ca 1b       	sub	r28, r26
    2686:	db 0b       	sbc	r29, r27
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	09 94       	ijmp

00002694 <__epilogue_restores__>:
    2694:	2a 88       	ldd	r2, Y+18	; 0x12
    2696:	39 88       	ldd	r3, Y+17	; 0x11
    2698:	48 88       	ldd	r4, Y+16	; 0x10
    269a:	5f 84       	ldd	r5, Y+15	; 0x0f
    269c:	6e 84       	ldd	r6, Y+14	; 0x0e
    269e:	7d 84       	ldd	r7, Y+13	; 0x0d
    26a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    26a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    26a6:	b9 84       	ldd	r11, Y+9	; 0x09
    26a8:	c8 84       	ldd	r12, Y+8	; 0x08
    26aa:	df 80       	ldd	r13, Y+7	; 0x07
    26ac:	ee 80       	ldd	r14, Y+6	; 0x06
    26ae:	fd 80       	ldd	r15, Y+5	; 0x05
    26b0:	0c 81       	ldd	r16, Y+4	; 0x04
    26b2:	1b 81       	ldd	r17, Y+3	; 0x03
    26b4:	aa 81       	ldd	r26, Y+2	; 0x02
    26b6:	b9 81       	ldd	r27, Y+1	; 0x01
    26b8:	ce 0f       	add	r28, r30
    26ba:	d1 1d       	adc	r29, r1
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	ed 01       	movw	r28, r26
    26c8:	08 95       	ret

000026ca <_exit>:
    26ca:	f8 94       	cli

000026cc <__stop_program>:
    26cc:	ff cf       	rjmp	.-2      	; 0x26cc <__stop_program>
