
ArduinoLockOpener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00001708  0000179c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001708  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  0080024c  0080024c  000018e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d4e4  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002dfe  00000000  00000000  0000f314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003497  00000000  00000000  00012112  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e1c  00000000  00000000  000155ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f3e  00000000  00000000  000163c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000531b  00000000  00000000  00019306  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  0001e621  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_1>
       8:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <__vector_2>
       c:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__vector_3>
      10:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__vector_3>
      14:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 ef 03 	jmp	0x7de	; 0x7de <__vector_7>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 9a 04 	jmp	0x934	; 0x934 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_18>
      4c:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	Address 0x00000068 is out of bounds.
.word	0xffff	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	50 02       	muls	r21, r16
      c6:	bf 02       	muls	r27, r31

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	12 e0       	ldi	r17, 0x02	; 2
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e8 e0       	ldi	r30, 0x08	; 8
      dc:	f7 e1       	ldi	r31, 0x17	; 23
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ac 34       	cpi	r26, 0x4C	; 76
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	24 e0       	ldi	r18, 0x04	; 4
      ec:	ac e4       	ldi	r26, 0x4C	; 76
      ee:	b2 e0       	ldi	r27, 0x02	; 2
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a3 30       	cpi	r26, 0x03	; 3
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c4 e6       	ldi	r28, 0x64	; 100
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__tablejump2__>
     10a:	c2 36       	cpi	r28, 0x62	; 98
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 cb 02 	call	0x596	; 0x596 <main>
     114:	0c 94 82 0b 	jmp	0x1704	; 0x1704 <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     11c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     11e:	91 8d       	ldd	r25, Z+25	; 0x19
     120:	22 8d       	ldd	r18, Z+26	; 0x1a
     122:	89 2f       	mov	r24, r25
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	80 5c       	subi	r24, 0xC0	; 192
     128:	9f 4f       	sbci	r25, 0xFF	; 255
     12a:	82 1b       	sub	r24, r18
     12c:	91 09       	sbc	r25, r1
}
     12e:	8f 73       	andi	r24, 0x3F	; 63
     130:	99 27       	eor	r25, r25
     132:	08 95       	ret

00000134 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     134:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     136:	91 8d       	ldd	r25, Z+25	; 0x19
     138:	82 8d       	ldd	r24, Z+26	; 0x1a
     13a:	98 17       	cp	r25, r24
     13c:	31 f0       	breq	.+12     	; 0x14a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     13e:	82 8d       	ldd	r24, Z+26	; 0x1a
     140:	e8 0f       	add	r30, r24
     142:	f1 1d       	adc	r31, r1
     144:	85 8d       	ldd	r24, Z+29	; 0x1d
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     14e:	08 95       	ret

00000150 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     150:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     152:	91 8d       	ldd	r25, Z+25	; 0x19
     154:	82 8d       	ldd	r24, Z+26	; 0x1a
     156:	98 17       	cp	r25, r24
     158:	61 f0       	breq	.+24     	; 0x172 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     15a:	82 8d       	ldd	r24, Z+26	; 0x1a
     15c:	df 01       	movw	r26, r30
     15e:	a8 0f       	add	r26, r24
     160:	b1 1d       	adc	r27, r1
     162:	5d 96       	adiw	r26, 0x1d	; 29
     164:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     166:	92 8d       	ldd	r25, Z+26	; 0x1a
     168:	9f 5f       	subi	r25, 0xFF	; 255
     16a:	9f 73       	andi	r25, 0x3F	; 63
     16c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     172:	8f ef       	ldi	r24, 0xFF	; 255
     174:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     176:	08 95       	ret

00000178 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     178:	fc 01       	movw	r30, r24
     17a:	23 8d       	ldd	r18, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     17c:	34 8d       	ldd	r19, Z+28	; 0x1c
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     17e:	23 17       	cp	r18, r19
     180:	38 f0       	brcs	.+14     	; 0x190 <_ZN14HardwareSerial17availableForWriteEv+0x18>
     182:	8f e3       	ldi	r24, 0x3F	; 63
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	82 1b       	sub	r24, r18
     188:	91 09       	sbc	r25, r1
     18a:	83 0f       	add	r24, r19
     18c:	91 1d       	adc	r25, r1
     18e:	08 95       	ret
  return tail - head - 1;
     190:	83 2f       	mov	r24, r19
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	82 1b       	sub	r24, r18
     196:	91 09       	sbc	r25, r1
     198:	01 97       	sbiw	r24, 0x01	; 1
}
     19a:	08 95       	ret

0000019c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     19c:	86 e4       	ldi	r24, 0x46	; 70
     19e:	92 e0       	ldi	r25, 0x02	; 2
     1a0:	89 2b       	or	r24, r25
     1a2:	49 f0       	breq	.+18     	; 0x1b6 <_Z14serialEventRunv+0x1a>
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	89 2b       	or	r24, r25
     1aa:	29 f0       	breq	.+10     	; 0x1b6 <_Z14serialEventRunv+0x1a>
     1ac:	0e 94 46 02 	call	0x48c	; 0x48c <_Z17Serial0_availablev>
     1b0:	81 11       	cpse	r24, r1
     1b2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     1b6:	08 95       	ret

000001b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     1b8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	df 01       	movw	r26, r30
     1be:	a8 0f       	add	r26, r24
     1c0:	b1 1d       	adc	r27, r1
     1c2:	a3 5a       	subi	r26, 0xA3	; 163
     1c4:	bf 4f       	sbci	r27, 0xFF	; 255
     1c6:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     1c8:	24 8d       	ldd	r18, Z+28	; 0x1c
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	2f 5f       	subi	r18, 0xFF	; 255
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
     1d0:	2f 73       	andi	r18, 0x3F	; 63
     1d2:	30 78       	andi	r19, 0x80	; 128
     1d4:	33 23       	and	r19, r19
     1d6:	34 f4       	brge	.+12     	; 0x1e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	31 09       	sbc	r19, r1
     1dc:	20 6c       	ori	r18, 0xC0	; 192
     1de:	3f 6f       	ori	r19, 0xFF	; 255
     1e0:	2f 5f       	subi	r18, 0xFF	; 255
     1e2:	3f 4f       	sbci	r19, 0xFF	; 255
     1e4:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     1e6:	a6 89       	ldd	r26, Z+22	; 0x16
     1e8:	b7 89       	ldd	r27, Z+23	; 0x17
     1ea:	8c 93       	st	X, r24
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     1ec:	a0 89       	ldd	r26, Z+16	; 0x10
     1ee:	b1 89       	ldd	r27, Z+17	; 0x11
     1f0:	8c 91       	ld	r24, X
     1f2:	83 70       	andi	r24, 0x03	; 3
     1f4:	80 64       	ori	r24, 0x40	; 64
     1f6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     1f8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1fa:	84 8d       	ldd	r24, Z+28	; 0x1c
     1fc:	98 13       	cpse	r25, r24
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     200:	02 88       	ldd	r0, Z+18	; 0x12
     202:	f3 89       	ldd	r31, Z+19	; 0x13
     204:	e0 2d       	mov	r30, r0
     206:	80 81       	ld	r24, Z
     208:	8f 7d       	andi	r24, 0xDF	; 223
     20a:	80 83       	st	Z, r24
     20c:	08 95       	ret

0000020e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     214:	88 8d       	ldd	r24, Y+24	; 0x18
     216:	88 23       	and	r24, r24
     218:	d9 f0       	breq	.+54     	; 0x250 <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     21a:	ea 89       	ldd	r30, Y+18	; 0x12
     21c:	fb 89       	ldd	r31, Y+19	; 0x13
     21e:	80 81       	ld	r24, Z
     220:	85 fd       	sbrc	r24, 5
     222:	05 c0       	rjmp	.+10     	; 0x22e <_ZN14HardwareSerial5flushEv+0x20>
     224:	a8 89       	ldd	r26, Y+16	; 0x10
     226:	b9 89       	ldd	r27, Y+17	; 0x11
     228:	8c 91       	ld	r24, X
     22a:	86 fd       	sbrc	r24, 6
     22c:	11 c0       	rjmp	.+34     	; 0x250 <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	07 fc       	sbrc	r0, 7
     232:	f5 cf       	rjmp	.-22     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     234:	80 81       	ld	r24, Z
     236:	85 ff       	sbrs	r24, 5
     238:	f2 cf       	rjmp	.-28     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     23a:	04 c0       	rjmp	.+8      	; 0x244 <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
     23c:	ce 01       	movw	r24, r28
     23e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     242:	eb cf       	rjmp	.-42     	; 0x21a <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     244:	a8 89       	ldd	r26, Y+16	; 0x10
     246:	b9 89       	ldd	r27, Y+17	; 0x11
     248:	8c 91       	ld	r24, X
     24a:	85 ff       	sbrs	r24, 5
     24c:	e8 cf       	rjmp	.-48     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     24e:	f6 cf       	rjmp	.-20     	; 0x23c <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	ec 01       	movw	r28, r24
  _written = true;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     264:	9b 8d       	ldd	r25, Y+27	; 0x1b
     266:	8c 8d       	ldd	r24, Y+28	; 0x1c
     268:	98 13       	cpse	r25, r24
     26a:	26 c0       	rjmp	.+76     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x62>
     26c:	e8 89       	ldd	r30, Y+16	; 0x10
     26e:	f9 89       	ldd	r31, Y+17	; 0x11
     270:	80 81       	ld	r24, Z
     272:	85 fd       	sbrc	r24, 5
     274:	32 c0       	rjmp	.+100    	; 0x2da <_ZN14HardwareSerial5writeEh+0x84>
     276:	20 c0       	rjmp	.+64     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x62>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     278:	8c 8d       	ldd	r24, Y+28	; 0x1c
     27a:	18 13       	cpse	r17, r24
     27c:	0c c0       	rjmp	.+24     	; 0x296 <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	07 fc       	sbrc	r0, 7
     282:	fa cf       	rjmp	.-12     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     284:	e8 89       	ldd	r30, Y+16	; 0x10
     286:	f9 89       	ldd	r31, Y+17	; 0x11
     288:	80 81       	ld	r24, Z
     28a:	85 ff       	sbrs	r24, 5
     28c:	f5 cf       	rjmp	.-22     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
     28e:	ce 01       	movw	r24, r28
     290:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     294:	f1 cf       	rjmp	.-30     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     296:	8b 8d       	ldd	r24, Y+27	; 0x1b
     298:	fe 01       	movw	r30, r28
     29a:	e8 0f       	add	r30, r24
     29c:	f1 1d       	adc	r31, r1
     29e:	e3 5a       	subi	r30, 0xA3	; 163
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	00 83       	st	Z, r16

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2a6:	f8 94       	cli
    _tx_buffer_head = i;
     2a8:	1b 8f       	std	Y+27, r17	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     2aa:	ea 89       	ldd	r30, Y+18	; 0x12
     2ac:	fb 89       	ldd	r31, Y+19	; 0x13
     2ae:	80 81       	ld	r24, Z
     2b0:	80 62       	ori	r24, 0x20	; 32
     2b2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2b4:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
     2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <_ZN14HardwareSerial5writeEh+0x9c>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     2b8:	2b 8d       	ldd	r18, Y+27	; 0x1b
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	2f 73       	andi	r18, 0x3F	; 63
     2c2:	30 78       	andi	r19, 0x80	; 128
     2c4:	33 23       	and	r19, r19
     2c6:	34 f4       	brge	.+12     	; 0x2d4 <_ZN14HardwareSerial5writeEh+0x7e>
     2c8:	21 50       	subi	r18, 0x01	; 1
     2ca:	31 09       	sbc	r19, r1
     2cc:	20 6c       	ori	r18, 0xC0	; 192
     2ce:	3f 6f       	ori	r19, 0xFF	; 255
     2d0:	2f 5f       	subi	r18, 0xFF	; 255
     2d2:	3f 4f       	sbci	r19, 0xFF	; 255
     2d4:	06 2f       	mov	r16, r22
     2d6:	12 2f       	mov	r17, r18
     2d8:	cf cf       	rjmp	.-98     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2dc:	f8 94       	cli
      *_udr = c;
     2de:	ee 89       	ldd	r30, Y+22	; 0x16
     2e0:	ff 89       	ldd	r31, Y+23	; 0x17
     2e2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2e4:	e8 89       	ldd	r30, Y+16	; 0x10
     2e6:	f9 89       	ldd	r31, Y+17	; 0x11
     2e8:	80 81       	ld	r24, Z
     2ea:	83 70       	andi	r24, 0x03	; 3
     2ec:	80 64       	ori	r24, 0x40	; 64
     2ee:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2f0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ec 01       	movw	r28, r24
     310:	6a 01       	movw	r12, r20
     312:	7b 01       	movw	r14, r22
     314:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     316:	e8 89       	ldd	r30, Y+16	; 0x10
     318:	f9 89       	ldd	r31, Y+17	; 0x11
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     31e:	41 15       	cp	r20, r1
     320:	51 4e       	sbci	r21, 0xE1	; 225
     322:	61 05       	cpc	r22, r1
     324:	71 05       	cpc	r23, r1
     326:	b1 f0       	breq	.+44     	; 0x354 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	79 e0       	ldi	r23, 0x09	; 9
     32c:	8d e3       	ldi	r24, 0x3D	; 61
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
     338:	da 01       	movw	r26, r20
     33a:	c9 01       	movw	r24, r18
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	a1 09       	sbc	r26, r1
     340:	b1 09       	sbc	r27, r1
     342:	b6 95       	lsr	r27
     344:	a7 95       	ror	r26
     346:	97 95       	ror	r25
     348:	87 95       	ror	r24
     34a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     34c:	21 15       	cp	r18, r1
     34e:	80 e1       	ldi	r24, 0x10	; 16
     350:	38 07       	cpc	r19, r24
     352:	a8 f0       	brcs	.+42     	; 0x37e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     354:	e8 89       	ldd	r30, Y+16	; 0x10
     356:	f9 89       	ldd	r31, Y+17	; 0x11
     358:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     35a:	60 e8       	ldi	r22, 0x80	; 128
     35c:	74 e8       	ldi	r23, 0x84	; 132
     35e:	8e e1       	ldi	r24, 0x1E	; 30
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a7 01       	movw	r20, r14
     364:	96 01       	movw	r18, r12
     366:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
     36a:	da 01       	movw	r26, r20
     36c:	c9 01       	movw	r24, r18
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	a1 09       	sbc	r26, r1
     372:	b1 09       	sbc	r27, r1
     374:	b6 95       	lsr	r27
     376:	a7 95       	ror	r26
     378:	97 95       	ror	r25
     37a:	87 95       	ror	r24
     37c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     37e:	ec 85       	ldd	r30, Y+12	; 0x0c
     380:	fd 85       	ldd	r31, Y+13	; 0x0d
     382:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     384:	ee 85       	ldd	r30, Y+14	; 0x0e
     386:	ff 85       	ldd	r31, Y+15	; 0x0f
     388:	20 83       	st	Z, r18

  _written = false;
     38a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     38c:	ec 89       	ldd	r30, Y+20	; 0x14
     38e:	fd 89       	ldd	r31, Y+21	; 0x15
     390:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     392:	ea 89       	ldd	r30, Y+18	; 0x12
     394:	fb 89       	ldd	r31, Y+19	; 0x13
     396:	80 81       	ld	r24, Z
     398:	80 61       	ori	r24, 0x10	; 16
     39a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     39c:	ea 89       	ldd	r30, Y+18	; 0x12
     39e:	fb 89       	ldd	r31, Y+19	; 0x13
     3a0:	80 81       	ld	r24, Z
     3a2:	88 60       	ori	r24, 0x08	; 8
     3a4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     3a6:	ea 89       	ldd	r30, Y+18	; 0x12
     3a8:	fb 89       	ldd	r31, Y+19	; 0x13
     3aa:	80 81       	ld	r24, Z
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     3b0:	ea 89       	ldd	r30, Y+18	; 0x12
     3b2:	fb 89       	ldd	r31, Y+19	; 0x13
     3b4:	80 81       	ld	r24, Z
     3b6:	8f 7d       	andi	r24, 0xDF	; 223
     3b8:	80 83       	st	Z, r24
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	08 95       	ret

000003ca <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	2f 93       	push	r18
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3e8:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <__data_end+0x10>
     3ec:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <__data_end+0x11>
     3f0:	80 81       	ld	r24, Z
     3f2:	82 fd       	sbrc	r24, 2
     3f4:	14 c0       	rjmp	.+40     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3f6:	ec e4       	ldi	r30, 0x4C	; 76
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	a6 89       	ldd	r26, Z+22	; 0x16
     3fc:	b7 89       	ldd	r27, Z+23	; 0x17
     3fe:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     400:	81 8d       	ldd	r24, Z+25	; 0x19
     402:	8f 5f       	subi	r24, 0xFF	; 255
     404:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     406:	92 8d       	ldd	r25, Z+26	; 0x1a
     408:	89 17       	cp	r24, r25
     40a:	71 f0       	breq	.+28     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
      _rx_buffer[_rx_buffer_head] = c;
     40c:	df 01       	movw	r26, r30
     40e:	e1 8d       	ldd	r30, Z+25	; 0x19
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	e4 5b       	subi	r30, 0xB4	; 180
     414:	fd 4f       	sbci	r31, 0xFD	; 253
     416:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     418:	59 96       	adiw	r26, 0x19	; 25
     41a:	8c 93       	st	X, r24
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     41e:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <__data_end+0x16>
     422:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <__data_end+0x17>
     426:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	2f 93       	push	r18
     44c:	3f 93       	push	r19
     44e:	4f 93       	push	r20
     450:	5f 93       	push	r21
     452:	6f 93       	push	r22
     454:	7f 93       	push	r23
     456:	8f 93       	push	r24
     458:	9f 93       	push	r25
     45a:	af 93       	push	r26
     45c:	bf 93       	push	r27
     45e:	ef 93       	push	r30
     460:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     462:	8c e4       	ldi	r24, 0x4C	; 76
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	bf 91       	pop	r27
     470:	af 91       	pop	r26
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	7f 91       	pop	r23
     478:	6f 91       	pop	r22
     47a:	5f 91       	pop	r21
     47c:	4f 91       	pop	r20
     47e:	3f 91       	pop	r19
     480:	2f 91       	pop	r18
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     48c:	8c e4       	ldi	r24, 0x4C	; 76
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN14HardwareSerial9availableEv>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	89 2b       	or	r24, r25
     498:	09 f4       	brne	.+2      	; 0x49c <_Z17Serial0_availablev+0x10>
     49a:	20 e0       	ldi	r18, 0x00	; 0
}
     49c:	82 2f       	mov	r24, r18
     49e:	08 95       	ret

000004a0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     4a0:	ec e4       	ldi	r30, 0x4C	; 76
     4a2:	f2 e0       	ldi	r31, 0x02	; 2
     4a4:	13 82       	std	Z+3, r1	; 0x03
     4a6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     4a8:	88 ee       	ldi	r24, 0xE8	; 232
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	a0 e0       	ldi	r26, 0x00	; 0
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	84 83       	std	Z+4, r24	; 0x04
     4b2:	95 83       	std	Z+5, r25	; 0x05
     4b4:	a6 83       	std	Z+6, r26	; 0x06
     4b6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     4b8:	89 e0       	ldi	r24, 0x09	; 9
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	85 ec       	ldi	r24, 0xC5	; 197
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	95 87       	std	Z+13, r25	; 0x0d
     4c6:	84 87       	std	Z+12, r24	; 0x0c
     4c8:	84 ec       	ldi	r24, 0xC4	; 196
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	97 87       	std	Z+15, r25	; 0x0f
     4ce:	86 87       	std	Z+14, r24	; 0x0e
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	91 8b       	std	Z+17, r25	; 0x11
     4d6:	80 8b       	std	Z+16, r24	; 0x10
     4d8:	81 ec       	ldi	r24, 0xC1	; 193
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	93 8b       	std	Z+19, r25	; 0x13
     4de:	82 8b       	std	Z+18, r24	; 0x12
     4e0:	82 ec       	ldi	r24, 0xC2	; 194
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	95 8b       	std	Z+21, r25	; 0x15
     4e6:	84 8b       	std	Z+20, r24	; 0x14
     4e8:	86 ec       	ldi	r24, 0xC6	; 198
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	97 8b       	std	Z+23, r25	; 0x17
     4ee:	86 8b       	std	Z+22, r24	; 0x16
     4f0:	11 8e       	std	Z+25, r1	; 0x19
     4f2:	12 8e       	std	Z+26, r1	; 0x1a
     4f4:	13 8e       	std	Z+27, r1	; 0x1b
     4f6:	14 8e       	std	Z+28, r1	; 0x1c
     4f8:	08 95       	ret

000004fa <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
     4fa:	8f 92       	push	r8
     4fc:	9f 92       	push	r9
     4fe:	af 92       	push	r10
     500:	bf 92       	push	r11
     502:	cf 92       	push	r12
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	6c 01       	movw	r12, r24
     514:	7b 01       	movw	r14, r22
     516:	4c 01       	movw	r8, r24
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	88 0e       	add	r8, r24
     51c:	91 1c       	adc	r9, r1
     51e:	56 01       	movw	r10, r12
     520:	e5 e0       	ldi	r30, 0x05	; 5
     522:	ae 0e       	add	r10, r30
     524:	b1 1c       	adc	r11, r1
     526:	00 e0       	ldi	r16, 0x00	; 0
     528:	10 e0       	ldi	r17, 0x00	; 0
     52a:	f4 01       	movw	r30, r8
     52c:	61 91       	ld	r22, Z+
     52e:	4f 01       	movw	r8, r30
     530:	4a e0       	ldi	r20, 0x0A	; 10
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	c7 01       	movw	r24, r14
     536:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN5Print5printEhi>
     53a:	ec 01       	movw	r28, r24
     53c:	6e e2       	ldi	r22, 0x2E	; 46
     53e:	c7 01       	movw	r24, r14
     540:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEc>
     544:	8c 0f       	add	r24, r28
     546:	9d 1f       	adc	r25, r29
     548:	08 0f       	add	r16, r24
     54a:	19 1f       	adc	r17, r25
     54c:	8a 14       	cp	r8, r10
     54e:	9b 04       	cpc	r9, r11
     550:	61 f7       	brne	.-40     	; 0x52a <_ZNK9IPAddress7printToER5Print+0x30>
     552:	4a e0       	ldi	r20, 0x0A	; 10
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	f6 01       	movw	r30, r12
     558:	65 81       	ldd	r22, Z+5	; 0x05
     55a:	c7 01       	movw	r24, r14
     55c:	0e 94 b1 03 	call	0x762	; 0x762 <_ZN5Print5printEhi>
     560:	80 0f       	add	r24, r16
     562:	91 1f       	adc	r25, r17
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	df 90       	pop	r13
     572:	cf 90       	pop	r12
     574:	bf 90       	pop	r11
     576:	af 90       	pop	r10
     578:	9f 90       	pop	r9
     57a:	8f 90       	pop	r8
     57c:	08 95       	ret

0000057e <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     57e:	e9 ee       	ldi	r30, 0xE9	; 233
     580:	f2 e0       	ldi	r31, 0x02	; 2
     582:	8b e1       	ldi	r24, 0x1B	; 27
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     58a:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     58c:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     58e:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     590:	15 82       	std	Z+5, r1	; 0x05
     592:	08 95       	ret

00000594 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     594:	08 95       	ret

00000596 <main>:

int main(void)
{
	init();
     596:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <init>
	initVariant();
     59a:	0e 94 ca 02 	call	0x594	; 0x594 <initVariant>
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
		if (serialEventRun) serialEventRun();
     59e:	ce ec       	ldi	r28, 0xCE	; 206
     5a0:	d0 e0       	ldi	r29, 0x00	; 0
	USBDevice.attach();
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
     5a2:	0e 94 03 0a 	call	0x1406	; 0x1406 <main_ArduinoLockOpener>
		if (serialEventRun) serialEventRun();
     5a6:	20 97       	sbiw	r28, 0x00	; 0
     5a8:	e1 f3       	breq	.-8      	; 0x5a2 <main+0xc>
     5aa:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z14serialEventRunv>
     5ae:	f9 cf       	rjmp	.-14     	; 0x5a2 <main+0xc>

000005b0 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     5b0:	cf 92       	push	r12
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	41 15       	cp	r20, r1
     5c2:	51 05       	cpc	r21, r1
     5c4:	c1 f0       	breq	.+48     	; 0x5f6 <_ZN5Print5writeEPKhj+0x46>
     5c6:	6a 01       	movw	r12, r20
     5c8:	8c 01       	movw	r16, r24
     5ca:	e6 2e       	mov	r14, r22
     5cc:	f7 2e       	mov	r15, r23
     5ce:	c0 e0       	ldi	r28, 0x00	; 0
     5d0:	d0 e0       	ldi	r29, 0x00	; 0
     5d2:	d7 01       	movw	r26, r14
     5d4:	6d 91       	ld	r22, X+
     5d6:	7d 01       	movw	r14, r26
     5d8:	d8 01       	movw	r26, r16
     5da:	ed 91       	ld	r30, X+
     5dc:	fc 91       	ld	r31, X
     5de:	01 90       	ld	r0, Z+
     5e0:	f0 81       	ld	r31, Z
     5e2:	e0 2d       	mov	r30, r0
     5e4:	c8 01       	movw	r24, r16
     5e6:	09 95       	icall
     5e8:	89 2b       	or	r24, r25
     5ea:	39 f0       	breq	.+14     	; 0x5fa <_ZN5Print5writeEPKhj+0x4a>
     5ec:	21 96       	adiw	r28, 0x01	; 1
     5ee:	cc 16       	cp	r12, r28
     5f0:	dd 06       	cpc	r13, r29
     5f2:	79 f7       	brne	.-34     	; 0x5d2 <_ZN5Print5writeEPKhj+0x22>
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <_ZN5Print5writeEPKhj+0x4a>
     5f6:	c0 e0       	ldi	r28, 0x00	; 0
     5f8:	d0 e0       	ldi	r29, 0x00	; 0
     5fa:	ce 01       	movw	r24, r28
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	08 95       	ret

0000060e <_ZN5Print5printEPKc>:
     60e:	61 15       	cp	r22, r1
     610:	71 05       	cpc	r23, r1
     612:	81 f0       	breq	.+32     	; 0x634 <_ZN5Print5printEPKc+0x26>
     614:	fb 01       	movw	r30, r22
     616:	01 90       	ld	r0, Z+
     618:	00 20       	and	r0, r0
     61a:	e9 f7       	brne	.-6      	; 0x616 <_ZN5Print5printEPKc+0x8>
     61c:	31 97       	sbiw	r30, 0x01	; 1
     61e:	af 01       	movw	r20, r30
     620:	46 1b       	sub	r20, r22
     622:	57 0b       	sbc	r21, r23
     624:	dc 01       	movw	r26, r24
     626:	ed 91       	ld	r30, X+
     628:	fc 91       	ld	r31, X
     62a:	02 80       	ldd	r0, Z+2	; 0x02
     62c:	f3 81       	ldd	r31, Z+3	; 0x03
     62e:	e0 2d       	mov	r30, r0
     630:	09 95       	icall
     632:	08 95       	ret
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	08 95       	ret

0000063a <_ZN5Print5printEc>:
     63a:	dc 01       	movw	r26, r24
     63c:	ed 91       	ld	r30, X+
     63e:	fc 91       	ld	r31, X
     640:	01 90       	ld	r0, Z+
     642:	f0 81       	ld	r31, Z
     644:	e0 2d       	mov	r30, r0
     646:	09 95       	icall
     648:	08 95       	ret

0000064a <_ZN5Print7printlnEv>:
     64a:	dc 01       	movw	r26, r24
     64c:	ed 91       	ld	r30, X+
     64e:	fc 91       	ld	r31, X
     650:	02 80       	ldd	r0, Z+2	; 0x02
     652:	f3 81       	ldd	r31, Z+3	; 0x03
     654:	e0 2d       	mov	r30, r0
     656:	42 e0       	ldi	r20, 0x02	; 2
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	6d e1       	ldi	r22, 0x1D	; 29
     65c:	71 e0       	ldi	r23, 0x01	; 1
     65e:	09 95       	icall
     660:	08 95       	ret

00000662 <_ZN5Print7printlnEPKc>:
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	ec 01       	movw	r28, r24
     66c:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN5Print5printEPKc>
     670:	8c 01       	movw	r16, r24
     672:	ce 01       	movw	r24, r28
     674:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN5Print7printlnEv>
     678:	80 0f       	add	r24, r16
     67a:	91 1f       	adc	r25, r17
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <_ZN5Print11printNumberEmh>:
     686:	8f 92       	push	r8
     688:	9f 92       	push	r9
     68a:	af 92       	push	r10
     68c:	bf 92       	push	r11
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	a1 97       	sbiw	r28, 0x21	; 33
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	7c 01       	movw	r14, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	ba 01       	movw	r22, r20
     6b0:	19 a2       	std	Y+33, r1	; 0x21
     6b2:	22 30       	cpi	r18, 0x02	; 2
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <_ZN5Print11printNumberEmh+0x32>
     6b6:	2a e0       	ldi	r18, 0x0A	; 10
     6b8:	8e 01       	movw	r16, r28
     6ba:	0f 5d       	subi	r16, 0xDF	; 223
     6bc:	1f 4f       	sbci	r17, 0xFF	; 255
     6be:	82 2e       	mov	r8, r18
     6c0:	91 2c       	mov	r9, r1
     6c2:	a1 2c       	mov	r10, r1
     6c4:	b1 2c       	mov	r11, r1
     6c6:	a5 01       	movw	r20, r10
     6c8:	94 01       	movw	r18, r8
     6ca:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
     6ce:	e6 2f       	mov	r30, r22
     6d0:	62 2f       	mov	r22, r18
     6d2:	73 2f       	mov	r23, r19
     6d4:	84 2f       	mov	r24, r20
     6d6:	95 2f       	mov	r25, r21
     6d8:	01 50       	subi	r16, 0x01	; 1
     6da:	11 09       	sbc	r17, r1
     6dc:	ea 30       	cpi	r30, 0x0A	; 10
     6de:	10 f4       	brcc	.+4      	; 0x6e4 <_ZN5Print11printNumberEmh+0x5e>
     6e0:	e0 5d       	subi	r30, 0xD0	; 208
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <_ZN5Print11printNumberEmh+0x60>
     6e4:	e9 5c       	subi	r30, 0xC9	; 201
     6e6:	d8 01       	movw	r26, r16
     6e8:	ec 93       	st	X, r30
     6ea:	61 15       	cp	r22, r1
     6ec:	71 05       	cpc	r23, r1
     6ee:	81 05       	cpc	r24, r1
     6f0:	91 05       	cpc	r25, r1
     6f2:	49 f7       	brne	.-46     	; 0x6c6 <_ZN5Print11printNumberEmh+0x40>
     6f4:	01 15       	cp	r16, r1
     6f6:	11 05       	cpc	r17, r1
     6f8:	91 f0       	breq	.+36     	; 0x71e <_ZN5Print11printNumberEmh+0x98>
     6fa:	f8 01       	movw	r30, r16
     6fc:	01 90       	ld	r0, Z+
     6fe:	00 20       	and	r0, r0
     700:	e9 f7       	brne	.-6      	; 0x6fc <_ZN5Print11printNumberEmh+0x76>
     702:	31 97       	sbiw	r30, 0x01	; 1
     704:	af 01       	movw	r20, r30
     706:	40 1b       	sub	r20, r16
     708:	51 0b       	sbc	r21, r17
     70a:	d7 01       	movw	r26, r14
     70c:	ed 91       	ld	r30, X+
     70e:	fc 91       	ld	r31, X
     710:	02 80       	ldd	r0, Z+2	; 0x02
     712:	f3 81       	ldd	r31, Z+3	; 0x03
     714:	e0 2d       	mov	r30, r0
     716:	b8 01       	movw	r22, r16
     718:	c7 01       	movw	r24, r14
     71a:	09 95       	icall
     71c:	02 c0       	rjmp	.+4      	; 0x722 <_ZN5Print11printNumberEmh+0x9c>
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	a1 96       	adiw	r28, 0x21	; 33
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	f8 94       	cli
     728:	de bf       	out	0x3e, r29	; 62
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	bf 90       	pop	r11
     73c:	af 90       	pop	r10
     73e:	9f 90       	pop	r9
     740:	8f 90       	pop	r8
     742:	08 95       	ret

00000744 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     744:	21 15       	cp	r18, r1
     746:	31 05       	cpc	r19, r1
     748:	49 f4       	brne	.+18     	; 0x75c <_ZN5Print5printEmi+0x18>
     74a:	dc 01       	movw	r26, r24
     74c:	ed 91       	ld	r30, X+
     74e:	fc 91       	ld	r31, X
     750:	01 90       	ld	r0, Z+
     752:	f0 81       	ld	r31, Z
     754:	e0 2d       	mov	r30, r0
     756:	64 2f       	mov	r22, r20
     758:	09 95       	icall
     75a:	08 95       	ret
  else return printNumber(n, base);
     75c:	0e 94 43 03 	call	0x686	; 0x686 <_ZN5Print11printNumberEmh>
}
     760:	08 95       	ret

00000762 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     762:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     764:	46 2f       	mov	r20, r22
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN5Print5printEmi>
}
     770:	08 95       	ret

00000772 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	39 f0       	breq	.+14     	; 0x784 <_Z12disableTimerh+0x12>
     776:	18 f0       	brcs	.+6      	; 0x77e <_Z12disableTimerh+0xc>
     778:	82 30       	cpi	r24, 0x02	; 2
     77a:	51 f0       	breq	.+20     	; 0x790 <_Z12disableTimerh+0x1e>
     77c:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     77e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     782:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     784:	ef e6       	ldi	r30, 0x6F	; 111
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	80 81       	ld	r24, Z
     78a:	8d 7f       	andi	r24, 0xFD	; 253
     78c:	80 83       	st	Z, r24
      break;
     78e:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     790:	e0 e7       	ldi	r30, 0x70	; 112
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	80 81       	ld	r24, Z
     796:	8d 7f       	andi	r24, 0xFD	; 253
     798:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     7a0:	e1 eb       	ldi	r30, 0xB1	; 177
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	88 7f       	andi	r24, 0xF8	; 248
     7a8:	84 60       	ori	r24, 0x04	; 4
     7aa:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     7ac:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     7b0:	08 95       	ret

000007b2 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7b2:	cf 93       	push	r28
     7b4:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7ba:	c8 13       	cpse	r28, r24
     7bc:	07 c0       	rjmp	.+14     	; 0x7cc <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7be:	e8 e6       	ldi	r30, 0x68	; 104
     7c0:	f0 e0       	ldi	r31, 0x00	; 0
     7c2:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
     7c6:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
      break;
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     7cc:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
     7ce:	0e 94 b9 03 	call	0x772	; 0x772 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	8c 2f       	mov	r24, r28
     7d6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <digitalWrite>
}
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7de:	1f 92       	push	r1
     7e0:	0f 92       	push	r0
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	0f 92       	push	r0
     7e6:	11 24       	eor	r1, r1
     7e8:	2f 93       	push	r18
     7ea:	3f 93       	push	r19
     7ec:	4f 93       	push	r20
     7ee:	5f 93       	push	r21
     7f0:	6f 93       	push	r22
     7f2:	7f 93       	push	r23
     7f4:	8f 93       	push	r24
     7f6:	9f 93       	push	r25
     7f8:	af 93       	push	r26
     7fa:	bf 93       	push	r27
     7fc:	ef 93       	push	r30
     7fe:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     800:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <timer2_toggle_count>
     804:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <timer2_toggle_count+0x1>
     808:	a0 91 f4 02 	lds	r26, 0x02F4	; 0x8002f4 <timer2_toggle_count+0x2>
     80c:	b0 91 f5 02 	lds	r27, 0x02F5	; 0x8002f5 <timer2_toggle_count+0x3>
     810:	89 2b       	or	r24, r25
     812:	8a 2b       	or	r24, r26
     814:	8b 2b       	or	r24, r27
     816:	51 f1       	breq	.+84     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     818:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <timer2_pin_mask>
     81c:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <timer2_pin_port>
     820:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <timer2_pin_port+0x1>
     824:	80 81       	ld	r24, Z
     826:	89 27       	eor	r24, r25
     828:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     82a:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <timer2_toggle_count>
     82e:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <timer2_toggle_count+0x1>
     832:	a0 91 f4 02 	lds	r26, 0x02F4	; 0x8002f4 <timer2_toggle_count+0x2>
     836:	b0 91 f5 02 	lds	r27, 0x02F5	; 0x8002f5 <timer2_toggle_count+0x3>
     83a:	18 16       	cp	r1, r24
     83c:	19 06       	cpc	r1, r25
     83e:	1a 06       	cpc	r1, r26
     840:	1b 06       	cpc	r1, r27
     842:	c4 f4       	brge	.+48     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
      timer2_toggle_count--;
     844:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <timer2_toggle_count>
     848:	90 91 f3 02 	lds	r25, 0x02F3	; 0x8002f3 <timer2_toggle_count+0x1>
     84c:	a0 91 f4 02 	lds	r26, 0x02F4	; 0x8002f4 <timer2_toggle_count+0x2>
     850:	b0 91 f5 02 	lds	r27, 0x02F5	; 0x8002f5 <timer2_toggle_count+0x3>
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	a1 09       	sbc	r26, r1
     858:	b1 09       	sbc	r27, r1
     85a:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <timer2_toggle_count>
     85e:	90 93 f3 02 	sts	0x02F3, r25	; 0x8002f3 <timer2_toggle_count+0x1>
     862:	a0 93 f4 02 	sts	0x02F4, r26	; 0x8002f4 <timer2_toggle_count+0x2>
     866:	b0 93 f5 02 	sts	0x02F5, r27	; 0x8002f5 <timer2_toggle_count+0x3>
     86a:	04 c0       	rjmp	.+8      	; 0x874 <__DATA_REGION_LENGTH__+0x74>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     86c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     870:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     874:	ff 91       	pop	r31
     876:	ef 91       	pop	r30
     878:	bf 91       	pop	r27
     87a:	af 91       	pop	r26
     87c:	9f 91       	pop	r25
     87e:	8f 91       	pop	r24
     880:	7f 91       	pop	r23
     882:	6f 91       	pop	r22
     884:	5f 91       	pop	r21
     886:	4f 91       	pop	r20
     888:	3f 91       	pop	r19
     88a:	2f 91       	pop	r18
     88c:	0f 90       	pop	r0
     88e:	0f be       	out	0x3f, r0	; 63
     890:	0f 90       	pop	r0
     892:	1f 90       	pop	r1
     894:	18 95       	reti

00000896 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     896:	08 95       	ret

00000898 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
     8ba:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <intFunc>
     8be:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <intFunc+0x1>
     8c2:	09 95       	icall
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	7f 91       	pop	r23
     8d2:	6f 91       	pop	r22
     8d4:	5f 91       	pop	r21
     8d6:	4f 91       	pop	r20
     8d8:	3f 91       	pop	r19
     8da:	2f 91       	pop	r18
     8dc:	0f 90       	pop	r0
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	0f 90       	pop	r0
     8e2:	1f 90       	pop	r1
     8e4:	18 95       	reti

000008e6 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     8e6:	1f 92       	push	r1
     8e8:	0f 92       	push	r0
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	0f 92       	push	r0
     8ee:	11 24       	eor	r1, r1
     8f0:	2f 93       	push	r18
     8f2:	3f 93       	push	r19
     8f4:	4f 93       	push	r20
     8f6:	5f 93       	push	r21
     8f8:	6f 93       	push	r22
     8fa:	7f 93       	push	r23
     8fc:	8f 93       	push	r24
     8fe:	9f 93       	push	r25
     900:	af 93       	push	r26
     902:	bf 93       	push	r27
     904:	ef 93       	push	r30
     906:	ff 93       	push	r31
     908:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <intFunc+0x2>
     90c:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <intFunc+0x3>
     910:	09 95       	icall
     912:	ff 91       	pop	r31
     914:	ef 91       	pop	r30
     916:	bf 91       	pop	r27
     918:	af 91       	pop	r26
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	7f 91       	pop	r23
     920:	6f 91       	pop	r22
     922:	5f 91       	pop	r21
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     934:	1f 92       	push	r1
     936:	0f 92       	push	r0
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	0f 92       	push	r0
     93c:	11 24       	eor	r1, r1
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	8f 93       	push	r24
     944:	9f 93       	push	r25
     946:	af 93       	push	r26
     948:	bf 93       	push	r27
     94a:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <timer0_millis>
     94e:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <timer0_millis+0x1>
     952:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <timer0_millis+0x2>
     956:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <timer0_millis+0x3>
     95a:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <timer0_fract>
     95e:	23 e0       	ldi	r18, 0x03	; 3
     960:	23 0f       	add	r18, r19
     962:	2d 37       	cpi	r18, 0x7D	; 125
     964:	20 f4       	brcc	.+8      	; 0x96e <__vector_16+0x3a>
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	a1 1d       	adc	r26, r1
     96a:	b1 1d       	adc	r27, r1
     96c:	05 c0       	rjmp	.+10     	; 0x978 <__vector_16+0x44>
     96e:	26 e8       	ldi	r18, 0x86	; 134
     970:	23 0f       	add	r18, r19
     972:	02 96       	adiw	r24, 0x02	; 2
     974:	a1 1d       	adc	r26, r1
     976:	b1 1d       	adc	r27, r1
     978:	20 93 f6 02 	sts	0x02F6, r18	; 0x8002f6 <timer0_fract>
     97c:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <timer0_millis>
     980:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <timer0_millis+0x1>
     984:	a0 93 f9 02 	sts	0x02F9, r26	; 0x8002f9 <timer0_millis+0x2>
     988:	b0 93 fa 02 	sts	0x02FA, r27	; 0x8002fa <timer0_millis+0x3>
     98c:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <timer0_overflow_count>
     990:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <timer0_overflow_count+0x1>
     994:	a0 91 fd 02 	lds	r26, 0x02FD	; 0x8002fd <timer0_overflow_count+0x2>
     998:	b0 91 fe 02 	lds	r27, 0x02FE	; 0x8002fe <timer0_overflow_count+0x3>
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	a1 1d       	adc	r26, r1
     9a0:	b1 1d       	adc	r27, r1
     9a2:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <timer0_overflow_count>
     9a6:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <timer0_overflow_count+0x1>
     9aa:	a0 93 fd 02 	sts	0x02FD, r26	; 0x8002fd <timer0_overflow_count+0x2>
     9ae:	b0 93 fe 02 	sts	0x02FE, r27	; 0x8002fe <timer0_overflow_count+0x3>
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	3f 91       	pop	r19
     9bc:	2f 91       	pop	r18
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	0f 90       	pop	r0
     9c4:	1f 90       	pop	r1
     9c6:	18 95       	reti

000009c8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     9c8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     9ca:	84 b5       	in	r24, 0x24	; 36
     9cc:	82 60       	ori	r24, 0x02	; 2
     9ce:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     9d0:	84 b5       	in	r24, 0x24	; 36
     9d2:	81 60       	ori	r24, 0x01	; 1
     9d4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     9d6:	85 b5       	in	r24, 0x25	; 37
     9d8:	82 60       	ori	r24, 0x02	; 2
     9da:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     9dc:	85 b5       	in	r24, 0x25	; 37
     9de:	81 60       	ori	r24, 0x01	; 1
     9e0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     9e2:	ee e6       	ldi	r30, 0x6E	; 110
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	81 60       	ori	r24, 0x01	; 1
     9ea:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     9ec:	e1 e8       	ldi	r30, 0x81	; 129
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     9f2:	80 81       	ld	r24, Z
     9f4:	82 60       	ori	r24, 0x02	; 2
     9f6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     9f8:	80 81       	ld	r24, Z
     9fa:	81 60       	ori	r24, 0x01	; 1
     9fc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     9fe:	e0 e8       	ldi	r30, 0x80	; 128
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	81 60       	ori	r24, 0x01	; 1
     a06:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     a08:	e1 eb       	ldi	r30, 0xB1	; 177
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	84 60       	ori	r24, 0x04	; 4
     a10:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     a12:	e0 eb       	ldi	r30, 0xB0	; 176
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	81 60       	ori	r24, 0x01	; 1
     a1a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     a1c:	ea e7       	ldi	r30, 0x7A	; 122
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	84 60       	ori	r24, 0x04	; 4
     a24:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     a26:	80 81       	ld	r24, Z
     a28:	82 60       	ori	r24, 0x02	; 2
     a2a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     a2c:	80 81       	ld	r24, Z
     a2e:	81 60       	ori	r24, 0x01	; 1
     a30:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     a32:	80 81       	ld	r24, Z
     a34:	80 68       	ori	r24, 0x80	; 128
     a36:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     a38:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     a3c:	08 95       	ret

00000a3e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     a3e:	83 30       	cpi	r24, 0x03	; 3
     a40:	69 f0       	breq	.+26     	; 0xa5c <turnOffPWM+0x1e>
     a42:	28 f4       	brcc	.+10     	; 0xa4e <turnOffPWM+0x10>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	b1 f0       	breq	.+44     	; 0xa74 <turnOffPWM+0x36>
     a48:	82 30       	cpi	r24, 0x02	; 2
     a4a:	c1 f0       	breq	.+48     	; 0xa7c <turnOffPWM+0x3e>
     a4c:	08 95       	ret
     a4e:	87 30       	cpi	r24, 0x07	; 7
     a50:	c9 f0       	breq	.+50     	; 0xa84 <turnOffPWM+0x46>
     a52:	88 30       	cpi	r24, 0x08	; 8
     a54:	e9 f0       	breq	.+58     	; 0xa90 <turnOffPWM+0x52>
     a56:	84 30       	cpi	r24, 0x04	; 4
     a58:	01 f5       	brne	.+64     	; 0xa9a <turnOffPWM+0x5c>
     a5a:	06 c0       	rjmp	.+12     	; 0xa68 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     a5c:	e0 e8       	ldi	r30, 0x80	; 128
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	8f 77       	andi	r24, 0x7F	; 127
     a64:	80 83       	st	Z, r24
     a66:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     a68:	e0 e8       	ldi	r30, 0x80	; 128
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	8f 7d       	andi	r24, 0xDF	; 223
     a70:	80 83       	st	Z, r24
     a72:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     a74:	84 b5       	in	r24, 0x24	; 36
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	84 bd       	out	0x24, r24	; 36
     a7a:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     a7c:	84 b5       	in	r24, 0x24	; 36
     a7e:	8f 7d       	andi	r24, 0xDF	; 223
     a80:	84 bd       	out	0x24, r24	; 36
     a82:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     a84:	e0 eb       	ldi	r30, 0xB0	; 176
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	8f 77       	andi	r24, 0x7F	; 127
     a8c:	80 83       	st	Z, r24
     a8e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     a90:	e0 eb       	ldi	r30, 0xB0	; 176
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	8f 7d       	andi	r24, 0xDF	; 223
     a98:	80 83       	st	Z, r24
     a9a:	08 95       	ret

00000a9c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	fc 01       	movw	r30, r24
     aa4:	e3 58       	subi	r30, 0x83	; 131
     aa6:	ff 4f       	sbci	r31, 0xFF	; 255
     aa8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     aaa:	fc 01       	movw	r30, r24
     aac:	ef 56       	subi	r30, 0x6F	; 111
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     ab2:	88 23       	and	r24, r24
     ab4:	79 f1       	breq	.+94     	; 0xb14 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	fc 01       	movw	r30, r24
     abe:	e7 54       	subi	r30, 0x47	; 71
     ac0:	ff 4f       	sbci	r31, 0xFF	; 255
     ac2:	a5 91       	lpm	r26, Z+
     ac4:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     ac6:	fc 01       	movw	r30, r24
     ac8:	e1 55       	subi	r30, 0x51	; 81
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	c5 91       	lpm	r28, Z+
     ace:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     ad0:	61 11       	cpse	r22, r1
     ad2:	0c c0       	rjmp	.+24     	; 0xaec <pinMode+0x50>
		uint8_t oldSREG = SREG;
     ad4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     ad6:	f8 94       	cli
		*reg &= ~bit;
     ad8:	8c 91       	ld	r24, X
     ada:	e2 2f       	mov	r30, r18
     adc:	e0 95       	com	r30
     ade:	8e 23       	and	r24, r30
     ae0:	8c 93       	st	X, r24
		*out &= ~bit;
     ae2:	28 81       	ld	r18, Y
     ae4:	e2 23       	and	r30, r18
     ae6:	e8 83       	st	Y, r30
		SREG = oldSREG;
     ae8:	9f bf       	out	0x3f, r25	; 63
     aea:	14 c0       	rjmp	.+40     	; 0xb14 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     aec:	62 30       	cpi	r22, 0x02	; 2
     aee:	61 f4       	brne	.+24     	; 0xb08 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     af0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     af2:	f8 94       	cli
		*reg &= ~bit;
     af4:	8c 91       	ld	r24, X
     af6:	32 2f       	mov	r19, r18
     af8:	30 95       	com	r19
     afa:	83 23       	and	r24, r19
     afc:	8c 93       	st	X, r24
		*out |= bit;
     afe:	e8 81       	ld	r30, Y
     b00:	e2 2b       	or	r30, r18
     b02:	e8 83       	st	Y, r30
		SREG = oldSREG;
     b04:	9f bf       	out	0x3f, r25	; 63
     b06:	06 c0       	rjmp	.+12     	; 0xb14 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     b08:	8f b7       	in	r24, 0x3f	; 63
                cli();
     b0a:	f8 94       	cli
		*reg |= bit;
     b0c:	ec 91       	ld	r30, X
     b0e:	e2 2b       	or	r30, r18
     b10:	ec 93       	st	X, r30
		SREG = oldSREG;
     b12:	8f bf       	out	0x3f, r24	; 63
	}
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     b20:	28 2f       	mov	r18, r24
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	f9 01       	movw	r30, r18
     b26:	e7 59       	subi	r30, 0x97	; 151
     b28:	ff 4f       	sbci	r31, 0xFF	; 255
     b2a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     b2c:	f9 01       	movw	r30, r18
     b2e:	e3 58       	subi	r30, 0x83	; 131
     b30:	ff 4f       	sbci	r31, 0xFF	; 255
     b32:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     b34:	f9 01       	movw	r30, r18
     b36:	ef 56       	subi	r30, 0x6F	; 111
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     b3c:	cc 23       	and	r28, r28
     b3e:	d1 f0       	breq	.+52     	; 0xb74 <digitalWrite+0x5a>
     b40:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     b42:	81 11       	cpse	r24, r1
     b44:	0e 94 1f 05 	call	0xa3e	; 0xa3e <turnOffPWM>

	out = portOutputRegister(port);
     b48:	ec 2f       	mov	r30, r28
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	ee 0f       	add	r30, r30
     b4e:	ff 1f       	adc	r31, r31
     b50:	e1 55       	subi	r30, 0x51	; 81
     b52:	ff 4f       	sbci	r31, 0xFF	; 255
     b54:	a5 91       	lpm	r26, Z+
     b56:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     b58:	8f b7       	in	r24, 0x3f	; 63
	cli();
     b5a:	f8 94       	cli

	if (val == LOW) {
     b5c:	d1 11       	cpse	r29, r1
     b5e:	06 c0       	rjmp	.+12     	; 0xb6c <digitalWrite+0x52>
		*out &= ~bit;
     b60:	9c 91       	ld	r25, X
     b62:	e1 2f       	mov	r30, r17
     b64:	e0 95       	com	r30
     b66:	e9 23       	and	r30, r25
     b68:	ec 93       	st	X, r30
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <digitalWrite+0x58>
	} else {
		*out |= bit;
     b6c:	ec 91       	ld	r30, X
     b6e:	e1 2b       	or	r30, r17
     b70:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     b72:	8f bf       	out	0x3f, r24	; 63
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	08 95       	ret

00000b7c <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     b7c:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <_ZN14SoftwareSerial13active_objectE>
     b80:	30 91 02 04 	lds	r19, 0x0402	; 0x800402 <_ZN14SoftwareSerial13active_objectE+0x1>
     b84:	28 17       	cp	r18, r24
     b86:	39 07       	cpc	r19, r25
     b88:	99 f4       	brne	.+38     	; 0xbb0 <_ZN14SoftwareSerial4readEv+0x34>
     b8a:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <_ZN14SoftwareSerial20_receive_buffer_headE>
     b8e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     b92:	98 17       	cp	r25, r24
     b94:	81 f0       	breq	.+32     	; 0xbb6 <_ZN14SoftwareSerial4readEv+0x3a>
     b96:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <_ZN14SoftwareSerial20_receive_buffer_headE>
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	ef 5f       	subi	r30, 0xFF	; 255
     b9e:	fc 4f       	sbci	r31, 0xFC	; 252
     ba0:	80 81       	ld	r24, Z
     ba2:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <_ZN14SoftwareSerial20_receive_buffer_headE>
     ba6:	2f 5f       	subi	r18, 0xFF	; 255
     ba8:	20 93 ff 02 	sts	0x02FF, r18	; 0x8002ff <_ZN14SoftwareSerial20_receive_buffer_headE>
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	08 95       	ret
     bb0:	8f ef       	ldi	r24, 0xFF	; 255
     bb2:	9f ef       	ldi	r25, 0xFF	; 255
     bb4:	08 95       	ret
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	08 95       	ret

00000bbc <_ZN14SoftwareSerial9availableEv>:
     bbc:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <_ZN14SoftwareSerial13active_objectE>
     bc0:	30 91 02 04 	lds	r19, 0x0402	; 0x800402 <_ZN14SoftwareSerial13active_objectE+0x1>
     bc4:	28 17       	cp	r18, r24
     bc6:	39 07       	cpc	r19, r25
     bc8:	99 f4       	brne	.+38     	; 0xbf0 <_ZN14SoftwareSerial9availableEv+0x34>
     bca:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     bce:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN14SoftwareSerial20_receive_buffer_headE>
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	33 95       	inc	r19
     bd6:	28 1b       	sub	r18, r24
     bd8:	31 09       	sbc	r19, r1
     bda:	30 78       	andi	r19, 0x80	; 128
     bdc:	33 23       	and	r19, r19
     bde:	2c f4       	brge	.+10     	; 0xbea <_ZN14SoftwareSerial9availableEv+0x2e>
     be0:	21 50       	subi	r18, 0x01	; 1
     be2:	31 09       	sbc	r19, r1
     be4:	3f 6f       	ori	r19, 0xFF	; 255
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	82 2f       	mov	r24, r18
     bec:	93 2f       	mov	r25, r19
     bee:	08 95       	ret
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	08 95       	ret

00000bf6 <_ZN14SoftwareSerial5writeEh>:
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	ec 01       	movw	r28, r24
     bfe:	4c 8d       	ldd	r20, Y+28	; 0x1c
     c00:	5d 8d       	ldd	r21, Y+29	; 0x1d
     c02:	41 15       	cp	r20, r1
     c04:	51 05       	cpc	r21, r1
     c06:	29 f4       	brne	.+10     	; 0xc12 <_ZN14SoftwareSerial5writeEh+0x1c>
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9b 83       	std	Y+3, r25	; 0x03
     c0e:	8a 83       	std	Y+2, r24	; 0x02
     c10:	38 c0       	rjmp	.+112    	; 0xc82 <_ZN14SoftwareSerial5writeEh+0x8c>
     c12:	a9 89       	ldd	r26, Y+17	; 0x11
     c14:	ba 89       	ldd	r27, Y+18	; 0x12
     c16:	88 89       	ldd	r24, Y+16	; 0x10
     c18:	38 2f       	mov	r19, r24
     c1a:	30 95       	com	r19
     c1c:	1f b7       	in	r17, 0x3f	; 63
     c1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c20:	79 2f       	mov	r23, r25
     c22:	72 70       	andi	r23, 0x02	; 2
     c24:	91 fd       	sbrc	r25, 1
     c26:	60 95       	com	r22
     c28:	f8 94       	cli
     c2a:	77 23       	and	r23, r23
     c2c:	21 f0       	breq	.+8      	; 0xc36 <_ZN14SoftwareSerial5writeEh+0x40>
     c2e:	9c 91       	ld	r25, X
     c30:	98 2b       	or	r25, r24
     c32:	9c 93       	st	X, r25
     c34:	03 c0       	rjmp	.+6      	; 0xc3c <_ZN14SoftwareSerial5writeEh+0x46>
     c36:	9c 91       	ld	r25, X
     c38:	93 23       	and	r25, r19
     c3a:	9c 93       	st	X, r25
     c3c:	fa 01       	movw	r30, r20
     c3e:	31 97       	sbiw	r30, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <_ZN14SoftwareSerial5writeEh+0x48>
     c42:	98 e0       	ldi	r25, 0x08	; 8
     c44:	60 ff       	sbrs	r22, 0
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <_ZN14SoftwareSerial5writeEh+0x5a>
     c48:	2c 91       	ld	r18, X
     c4a:	28 2b       	or	r18, r24
     c4c:	2c 93       	st	X, r18
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <_ZN14SoftwareSerial5writeEh+0x60>
     c50:	2c 91       	ld	r18, X
     c52:	23 23       	and	r18, r19
     c54:	2c 93       	st	X, r18
     c56:	fa 01       	movw	r30, r20
     c58:	31 97       	sbiw	r30, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <_ZN14SoftwareSerial5writeEh+0x62>
     c5c:	66 95       	lsr	r22
     c5e:	91 50       	subi	r25, 0x01	; 1
     c60:	89 f7       	brne	.-30     	; 0xc44 <_ZN14SoftwareSerial5writeEh+0x4e>
     c62:	77 23       	and	r23, r23
     c64:	21 f0       	breq	.+8      	; 0xc6e <_ZN14SoftwareSerial5writeEh+0x78>
     c66:	8c 91       	ld	r24, X
     c68:	38 23       	and	r19, r24
     c6a:	3c 93       	st	X, r19
     c6c:	03 c0       	rjmp	.+6      	; 0xc74 <_ZN14SoftwareSerial5writeEh+0x7e>
     c6e:	9c 91       	ld	r25, X
     c70:	89 2b       	or	r24, r25
     c72:	8c 93       	st	X, r24
     c74:	1f bf       	out	0x3f, r17	; 63
     c76:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c78:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <_ZN14SoftwareSerial5writeEh+0x84>
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	ca 01       	movw	r24, r20
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	08 95       	ret

00000c8c <_ZN14SoftwareSerial5flushEv>:
     c8c:	08 95       	ret

00000c8e <_ZN14SoftwareSerial4peekEv>:
     c8e:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <_ZN14SoftwareSerial13active_objectE>
     c92:	30 91 02 04 	lds	r19, 0x0402	; 0x800402 <_ZN14SoftwareSerial13active_objectE+0x1>
     c96:	28 17       	cp	r18, r24
     c98:	39 07       	cpc	r19, r25
     c9a:	71 f4       	brne	.+28     	; 0xcb8 <_ZN14SoftwareSerial4peekEv+0x2a>
     c9c:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <_ZN14SoftwareSerial20_receive_buffer_headE>
     ca0:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     ca4:	98 17       	cp	r25, r24
     ca6:	59 f0       	breq	.+22     	; 0xcbe <_ZN14SoftwareSerial4peekEv+0x30>
     ca8:	e0 91 ff 02 	lds	r30, 0x02FF	; 0x8002ff <_ZN14SoftwareSerial20_receive_buffer_headE>
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	ef 5f       	subi	r30, 0xFF	; 255
     cb0:	fc 4f       	sbci	r31, 0xFC	; 252
     cb2:	80 81       	ld	r24, Z
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	08 95       	ret
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	9f ef       	ldi	r25, 0xFF	; 255
     cbc:	08 95       	ret
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	08 95       	ret

00000cc4 <_ZN14SoftwareSerial13stopListeningEv>:
     cc4:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <_ZN14SoftwareSerial13active_objectE>
     cc8:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <_ZN14SoftwareSerial13active_objectE+0x1>
     ccc:	e8 17       	cp	r30, r24
     cce:	f9 07       	cpc	r31, r25
     cd0:	69 f4       	brne	.+26     	; 0xcec <_ZN14SoftwareSerial13stopListeningEv+0x28>
     cd2:	a3 89       	ldd	r26, Z+19	; 0x13
     cd4:	b4 89       	ldd	r27, Z+20	; 0x14
     cd6:	9c 91       	ld	r25, X
     cd8:	85 89       	ldd	r24, Z+21	; 0x15
     cda:	80 95       	com	r24
     cdc:	89 23       	and	r24, r25
     cde:	8c 93       	st	X, r24
     ce0:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <_ZN14SoftwareSerial13active_objectE+0x1>
     ce4:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_ZN14SoftwareSerial13active_objectE>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	08 95       	ret
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	08 95       	ret

00000cf0 <_ZN14SoftwareSerial6listenEv>:
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
     cf6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cf8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cfa:	89 2b       	or	r24, r25
     cfc:	f1 f0       	breq	.+60     	; 0xd3a <_ZN14SoftwareSerial6listenEv+0x4a>
     cfe:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <_ZN14SoftwareSerial13active_objectE>
     d02:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <_ZN14SoftwareSerial13active_objectE+0x1>
     d06:	c8 17       	cp	r28, r24
     d08:	d9 07       	cpc	r29, r25
     d0a:	c9 f0       	breq	.+50     	; 0xd3e <_ZN14SoftwareSerial6listenEv+0x4e>
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	11 f0       	breq	.+4      	; 0xd14 <_ZN14SoftwareSerial6listenEv+0x24>
     d10:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_ZN14SoftwareSerial13stopListeningEv>
     d14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d16:	8e 7f       	andi	r24, 0xFE	; 254
     d18:	8e 8f       	std	Y+30, r24	; 0x1e
     d1a:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d1e:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <_ZN14SoftwareSerial20_receive_buffer_headE>
     d22:	d0 93 02 04 	sts	0x0402, r29	; 0x800402 <_ZN14SoftwareSerial13active_objectE+0x1>
     d26:	c0 93 01 04 	sts	0x0401, r28	; 0x800401 <_ZN14SoftwareSerial13active_objectE>
     d2a:	eb 89       	ldd	r30, Y+19	; 0x13
     d2c:	fc 89       	ldd	r31, Y+20	; 0x14
     d2e:	90 81       	ld	r25, Z
     d30:	8d 89       	ldd	r24, Y+21	; 0x15
     d32:	89 2b       	or	r24, r25
     d34:	80 83       	st	Z, r24
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <_ZN14SoftwareSerial6listenEv+0x50>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <_ZN14SoftwareSerial6listenEv+0x50>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <__vector_3>:
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
     d50:	2f 93       	push	r18
     d52:	3f 93       	push	r19
     d54:	4f 93       	push	r20
     d56:	5f 93       	push	r21
     d58:	6f 93       	push	r22
     d5a:	7f 93       	push	r23
     d5c:	8f 93       	push	r24
     d5e:	9f 93       	push	r25
     d60:	af 93       	push	r26
     d62:	bf 93       	push	r27
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ef 93       	push	r30
     d6a:	ff 93       	push	r31
     d6c:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <_ZN14SoftwareSerial13active_objectE>
     d70:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <_ZN14SoftwareSerial13active_objectE+0x1>
     d74:	10 97       	sbiw	r26, 0x00	; 0
     d76:	09 f4       	brne	.+2      	; 0xd7a <__vector_3+0x34>
     d78:	78 c0       	rjmp	.+240    	; 0xe6a <__vector_3+0x124>
     d7a:	5e 96       	adiw	r26, 0x1e	; 30
     d7c:	8c 91       	ld	r24, X
     d7e:	5e 97       	sbiw	r26, 0x1e	; 30
     d80:	81 ff       	sbrs	r24, 1
     d82:	0d c0       	rjmp	.+26     	; 0xd9e <__vector_3+0x58>
     d84:	1e 96       	adiw	r26, 0x0e	; 14
     d86:	ed 91       	ld	r30, X+
     d88:	fc 91       	ld	r31, X
     d8a:	1f 97       	sbiw	r26, 0x0f	; 15
     d8c:	90 81       	ld	r25, Z
     d8e:	1d 96       	adiw	r26, 0x0d	; 13
     d90:	8c 91       	ld	r24, X
     d92:	1d 97       	sbiw	r26, 0x0d	; 13
     d94:	98 23       	and	r25, r24
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	71 f4       	brne	.+28     	; 0xdb6 <__vector_3+0x70>
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	0c c0       	rjmp	.+24     	; 0xdb6 <__vector_3+0x70>
     d9e:	1e 96       	adiw	r26, 0x0e	; 14
     da0:	ed 91       	ld	r30, X+
     da2:	fc 91       	ld	r31, X
     da4:	1f 97       	sbiw	r26, 0x0f	; 15
     da6:	90 81       	ld	r25, Z
     da8:	1d 96       	adiw	r26, 0x0d	; 13
     daa:	8c 91       	ld	r24, X
     dac:	1d 97       	sbiw	r26, 0x0d	; 13
     dae:	98 23       	and	r25, r24
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	09 f0       	breq	.+2      	; 0xdb6 <__vector_3+0x70>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	88 23       	and	r24, r24
     db8:	09 f4       	brne	.+2      	; 0xdbc <__vector_3+0x76>
     dba:	57 c0       	rjmp	.+174    	; 0xe6a <__vector_3+0x124>
     dbc:	53 96       	adiw	r26, 0x13	; 19
     dbe:	ed 91       	ld	r30, X+
     dc0:	fc 91       	ld	r31, X
     dc2:	54 97       	sbiw	r26, 0x14	; 20
     dc4:	90 81       	ld	r25, Z
     dc6:	55 96       	adiw	r26, 0x15	; 21
     dc8:	8c 91       	ld	r24, X
     dca:	55 97       	sbiw	r26, 0x15	; 21
     dcc:	80 95       	com	r24
     dce:	89 23       	and	r24, r25
     dd0:	80 83       	st	Z, r24
     dd2:	56 96       	adiw	r26, 0x16	; 22
     dd4:	8d 91       	ld	r24, X+
     dd6:	9c 91       	ld	r25, X
     dd8:	57 97       	sbiw	r26, 0x17	; 23
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <__vector_3+0x94>
     dde:	58 96       	adiw	r26, 0x18	; 24
     de0:	6d 91       	ld	r22, X+
     de2:	7c 91       	ld	r23, X
     de4:	59 97       	sbiw	r26, 0x19	; 25
     de6:	1e 96       	adiw	r26, 0x0e	; 14
     de8:	cd 91       	ld	r28, X+
     dea:	dc 91       	ld	r29, X
     dec:	1f 97       	sbiw	r26, 0x0f	; 15
     dee:	1d 96       	adiw	r26, 0x0d	; 13
     df0:	5c 91       	ld	r21, X
     df2:	1d 97       	sbiw	r26, 0x0d	; 13
     df4:	38 e0       	ldi	r19, 0x08	; 8
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	fb 01       	movw	r30, r22
     dfa:	31 97       	sbiw	r30, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <__vector_3+0xb4>
     dfe:	84 2f       	mov	r24, r20
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	95 95       	asr	r25
     e04:	87 95       	ror	r24
     e06:	48 2f       	mov	r20, r24
     e08:	28 81       	ld	r18, Y
     e0a:	25 23       	and	r18, r21
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__vector_3+0xca>
     e0e:	40 68       	ori	r20, 0x80	; 128
     e10:	31 50       	subi	r19, 0x01	; 1
     e12:	91 f7       	brne	.-28     	; 0xdf8 <__vector_3+0xb2>
     e14:	5e 96       	adiw	r26, 0x1e	; 30
     e16:	8c 91       	ld	r24, X
     e18:	5e 97       	sbiw	r26, 0x1e	; 30
     e1a:	81 fd       	sbrc	r24, 1
     e1c:	40 95       	com	r20
     e1e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <_ZN14SoftwareSerial20_receive_buffer_headE>
     e28:	28 17       	cp	r18, r24
     e2a:	49 f0       	breq	.+18     	; 0xe3e <__vector_3+0xf8>
     e2c:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	ef 5f       	subi	r30, 0xFF	; 255
     e34:	fc 4f       	sbci	r31, 0xFC	; 252
     e36:	40 83       	st	Z, r20
     e38:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     e3c:	07 c0       	rjmp	.+14     	; 0xe4c <__vector_3+0x106>
     e3e:	5e 96       	adiw	r26, 0x1e	; 30
     e40:	8c 91       	ld	r24, X
     e42:	5e 97       	sbiw	r26, 0x1e	; 30
     e44:	81 60       	ori	r24, 0x01	; 1
     e46:	5e 96       	adiw	r26, 0x1e	; 30
     e48:	8c 93       	st	X, r24
     e4a:	5e 97       	sbiw	r26, 0x1e	; 30
     e4c:	5a 96       	adiw	r26, 0x1a	; 26
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	5b 97       	sbiw	r26, 0x1b	; 27
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <__vector_3+0x10e>
     e58:	53 96       	adiw	r26, 0x13	; 19
     e5a:	ed 91       	ld	r30, X+
     e5c:	fc 91       	ld	r31, X
     e5e:	54 97       	sbiw	r26, 0x14	; 20
     e60:	90 81       	ld	r25, Z
     e62:	55 96       	adiw	r26, 0x15	; 21
     e64:	8c 91       	ld	r24, X
     e66:	89 2b       	or	r24, r25
     e68:	80 83       	st	Z, r24
     e6a:	ff 91       	pop	r31
     e6c:	ef 91       	pop	r30
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	bf 91       	pop	r27
     e74:	af 91       	pop	r26
     e76:	9f 91       	pop	r25
     e78:	8f 91       	pop	r24
     e7a:	7f 91       	pop	r23
     e7c:	6f 91       	pop	r22
     e7e:	5f 91       	pop	r21
     e80:	4f 91       	pop	r20
     e82:	3f 91       	pop	r19
     e84:	2f 91       	pop	r18
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <_ZN14SoftwareSerial5setTXEh>:
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	ec 01       	movw	r28, r24
     e98:	16 2f       	mov	r17, r22
     e9a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e9c:	66 95       	lsr	r22
     e9e:	61 70       	andi	r22, 0x01	; 1
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	68 27       	eor	r22, r24
     ea4:	81 2f       	mov	r24, r17
     ea6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <digitalWrite>
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	81 2f       	mov	r24, r17
     eae:	0e 94 4e 05 	call	0xa9c	; 0xa9c <pinMode>
     eb2:	81 2f       	mov	r24, r17
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	fc 01       	movw	r30, r24
     eb8:	e3 58       	subi	r30, 0x83	; 131
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	e4 91       	lpm	r30, Z
     ebe:	e8 8b       	std	Y+16, r30	; 0x10
     ec0:	fc 01       	movw	r30, r24
     ec2:	ef 56       	subi	r30, 0x6F	; 111
     ec4:	ff 4f       	sbci	r31, 0xFF	; 255
     ec6:	e4 91       	lpm	r30, Z
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	e1 55       	subi	r30, 0x51	; 81
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	85 91       	lpm	r24, Z+
     ed4:	94 91       	lpm	r25, Z
     ed6:	9a 8b       	std	Y+18, r25	; 0x12
     ed8:	89 8b       	std	Y+17, r24	; 0x11
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	08 95       	ret

00000ee2 <_ZN14SoftwareSerial5setRXEh>:
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
     eea:	16 2f       	mov	r17, r22
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	81 2f       	mov	r24, r17
     ef0:	0e 94 4e 05 	call	0xa9c	; 0xa9c <pinMode>
     ef4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ef6:	81 fd       	sbrc	r24, 1
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <_ZN14SoftwareSerial5setRXEh+0x20>
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	81 2f       	mov	r24, r17
     efe:	0e 94 8d 05 	call	0xb1a	; 0xb1a <digitalWrite>
     f02:	1c 87       	std	Y+12, r17	; 0x0c
     f04:	61 2f       	mov	r22, r17
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	fb 01       	movw	r30, r22
     f0a:	e3 58       	subi	r30, 0x83	; 131
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	e4 91       	lpm	r30, Z
     f10:	ed 87       	std	Y+13, r30	; 0x0d
     f12:	fb 01       	movw	r30, r22
     f14:	ef 56       	subi	r30, 0x6F	; 111
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	e4 91       	lpm	r30, Z
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	ee 0f       	add	r30, r30
     f1e:	ff 1f       	adc	r31, r31
     f20:	eb 55       	subi	r30, 0x5B	; 91
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	85 91       	lpm	r24, Z+
     f26:	94 91       	lpm	r25, Z
     f28:	9f 87       	std	Y+15, r25	; 0x0f
     f2a:	8e 87       	std	Y+14, r24	; 0x0e
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	08 95       	ret

00000f34 <_ZN14SoftwareSerialC1Ehhb>:
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	ec 01       	movw	r28, r24
     f3c:	16 2f       	mov	r17, r22
     f3e:	1b 82       	std	Y+3, r1	; 0x03
     f40:	1a 82       	std	Y+2, r1	; 0x02
     f42:	88 ee       	ldi	r24, 0xE8	; 232
     f44:	93 e0       	ldi	r25, 0x03	; 3
     f46:	a0 e0       	ldi	r26, 0x00	; 0
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	8c 83       	std	Y+4, r24	; 0x04
     f4c:	9d 83       	std	Y+5, r25	; 0x05
     f4e:	ae 83       	std	Y+6, r26	; 0x06
     f50:	bf 83       	std	Y+7, r27	; 0x07
     f52:	80 e3       	ldi	r24, 0x30	; 48
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	99 83       	std	Y+1, r25	; 0x01
     f58:	88 83       	st	Y, r24
     f5a:	1f 8a       	std	Y+23, r1	; 0x17
     f5c:	1e 8a       	std	Y+22, r1	; 0x16
     f5e:	19 8e       	std	Y+25, r1	; 0x19
     f60:	18 8e       	std	Y+24, r1	; 0x18
     f62:	1b 8e       	std	Y+27, r1	; 0x1b
     f64:	1a 8e       	std	Y+26, r1	; 0x1a
     f66:	1d 8e       	std	Y+29, r1	; 0x1d
     f68:	1c 8e       	std	Y+28, r1	; 0x1c
     f6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f6c:	8e 7f       	andi	r24, 0xFE	; 254
     f6e:	20 fb       	bst	r18, 0
     f70:	81 f9       	bld	r24, 1
     f72:	8e 8f       	std	Y+30, r24	; 0x1e
     f74:	64 2f       	mov	r22, r20
     f76:	ce 01       	movw	r24, r28
     f78:	0e 94 48 07 	call	0xe90	; 0xe90 <_ZN14SoftwareSerial5setTXEh>
     f7c:	61 2f       	mov	r22, r17
     f7e:	ce 01       	movw	r24, r28
     f80:	0e 94 71 07 	call	0xee2	; 0xee2 <_ZN14SoftwareSerial5setRXEh>
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	1f 91       	pop	r17
     f8a:	08 95       	ret

00000f8c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	ec 01       	movw	r28, r24
     f92:	9a 01       	movw	r18, r20
     f94:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
     f96:	1b 8e       	std	Y+27, r1	; 0x1b
     f98:	1a 8e       	std	Y+26, r1	; 0x1a
     f9a:	19 8e       	std	Y+25, r1	; 0x19
     f9c:	18 8e       	std	Y+24, r1	; 0x18
     f9e:	1f 8a       	std	Y+23, r1	; 0x17
     fa0:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	79 e0       	ldi	r23, 0x09	; 9
     fa6:	8d e3       	ldi	r24, 0x3D	; 61
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 40 0b 	call	0x1680	; 0x1680 <__udivmodsi4>
     fae:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     fb0:	24 30       	cpi	r18, 0x04	; 4
     fb2:	31 05       	cpc	r19, r1
     fb4:	18 f0       	brcs	.+6      	; 0xfbc <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
     fb6:	c9 01       	movw	r24, r18
     fb8:	03 97       	sbiw	r24, 0x03	; 3
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
     fc0:	9d 8f       	std	Y+29, r25	; 0x1d
     fc2:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
     fc4:	8c 85       	ldd	r24, Y+12	; 0x0c
     fc6:	86 31       	cpi	r24, 0x16	; 22
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <_ZN14SoftwareSerial5beginEl+0x40>
     fca:	41 c0       	rjmp	.+130    	; 0x104e <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     fcc:	b9 01       	movw	r22, r18
     fce:	76 95       	lsr	r23
     fd0:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     fd2:	64 31       	cpi	r22, 0x14	; 20
     fd4:	71 05       	cpc	r23, r1
     fd6:	18 f0       	brcs	.+6      	; 0xfde <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
     fd8:	63 51       	subi	r22, 0x13	; 19
     fda:	71 09       	sbc	r23, r1
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
     fe2:	7f 8b       	std	Y+23, r23	; 0x17
     fe4:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
     fe6:	36 97       	sbiw	r30, 0x06	; 6
     fe8:	20 f0       	brcs	.+8      	; 0xff2 <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
     fea:	b9 01       	movw	r22, r18
     fec:	65 50       	subi	r22, 0x05	; 5
     fee:	71 09       	sbc	r23, r1
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
     ff6:	79 8f       	std	Y+25, r23	; 0x19
     ff8:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
     ffa:	b9 01       	movw	r22, r18
     ffc:	66 0f       	add	r22, r22
     ffe:	77 1f       	adc	r23, r23
    1000:	26 0f       	add	r18, r22
    1002:	37 1f       	adc	r19, r23
    1004:	36 95       	lsr	r19
    1006:	27 95       	ror	r18
    1008:	36 95       	lsr	r19
    100a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    100c:	2d 30       	cpi	r18, 0x0D	; 13
    100e:	31 05       	cpc	r19, r1
    1010:	10 f1       	brcs	.+68     	; 0x1056 <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
    1012:	2c 50       	subi	r18, 0x0C	; 12
    1014:	31 09       	sbc	r19, r1
    1016:	21 c0       	rjmp	.+66     	; 0x105a <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1018:	21 e0       	ldi	r18, 0x01	; 1
    101a:	8e 30       	cpi	r24, 0x0E	; 14
    101c:	08 f4       	brcc	.+2      	; 0x1020 <_ZN14SoftwareSerial5beginEl+0x94>
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <_ZN14SoftwareSerial5beginEl+0x9a>
    1024:	88 0f       	add	r24, r24
    1026:	2a 95       	dec	r18
    1028:	ea f7       	brpl	.-6      	; 0x1024 <_ZN14SoftwareSerial5beginEl+0x98>
    102a:	98 2b       	or	r25, r24
    102c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1030:	9c 85       	ldd	r25, Y+12	; 0x0c
    1032:	98 30       	cpi	r25, 0x08	; 8
    1034:	d0 f0       	brcs	.+52     	; 0x106a <_ZN14SoftwareSerial5beginEl+0xde>
    1036:	9e 30       	cpi	r25, 0x0E	; 14
    1038:	10 f1       	brcs	.+68     	; 0x107e <_ZN14SoftwareSerial5beginEl+0xf2>
    103a:	96 31       	cpi	r25, 0x16	; 22
    103c:	58 f1       	brcs	.+86     	; 0x1094 <_ZN14SoftwareSerial5beginEl+0x108>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	2a c0       	rjmp	.+84     	; 0x1098 <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1044:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1046:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1048:	9d 8d       	ldd	r25, Y+29	; 0x1d
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    104e:	ce 01       	movw	r24, r28
    1050:	0e 94 78 06 	call	0xcf0	; 0xcf0 <_ZN14SoftwareSerial6listenEv>
}
    1054:	2a c0       	rjmp	.+84     	; 0x10aa <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    1056:	21 e0       	ldi	r18, 0x01	; 1
    1058:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    105a:	3b 8f       	std	Y+27, r19	; 0x1b
    105c:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    105e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    1062:	88 30       	cpi	r24, 0x08	; 8
    1064:	c8 f6       	brcc	.-78     	; 0x1018 <_ZN14SoftwareSerial5beginEl+0x8c>
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	e0 cf       	rjmp	.-64     	; 0x102a <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    106a:	2d e6       	ldi	r18, 0x6D	; 109
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	3c 8b       	std	Y+20, r19	; 0x14
    1070:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <_ZN14SoftwareSerial5beginEl+0xec>
    1076:	88 0f       	add	r24, r24
    1078:	9a 95       	dec	r25
    107a:	ea f7       	brpl	.-6      	; 0x1076 <_ZN14SoftwareSerial5beginEl+0xea>
    107c:	e3 cf       	rjmp	.-58     	; 0x1044 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    107e:	2b e6       	ldi	r18, 0x6B	; 107
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	3c 8b       	std	Y+20, r19	; 0x14
    1084:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1086:	98 50       	subi	r25, 0x08	; 8
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	01 c0       	rjmp	.+2      	; 0x108e <_ZN14SoftwareSerial5beginEl+0x102>
    108c:	88 0f       	add	r24, r24
    108e:	9a 95       	dec	r25
    1090:	ea f7       	brpl	.-6      	; 0x108c <_ZN14SoftwareSerial5beginEl+0x100>
    1092:	d8 cf       	rjmp	.-80     	; 0x1044 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1094:	2c e6       	ldi	r18, 0x6C	; 108
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	3c 8b       	std	Y+20, r19	; 0x14
    109a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    109c:	9e 50       	subi	r25, 0x0E	; 14
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <_ZN14SoftwareSerial5beginEl+0x118>
    10a2:	88 0f       	add	r24, r24
    10a4:	9a 95       	dec	r25
    10a6:	ea f7       	brpl	.-6      	; 0x10a2 <_ZN14SoftwareSerial5beginEl+0x116>
    10a8:	cd cf       	rjmp	.-102    	; 0x1044 <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <_ZN21GsmCommunicationClass13displayStringEPc>:
		}
		Serial.print("\n");
	}
}

void GsmCommunicationClass::checkReceivedData(){
    10b0:	cf 93       	push	r28
    10b2:	df 93       	push	r29
    10b4:	61 15       	cp	r22, r1
    10b6:	71 05       	cpc	r23, r1
    10b8:	91 f0       	breq	.+36     	; 0x10de <_ZN21GsmCommunicationClass13displayStringEPc+0x2e>
    10ba:	eb 01       	movw	r28, r22
    10bc:	68 81       	ld	r22, Y
    10be:	66 23       	and	r22, r22
    10c0:	41 f0       	breq	.+16     	; 0x10d2 <_ZN21GsmCommunicationClass13displayStringEPc+0x22>
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	8c e4       	ldi	r24, 0x4C	; 76
    10c6:	92 e0       	ldi	r25, 0x02	; 2
    10c8:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN5Print5printEc>
    10cc:	69 91       	ld	r22, Y+
    10ce:	61 11       	cpse	r22, r1
    10d0:	f9 cf       	rjmp	.-14     	; 0x10c4 <_ZN21GsmCommunicationClass13displayStringEPc+0x14>
    10d2:	69 ef       	ldi	r22, 0xF9	; 249
    10d4:	71 e0       	ldi	r23, 0x01	; 1
    10d6:	8c e4       	ldi	r24, 0x4C	; 76
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN5Print5printEPKc>
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <_ZN21GsmCommunicationClass10readSerialEv>:
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ec 01       	movw	r28, r24
    10f2:	2f ef       	ldi	r18, 0xFF	; 255
    10f4:	89 e6       	ldi	r24, 0x69	; 105
    10f6:	98 e1       	ldi	r25, 0x18	; 24
    10f8:	21 50       	subi	r18, 0x01	; 1
    10fa:	80 40       	sbci	r24, 0x00	; 0
    10fc:	90 40       	sbci	r25, 0x00	; 0
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <_ZN21GsmCommunicationClass10readSerialEv+0x14>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <_ZN21GsmCommunicationClass10readSerialEv+0x1e>
    1102:	00 00       	nop
    1104:	7e 01       	movw	r14, r28
    1106:	a4 e0       	ldi	r26, 0x04	; 4
    1108:	ea 0e       	add	r14, r26
    110a:	f1 1c       	adc	r15, r1
    110c:	ce 01       	movw	r24, r28
    110e:	8c 5f       	subi	r24, 0xFC	; 252
    1110:	9e 4f       	sbci	r25, 0xFE	; 254
    1112:	f7 01       	movw	r30, r14
    1114:	11 92       	st	Z+, r1
    1116:	e8 17       	cp	r30, r24
    1118:	f9 07       	cpc	r31, r25
    111a:	e1 f7       	brne	.-8      	; 0x1114 <_ZN21GsmCommunicationClass10readSerialEv+0x30>
    111c:	00 e0       	ldi	r16, 0x00	; 0
    111e:	10 e0       	ldi	r17, 0x00	; 0
    1120:	88 81       	ld	r24, Y
    1122:	99 81       	ldd	r25, Y+1	; 0x01
    1124:	dc 01       	movw	r26, r24
    1126:	ed 91       	ld	r30, X+
    1128:	fc 91       	ld	r31, X
    112a:	00 84       	ldd	r0, Z+8	; 0x08
    112c:	f1 85       	ldd	r31, Z+9	; 0x09
    112e:	e0 2d       	mov	r30, r0
    1130:	09 95       	icall
    1132:	89 2b       	or	r24, r25
    1134:	79 f0       	breq	.+30     	; 0x1154 <_ZN21GsmCommunicationClass10readSerialEv+0x70>
    1136:	88 81       	ld	r24, Y
    1138:	99 81       	ldd	r25, Y+1	; 0x01
    113a:	dc 01       	movw	r26, r24
    113c:	ed 91       	ld	r30, X+
    113e:	fc 91       	ld	r31, X
    1140:	02 84       	ldd	r0, Z+10	; 0x0a
    1142:	f3 85       	ldd	r31, Z+11	; 0x0b
    1144:	e0 2d       	mov	r30, r0
    1146:	09 95       	icall
    1148:	f7 01       	movw	r30, r14
    114a:	81 93       	st	Z+, r24
    114c:	7f 01       	movw	r14, r30
    114e:	0f 5f       	subi	r16, 0xFF	; 255
    1150:	1f 4f       	sbci	r17, 0xFF	; 255
    1152:	e6 cf       	rjmp	.-52     	; 0x1120 <_ZN21GsmCommunicationClass10readSerialEv+0x3c>
    1154:	fe 01       	movw	r30, r28
    1156:	e0 0f       	add	r30, r16
    1158:	f1 1f       	adc	r31, r17
    115a:	14 82       	std	Z+4, r1	; 0x04
    115c:	be 01       	movw	r22, r28
    115e:	6c 5f       	subi	r22, 0xFC	; 252
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	ce 01       	movw	r24, r28
    1164:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN21GsmCommunicationClass13displayStringEPc>
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	08 95       	ret

00001176 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial>:
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
    117c:	1b 82       	std	Y+3, r1	; 0x03
    117e:	1a 82       	std	Y+2, r1	; 0x02
    1180:	fc 01       	movw	r30, r24
    1182:	ec 5f       	subi	r30, 0xFC	; 252
    1184:	fe 4f       	sbci	r31, 0xFE	; 254
    1186:	10 82       	st	Z, r1
    1188:	31 96       	adiw	r30, 0x01	; 1
    118a:	10 82       	st	Z, r1
    118c:	31 96       	adiw	r30, 0x01	; 1
    118e:	10 82       	st	Z, r1
    1190:	79 83       	std	Y+1, r23	; 0x01
    1192:	68 83       	st	Y, r22
    1194:	26 e0       	ldi	r18, 0x06	; 6
    1196:	40 e8       	ldi	r20, 0x80	; 128
    1198:	55 e2       	ldi	r21, 0x25	; 37
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	8c e4       	ldi	r24, 0x4C	; 76
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial5beginEmh>
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	55 e2       	ldi	r21, 0x25	; 37
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	88 81       	ld	r24, Y
    11b0:	99 81       	ldd	r25, Y+1	; 0x01
    11b2:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN14SoftwareSerial5beginEl>
    11b6:	2f ef       	ldi	r18, 0xFF	; 255
    11b8:	83 ed       	ldi	r24, 0xD3	; 211
    11ba:	90 e3       	ldi	r25, 0x30	; 48
    11bc:	21 50       	subi	r18, 0x01	; 1
    11be:	80 40       	sbci	r24, 0x00	; 0
    11c0:	90 40       	sbci	r25, 0x00	; 0
    11c2:	e1 f7       	brne	.-8      	; 0x11bc <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x46>
    11c4:	00 c0       	rjmp	.+0      	; 0x11c6 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x50>
    11c6:	00 00       	nop
    11c8:	6e e3       	ldi	r22, 0x3E	; 62
    11ca:	71 e0       	ldi	r23, 0x01	; 1
    11cc:	88 81       	ld	r24, Y
    11ce:	99 81       	ldd	r25, Y+1	; 0x01
    11d0:	0e 94 31 03 	call	0x662	; 0x662 <_ZN5Print7printlnEPKc>
    11d4:	ce 01       	movw	r24, r28
    11d6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN21GsmCommunicationClass10readSerialEv>
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <_ZN21GsmCommunicationClass18checkAuthorizationEPc>:
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    11e0:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <__data_end>
    11e4:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <__data_end+0x1>
    11e8:	02 80       	ldd	r0, Z+2	; 0x02
    11ea:	f3 81       	ldd	r31, Z+3	; 0x03
    11ec:	e0 2d       	mov	r30, r0
    11ee:	43 e1       	ldi	r20, 0x13	; 19
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	61 e4       	ldi	r22, 0x41	; 65
    11f4:	71 e0       	ldi	r23, 0x01	; 1
    11f6:	8c e4       	ldi	r24, 0x4C	; 76
    11f8:	92 e0       	ldi	r25, 0x02	; 2
    11fa:	09 95       	icall

int GsmCommunicationClass::checkAuthorization(char *nrToCheck){
	Serial.write("CheckAuthorization\n");
	//displayString(nrToCheck);
	return(1);
}
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	08 95       	ret

00001202 <_ZN21GsmCommunicationClass12setUpSmsModeEv>:
	

void GsmCommunicationClass::setUpSmsMode(){
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	ec 01       	movw	r28, r24
	GsmSerial->println("AT+CMGF=1");	// Configure TEXT mode
    120c:	65 e5       	ldi	r22, 0x55	; 85
    120e:	71 e0       	ldi	r23, 0x01	; 1
    1210:	88 81       	ld	r24, Y
    1212:	99 81       	ldd	r25, Y+1	; 0x01
    1214:	0e 94 31 03 	call	0x662	; 0x662 <_ZN5Print7printlnEPKc>
	readSerial();
    1218:	ce 01       	movw	r24, r28
    121a:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN21GsmCommunicationClass10readSerialEv>
	
	GsmSerial->println("AT+CNMI=1,2,0,0,0");	// define how newly arrived SMS Msg. should be handled
    121e:	6f e5       	ldi	r22, 0x5F	; 95
    1220:	71 e0       	ldi	r23, 0x01	; 1
    1222:	88 81       	ld	r24, Y
    1224:	99 81       	ldd	r25, Y+1	; 0x01
    1226:	0e 94 31 03 	call	0x662	; 0x662 <_ZN5Print7printlnEPKc>
	readSerial();
    122a:	ce 01       	movw	r24, r28
    122c:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN21GsmCommunicationClass10readSerialEv>
	// check Answer
	if(strstr(receiveBuffer, "OK") != NULL){ // check if configured
    1230:	8e 01       	movw	r16, r28
    1232:	0c 5f       	subi	r16, 0xFC	; 252
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
    1236:	61 e7       	ldi	r22, 0x71	; 113
    1238:	71 e0       	ldi	r23, 0x01	; 1
    123a:	c8 01       	movw	r24, r16
    123c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <strstr>
    1240:	89 2b       	or	r24, r25
    1242:	b1 f0       	breq	.+44     	; 0x1270 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0x6e>
    1244:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <__data_end>
    1248:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <__data_end+0x1>
    124c:	02 80       	ldd	r0, Z+2	; 0x02
    124e:	f3 81       	ldd	r31, Z+3	; 0x03
    1250:	e0 2d       	mov	r30, r0
    1252:	48 e1       	ldi	r20, 0x18	; 24
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	64 e7       	ldi	r22, 0x74	; 116
    1258:	71 e0       	ldi	r23, 0x01	; 1
    125a:	8c e4       	ldi	r24, 0x4C	; 76
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	09 95       	icall
		Serial.write("SMS Mode is configured\n\n");
		gsmIsConnectedOld = gsmIsConnected;
    1260:	fe 01       	movw	r30, r28
    1262:	eb 5f       	subi	r30, 0xFB	; 251
    1264:	fe 4f       	sbci	r31, 0xFE	; 254
    1266:	cc 5f       	subi	r28, 0xFC	; 252
    1268:	de 4f       	sbci	r29, 0xFE	; 254
    126a:	88 81       	ld	r24, Y
    126c:	80 83       	st	Z, r24
    126e:	24 c0       	rjmp	.+72     	; 0x12b8 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0xb6>
	}else if(strstr(receiveBuffer, "ERROR")){
    1270:	6d e8       	ldi	r22, 0x8D	; 141
    1272:	71 e0       	ldi	r23, 0x01	; 1
    1274:	c8 01       	movw	r24, r16
    1276:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <strstr>
    127a:	89 2b       	or	r24, r25
    127c:	79 f0       	breq	.+30     	; 0x129c <_ZN21GsmCommunicationClass12setUpSmsModeEv+0x9a>
    127e:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <__data_end>
    1282:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <__data_end+0x1>
    1286:	02 80       	ldd	r0, Z+2	; 0x02
    1288:	f3 81       	ldd	r31, Z+3	; 0x03
    128a:	e0 2d       	mov	r30, r0
    128c:	40 e2       	ldi	r20, 0x20	; 32
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	63 e9       	ldi	r22, 0x93	; 147
    1292:	71 e0       	ldi	r23, 0x01	; 1
    1294:	8c e4       	ldi	r24, 0x4C	; 76
    1296:	92 e0       	ldi	r25, 0x02	; 2
    1298:	09 95       	icall
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0xb6>
    129c:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <__data_end>
    12a0:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <__data_end+0x1>
    12a4:	02 80       	ldd	r0, Z+2	; 0x02
    12a6:	f3 81       	ldd	r31, Z+3	; 0x03
    12a8:	e0 2d       	mov	r30, r0
    12aa:	41 e2       	ldi	r20, 0x21	; 33
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	64 eb       	ldi	r22, 0xB4	; 180
    12b0:	71 e0       	ldi	r23, 0x01	; 1
    12b2:	8c e4       	ldi	r24, 0x4C	; 76
    12b4:	92 e0       	ldi	r25, 0x02	; 2
    12b6:	09 95       	icall
		Serial.write("ERROR in SMS mode configuration\n");
	}else{
		Serial.write("No response in SMS configuration\n");
	}
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	08 95       	ret

000012c2 <_ZN21GsmCommunicationClass15checkConnectionEv>:
/*                                                                           */
/*  History     : 23.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void GsmCommunicationClass::checkConnection()
{	
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
	if(checkConnectionTime > 10){	// check connection loop rate
    12ca:	dc 01       	movw	r26, r24
    12cc:	12 96       	adiw	r26, 0x02	; 2
    12ce:	2d 91       	ld	r18, X+
    12d0:	3c 91       	ld	r19, X
    12d2:	13 97       	sbiw	r26, 0x03	; 3
    12d4:	2b 30       	cpi	r18, 0x0B	; 11
    12d6:	31 05       	cpc	r19, r1
    12d8:	0c f4       	brge	.+2      	; 0x12dc <_ZN21GsmCommunicationClass15checkConnectionEv+0x1a>
    12da:	4c c0       	rjmp	.+152    	; 0x1374 <_ZN21GsmCommunicationClass15checkConnectionEv+0xb2>
    12dc:	ec 01       	movw	r28, r24
		checkConnectionTime = 0;
    12de:	1b 82       	std	Y+3, r1	; 0x03
    12e0:	1a 82       	std	Y+2, r1	; 0x02
	if (GsmSerial->available()==0){
    12e2:	88 81       	ld	r24, Y
    12e4:	99 81       	ldd	r25, Y+1	; 0x01
    12e6:	dc 01       	movw	r26, r24
    12e8:	ed 91       	ld	r30, X+
    12ea:	fc 91       	ld	r31, X
    12ec:	00 84       	ldd	r0, Z+8	; 0x08
    12ee:	f1 85       	ldd	r31, Z+9	; 0x09
    12f0:	e0 2d       	mov	r30, r0
    12f2:	09 95       	icall
    12f4:	89 2b       	or	r24, r25
    12f6:	31 f4       	brne	.+12     	; 0x1304 <_ZN21GsmCommunicationClass15checkConnectionEv+0x42>
		GsmSerial->println("AT+CREG?");		// ask if connected to cellular Network
    12f8:	66 ed       	ldi	r22, 0xD6	; 214
    12fa:	71 e0       	ldi	r23, 0x01	; 1
    12fc:	88 81       	ld	r24, Y
    12fe:	99 81       	ldd	r25, Y+1	; 0x01
    1300:	0e 94 31 03 	call	0x662	; 0x662 <_ZN5Print7printlnEPKc>
	}
	readSerial();		// read Answer
    1304:	ce 01       	movw	r24, r28
    1306:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN21GsmCommunicationClass10readSerialEv>
	
	if(strstr(receiveBuffer, "+CREG: 0,1") != NULL){ // check if connection was successful
    130a:	6f ed       	ldi	r22, 0xDF	; 223
    130c:	71 e0       	ldi	r23, 0x01	; 1
    130e:	ce 01       	movw	r24, r28
    1310:	04 96       	adiw	r24, 0x04	; 4
    1312:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <strstr>
    1316:	89 2b       	or	r24, r25
    1318:	49 f1       	breq	.+82     	; 0x136c <_ZN21GsmCommunicationClass15checkConnectionEv+0xaa>
		gsmIsConnected = true;
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	8e 01       	movw	r16, r28
    131e:	0c 5f       	subi	r16, 0xFC	; 252
    1320:	1e 4f       	sbci	r17, 0xFE	; 254
    1322:	f8 01       	movw	r30, r16
    1324:	80 83       	st	Z, r24
    1326:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <__data_end>
    132a:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <__data_end+0x1>
    132e:	02 80       	ldd	r0, Z+2	; 0x02
    1330:	f3 81       	ldd	r31, Z+3	; 0x03
    1332:	e0 2d       	mov	r30, r0
    1334:	40 e1       	ldi	r20, 0x10	; 16
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	6a ee       	ldi	r22, 0xEA	; 234
    133a:	71 e0       	ldi	r23, 0x01	; 1
    133c:	8c e4       	ldi	r24, 0x4C	; 76
    133e:	92 e0       	ldi	r25, 0x02	; 2
    1340:	09 95       	icall
		Serial.write("GSM Connected\n\n\n");
		if(gsmIsConnected == true && gsmIsConnectedOld == false){
    1342:	d8 01       	movw	r26, r16
    1344:	8c 91       	ld	r24, X
    1346:	88 23       	and	r24, r24
    1348:	49 f0       	breq	.+18     	; 0x135c <_ZN21GsmCommunicationClass15checkConnectionEv+0x9a>
    134a:	fe 01       	movw	r30, r28
    134c:	eb 5f       	subi	r30, 0xFB	; 251
    134e:	fe 4f       	sbci	r31, 0xFE	; 254
    1350:	80 81       	ld	r24, Z
    1352:	81 11       	cpse	r24, r1
    1354:	03 c0       	rjmp	.+6      	; 0x135c <_ZN21GsmCommunicationClass15checkConnectionEv+0x9a>
			setUpSmsMode();		// set up Sms Mode if connected
    1356:	ce 01       	movw	r24, r28
    1358:	0e 94 01 09 	call	0x1202	; 0x1202 <_ZN21GsmCommunicationClass12setUpSmsModeEv>
		}
		gsmIsConnectedOld = gsmIsConnected;
    135c:	fe 01       	movw	r30, r28
    135e:	eb 5f       	subi	r30, 0xFB	; 251
    1360:	fe 4f       	sbci	r31, 0xFE	; 254
    1362:	cc 5f       	subi	r28, 0xFC	; 252
    1364:	de 4f       	sbci	r29, 0xFE	; 254
    1366:	88 81       	ld	r24, Y
    1368:	80 83       	st	Z, r24
    136a:	09 c0       	rjmp	.+18     	; 0x137e <_ZN21GsmCommunicationClass15checkConnectionEv+0xbc>
		}else{
		gsmIsConnected = false;
    136c:	cc 5f       	subi	r28, 0xFC	; 252
    136e:	de 4f       	sbci	r29, 0xFE	; 254
    1370:	18 82       	st	Y, r1
    1372:	05 c0       	rjmp	.+10     	; 0x137e <_ZN21GsmCommunicationClass15checkConnectionEv+0xbc>
	}
	}else{
		checkConnectionTime++;
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	fc 01       	movw	r30, r24
    137a:	33 83       	std	Z+3, r19	; 0x03
    137c:	22 83       	std	Z+2, r18	; 0x02
	}
}
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret

00001388 <_ZN15LedManagerClassC1Eh>:
		   ShadowLedRegister  &= ~Mask; 
	   }
	   
	   *LedBase = ShadowLedRegister;
	}
   }
    1388:	dc 01       	movw	r26, r24
    138a:	11 96       	adiw	r26, 0x01	; 1
    138c:	1c 92       	st	X, r1
    138e:	1e 92       	st	-X, r1
    1390:	e6 2f       	mov	r30, r22
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	13 96       	adiw	r26, 0x03	; 3
    1396:	fc 93       	st	X, r31
    1398:	ee 93       	st	-X, r30
    139a:	12 97       	sbiw	r26, 0x02	; 2
    139c:	10 82       	st	Z, r1
    139e:	14 96       	adiw	r26, 0x04	; 4
    13a0:	1d 92       	st	X+, r1
    13a2:	1d 92       	st	X+, r1
    13a4:	1d 92       	st	X+, r1
    13a6:	1c 92       	st	X, r1
    13a8:	17 97       	sbiw	r26, 0x07	; 7
    13aa:	20 9a       	sbi	0x04, 0	; 4
    13ac:	28 98       	cbi	0x05, 0	; 5
    13ae:	08 95       	ret

000013b0 <_ZN15LedManagerClass9ToggleLedEi>:

void LedManagerClass::ToggleLed(int LedNumber)
{
    13b0:	fc 01       	movw	r30, r24
	if(toggleTime > 1){
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	82 30       	cpi	r24, 0x02	; 2
    13b8:	91 05       	cpc	r25, r1
    13ba:	0c f1       	brlt	.+66     	; 0x13fe <_ZN15LedManagerClass9ToggleLedEi+0x4e>
		toggleTime = 0;
    13bc:	11 82       	std	Z+1, r1	; 0x01
    13be:	10 82       	st	Z, r1
	if ((LedNumber >= 0) && (LedNumber <= MAX_LED-1)) {
    13c0:	68 30       	cpi	r22, 0x08	; 8
    13c2:	71 05       	cpc	r23, r1
    13c4:	f8 f4       	brcc	.+62     	; 0x1404 <_ZN15LedManagerClass9ToggleLedEi+0x54>

	   /* Find correct bitposition */
		unsigned long  Mask = 1 << (LedNumber);

	   /* and clear or set bit according to State */
		ShadowLedRegister ^= Mask;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 c0       	rjmp	.+4      	; 0x13d0 <_ZN15LedManagerClass9ToggleLedEi+0x20>
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	6a 95       	dec	r22
    13d2:	e2 f7       	brpl	.-8      	; 0x13cc <_ZN15LedManagerClass9ToggleLedEi+0x1c>
    13d4:	09 2e       	mov	r0, r25
    13d6:	00 0c       	add	r0, r0
    13d8:	aa 0b       	sbc	r26, r26
    13da:	bb 0b       	sbc	r27, r27
    13dc:	44 81       	ldd	r20, Z+4	; 0x04
    13de:	55 81       	ldd	r21, Z+5	; 0x05
    13e0:	66 81       	ldd	r22, Z+6	; 0x06
    13e2:	77 81       	ldd	r23, Z+7	; 0x07
    13e4:	84 27       	eor	r24, r20
    13e6:	95 27       	eor	r25, r21
    13e8:	a6 27       	eor	r26, r22
    13ea:	b7 27       	eor	r27, r23
    13ec:	84 83       	std	Z+4, r24	; 0x04
    13ee:	95 83       	std	Z+5, r25	; 0x05
    13f0:	a6 83       	std	Z+6, r26	; 0x06
    13f2:	b7 83       	std	Z+7, r27	; 0x07
	   
	   *LedBase = ShadowLedRegister;
    13f4:	02 80       	ldd	r0, Z+2	; 0x02
    13f6:	f3 81       	ldd	r31, Z+3	; 0x03
    13f8:	e0 2d       	mov	r30, r0
    13fa:	80 83       	st	Z, r24
    13fc:	08 95       	ret
	}
	}else{
		toggleTime++;
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	91 83       	std	Z+1, r25	; 0x01
    1402:	80 83       	st	Z, r24
    1404:	08 95       	ret

00001406 <main_ArduinoLockOpener>:




// the loop function runs over and over again forever
void main_ArduinoLockOpener() {
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	c4 54       	subi	r28, 0x44	; 68
    1410:	d2 40       	sbci	r29, 0x02	; 2
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
	
	SoftwareSerial GsmSerial(RX, TX); // RX TX
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	42 e0       	ldi	r20, 0x02	; 2
    1420:	63 e0       	ldi	r22, 0x03	; 3
    1422:	ce 01       	movw	r24, r28
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN14SoftwareSerialC1Ehhb>
	
	GsmCommunicationClass GsmCommunication(&GsmSerial);
    142a:	be 01       	movw	r22, r28
    142c:	6f 5f       	subi	r22, 0xFF	; 255
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	ce 01       	movw	r24, r28
    1432:	80 96       	adiw	r24, 0x20	; 32
    1434:	0e 94 bb 08 	call	0x1176	; 0x1176 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial>
	SmsHandlerClass SmsHandler(&GsmCommunication);
    1438:	be 01       	movw	r22, r28
    143a:	60 5e       	subi	r22, 0xE0	; 224
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	ce 01       	movw	r24, r28
    1440:	89 5d       	subi	r24, 0xD9	; 217
    1442:	9e 4f       	sbci	r25, 0xFE	; 254
    1444:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClass>
	
    DDRB = 0b00100000; // configure pin 7 of PORTB as output (digital pin 13 on the Arduino Mega2560) 
    1448:	80 e2       	ldi	r24, 0x20	; 32
    144a:	84 b9       	out	0x04, r24	; 4
	LedManagerClass LedManager;
    144c:	65 e2       	ldi	r22, 0x25	; 37
    144e:	ce 01       	movw	r24, r28
    1450:	83 5c       	subi	r24, 0xC3	; 195
    1452:	9d 4f       	sbci	r25, 0xFD	; 253
    1454:	0e 94 c4 09 	call	0x1388	; 0x1388 <_ZN15LedManagerClassC1Eh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1458:	2f ef       	ldi	r18, 0xFF	; 255
    145a:	83 ed       	ldi	r24, 0xD3	; 211
    145c:	90 e3       	ldi	r25, 0x30	; 48
    145e:	21 50       	subi	r18, 0x01	; 1
    1460:	80 40       	sbci	r24, 0x00	; 0
    1462:	90 40       	sbci	r25, 0x00	; 0
    1464:	e1 f7       	brne	.-8      	; 0x145e <main_ArduinoLockOpener+0x58>
    1466:	00 c0       	rjmp	.+0      	; 0x1468 <main_ArduinoLockOpener+0x62>
    1468:	00 00       	nop
    146a:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <__data_end>
    146e:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <__data_end+0x1>
    1472:	02 80       	ldd	r0, Z+2	; 0x02
    1474:	f3 81       	ldd	r31, Z+3	; 0x03
    1476:	e0 2d       	mov	r30, r0
    1478:	46 e0       	ldi	r20, 0x06	; 6
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	6b ef       	ldi	r22, 0xFB	; 251
    147e:	71 e0       	ldi	r23, 0x01	; 1
    1480:	8c e4       	ldi	r24, 0x4C	; 76
    1482:	92 e0       	ldi	r25, 0x02	; 2
    1484:	09 95       	icall
    1486:	2f ef       	ldi	r18, 0xFF	; 255
    1488:	83 ed       	ldi	r24, 0xD3	; 211
    148a:	90 e3       	ldi	r25, 0x30	; 48
    148c:	21 50       	subi	r18, 0x01	; 1
    148e:	80 40       	sbci	r24, 0x00	; 0
    1490:	90 40       	sbci	r25, 0x00	; 0
    1492:	e1 f7       	brne	.-8      	; 0x148c <main_ArduinoLockOpener+0x86>
    1494:	00 c0       	rjmp	.+0      	; 0x1496 <main_ArduinoLockOpener+0x90>
    1496:	00 00       	nop
	Serial.write("Start\n");
	_delay_ms(1000);
	

    for(;;){
		GsmCommunication.checkConnection();	
    1498:	ce 01       	movw	r24, r28
    149a:	80 96       	adiw	r24, 0x20	; 32
    149c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <_ZN21GsmCommunicationClass15checkConnectionEv>
		GsmCommunication.readSerial();	
    14a0:	ce 01       	movw	r24, r28
    14a2:	80 96       	adiw	r24, 0x20	; 32
    14a4:	0e 94 72 08 	call	0x10e4	; 0x10e4 <_ZN21GsmCommunicationClass10readSerialEv>
		SmsHandler.handleReceivedSms();
    14a8:	ce 01       	movw	r24, r28
    14aa:	89 5d       	subi	r24, 0xD9	; 217
    14ac:	9e 4f       	sbci	r25, 0xFE	; 254
    14ae:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <_ZN15SmsHandlerClass17handleReceivedSmsEv>
	   
	   public:
      PortClass(LedManagerClass *Parent, int LedNumber) : MyParent(Parent), MyLed(LedNumber) {};
      void On()    {MyParent->SetLed(MyLed, LedManagerClass::ON);};
      void Off()   {MyParent->SetLed(MyLed, LedManagerClass::OFF);};
      void Toggle(){MyParent->ToggleLed(MyLed);};
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	ce 01       	movw	r24, r28
    14b8:	83 5c       	subi	r24, 0xC3	; 195
    14ba:	9d 4f       	sbci	r25, 0xFD	; 253
    14bc:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN15LedManagerClass9ToggleLedEi>
    14c0:	65 e0       	ldi	r22, 0x05	; 5
    14c2:	70 e0       	ldi	r23, 0x00	; 0
    14c4:	ce 01       	movw	r24, r28
    14c6:	83 5c       	subi	r24, 0xC3	; 195
    14c8:	9d 4f       	sbci	r25, 0xFD	; 253
    14ca:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN15LedManagerClass9ToggleLedEi>
    14ce:	e4 cf       	rjmp	.-56     	; 0x1498 <main_ArduinoLockOpener+0x92>

000014d0 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClass>:
{
	GsmCommunication = NewGsmCommunication;
} //SmsHandlerClass

// default destructor
SmsHandlerClass::~SmsHandlerClass()
    14d0:	fc 01       	movw	r30, r24
    14d2:	32 96       	adiw	r30, 0x02	; 2
    14d4:	24 e1       	ldi	r18, 0x14	; 20
    14d6:	df 01       	movw	r26, r30
    14d8:	1d 92       	st	X+, r1
    14da:	2a 95       	dec	r18
    14dc:	e9 f7       	brne	.-6      	; 0x14d8 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClass+0x8>
    14de:	74 96       	adiw	r30, 0x14	; 20
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	31 e0       	ldi	r19, 0x01	; 1
    14e4:	df 01       	movw	r26, r30
    14e6:	a9 01       	movw	r20, r18
    14e8:	1d 92       	st	X+, r1
    14ea:	41 50       	subi	r20, 0x01	; 1
    14ec:	50 40       	sbci	r21, 0x00	; 0
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClass+0x18>
    14f0:	dc 01       	movw	r26, r24
    14f2:	6d 93       	st	X+, r22
    14f4:	7c 93       	st	X, r23
    14f6:	08 95       	ret

000014f8 <_ZN15SmsHandlerClass7readSmsEPc>:
			}
		}
	}
}

void SmsHandlerClass::readSms(char *buffer){
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	ec 01       	movw	r28, r24
    14fe:	fb 01       	movw	r30, r22
    1500:	33 97       	sbiw	r30, 0x03	; 3
	int textStart = 0;
	int i = 0;
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
		}
	}
}

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
			textStart = 1;
    150a:	31 e0       	ldi	r19, 0x01	; 1
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	df 01       	movw	r26, r30

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	99 23       	and	r25, r25
    1514:	b9 f0       	breq	.+46     	; 0x1544 <_ZN15SmsHandlerClass7readSmsEPc+0x4c>
    1516:	31 96       	adiw	r30, 0x01	; 1
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
    1518:	2c 91       	ld	r18, X
    151a:	22 32       	cpi	r18, 0x22	; 34
    151c:	31 f4       	brne	.+12     	; 0x152a <_ZN15SmsHandlerClass7readSmsEPc+0x32>
    151e:	20 81       	ld	r18, Z
    1520:	2d 30       	cpi	r18, 0x0D	; 13
    1522:	19 f4       	brne	.+6      	; 0x152a <_ZN15SmsHandlerClass7readSmsEPc+0x32>
    1524:	21 81       	ldd	r18, Z+1	; 0x01
    1526:	2a 30       	cpi	r18, 0x0A	; 10
    1528:	19 f0       	breq	.+6      	; 0x1530 <_ZN15SmsHandlerClass7readSmsEPc+0x38>
    152a:	41 30       	cpi	r20, 0x01	; 1
    152c:	51 05       	cpc	r21, r1
    152e:	79 f7       	brne	.-34     	; 0x150e <_ZN15SmsHandlerClass7readSmsEPc+0x16>
			textStart = 1;
			smsMsg[i]=buffer[u];
    1530:	de 01       	movw	r26, r28
    1532:	a6 0f       	add	r26, r22
    1534:	b7 1f       	adc	r27, r23
    1536:	56 96       	adiw	r26, 0x16	; 22
    1538:	9c 93       	st	X, r25
			i++;
    153a:	6f 5f       	subi	r22, 0xFF	; 255
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
			textStart = 1;
    153e:	43 2f       	mov	r20, r19
    1540:	58 2f       	mov	r21, r24

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
    1542:	e5 cf       	rjmp	.-54     	; 0x150e <_ZN15SmsHandlerClass7readSmsEPc+0x16>
			textStart = 1;
			smsMsg[i]=buffer[u];
			i++;
		}
	}
	smsMsg[i]='\0';	
    1544:	fe 01       	movw	r30, r28
    1546:	e6 0f       	add	r30, r22
    1548:	f7 1f       	adc	r31, r23
    154a:	16 8a       	std	Z+22, r1	; 0x16
}
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	08 95       	ret

00001552 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc>:

void SmsHandlerClass::isolateSmsSenderPhoneNr(char *buffer){
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	ec 01       	movw	r28, r24
    155c:	cb 01       	movw	r24, r22
    char *retBuf;
    int u = 0;
    retBuf = strstr(buffer,"+CMT:");		// find beginning of sms sender
    155e:	62 e0       	ldi	r22, 0x02	; 2
    1560:	72 e0       	ldi	r23, 0x02	; 2
    1562:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <strstr>
    1566:	fc 01       	movw	r30, r24
    if(retBuf != NULL){						// if SMS sender Nr received
    1568:	89 2b       	or	r24, r25
    156a:	b1 f0       	breq	.+44     	; 0x1598 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x46>
        for(u=0; retBuf[u+7] !='\"';u++){	// fill Nr into variable until end of Nr reached
    156c:	97 81       	ldd	r25, Z+7	; 0x07
    156e:	92 32       	cpi	r25, 0x22	; 34
    1570:	61 f0       	breq	.+24     	; 0x158a <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x38>
    1572:	de 01       	movw	r26, r28
    1574:	12 96       	adiw	r26, 0x02	; 2
    1576:	38 96       	adiw	r30, 0x08	; 8
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
            smsSenderNr[u] = retBuf[u+7];
    157c:	9d 93       	st	X+, r25
void SmsHandlerClass::isolateSmsSenderPhoneNr(char *buffer){
    char *retBuf;
    int u = 0;
    retBuf = strstr(buffer,"+CMT:");		// find beginning of sms sender
    if(retBuf != NULL){						// if SMS sender Nr received
        for(u=0; retBuf[u+7] !='\"';u++){	// fill Nr into variable until end of Nr reached
    157e:	2f 5f       	subi	r18, 0xFF	; 255
    1580:	3f 4f       	sbci	r19, 0xFF	; 255
    1582:	91 91       	ld	r25, Z+
    1584:	92 32       	cpi	r25, 0x22	; 34
    1586:	d1 f7       	brne	.-12     	; 0x157c <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x2a>
    1588:	02 c0       	rjmp	.+4      	; 0x158e <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x3c>
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
            smsSenderNr[u] = retBuf[u+7];
        }
        smsSenderNr[u]='\0';
    158e:	fe 01       	movw	r30, r28
    1590:	e2 0f       	add	r30, r18
    1592:	f3 1f       	adc	r31, r19
    1594:	12 82       	std	Z+2, r1	; 0x02
    1596:	01 c0       	rjmp	.+2      	; 0x159a <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x48>
    }else{
        smsSenderNr[u]='\0';
    1598:	1a 82       	std	Y+2, r1	; 0x02
    159a:	0c e4       	ldi	r16, 0x4C	; 76
    159c:	12 e0       	ldi	r17, 0x02	; 2
    159e:	d8 01       	movw	r26, r16
    15a0:	ed 91       	ld	r30, X+
    15a2:	fc 91       	ld	r31, X
    15a4:	02 80       	ldd	r0, Z+2	; 0x02
    15a6:	f3 81       	ldd	r31, Z+3	; 0x03
    15a8:	e0 2d       	mov	r30, r0
    15aa:	4c e0       	ldi	r20, 0x0C	; 12
    15ac:	50 e0       	ldi	r21, 0x00	; 0
    15ae:	68 e0       	ldi	r22, 0x08	; 8
    15b0:	72 e0       	ldi	r23, 0x02	; 2
    15b2:	c8 01       	movw	r24, r16
    15b4:	09 95       	icall
    }
	
	// Display SMS sender
	Serial.write("SMS sender: ");
	GsmCommunication->displayString(smsSenderNr);
    15b6:	be 01       	movw	r22, r28
    15b8:	6e 5f       	subi	r22, 0xFE	; 254
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	88 81       	ld	r24, Y
    15be:	99 81       	ldd	r25, Y+1	; 0x01
    15c0:	0e 94 58 08 	call	0x10b0	; 0x10b0 <_ZN21GsmCommunicationClass13displayStringEPc>
    15c4:	d8 01       	movw	r26, r16
    15c6:	ed 91       	ld	r30, X+
    15c8:	fc 91       	ld	r31, X
    15ca:	02 80       	ldd	r0, Z+2	; 0x02
    15cc:	f3 81       	ldd	r31, Z+3	; 0x03
    15ce:	e0 2d       	mov	r30, r0
    15d0:	42 e0       	ldi	r20, 0x02	; 2
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	68 ef       	ldi	r22, 0xF8	; 248
    15d6:	71 e0       	ldi	r23, 0x01	; 1
    15d8:	c8 01       	movw	r24, r16
    15da:	09 95       	icall
	Serial.write("\n\n");	
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	08 95       	ret

000015e6 <_ZN15SmsHandlerClass17handleReceivedSmsEv>:
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/

void SmsHandlerClass::handleReceivedSms(){
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	ec 01       	movw	r28, r24
	if(strstr(GsmCommunication->receiveBuffer,"+CMT:") != NULL){	// if SMS received
    15f0:	08 81       	ld	r16, Y
    15f2:	19 81       	ldd	r17, Y+1	; 0x01
    15f4:	0c 5f       	subi	r16, 0xFC	; 252
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
    15f8:	62 e0       	ldi	r22, 0x02	; 2
    15fa:	72 e0       	ldi	r23, 0x02	; 2
    15fc:	c8 01       	movw	r24, r16
    15fe:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <strstr>
    1602:	89 2b       	or	r24, r25
    1604:	c1 f1       	breq	.+112    	; 0x1676 <_ZN15SmsHandlerClass17handleReceivedSmsEv+0x90>
		
		isolateSmsSenderPhoneNr(&(GsmCommunication->receiveBuffer[0]));
    1606:	b8 01       	movw	r22, r16
    1608:	ce 01       	movw	r24, r28
    160a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc>
		
		// check Authorization
		if(GsmCommunication->checkAuthorization(&smsSenderNr[0]) == 1){
    160e:	be 01       	movw	r22, r28
    1610:	6e 5f       	subi	r22, 0xFE	; 254
    1612:	7f 4f       	sbci	r23, 0xFF	; 255
    1614:	88 81       	ld	r24, Y
    1616:	99 81       	ldd	r25, Y+1	; 0x01
    1618:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <_ZN21GsmCommunicationClass18checkAuthorizationEPc>
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	59 f5       	brne	.+86     	; 0x1676 <_ZN15SmsHandlerClass17handleReceivedSmsEv+0x90>
    1620:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <__data_end>
    1624:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <__data_end+0x1>
    1628:	02 80       	ldd	r0, Z+2	; 0x02
    162a:	f3 81       	ldd	r31, Z+3	; 0x03
    162c:	e0 2d       	mov	r30, r0
    162e:	48 e1       	ldi	r20, 0x18	; 24
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	65 e1       	ldi	r22, 0x15	; 21
    1634:	72 e0       	ldi	r23, 0x02	; 2
    1636:	8c e4       	ldi	r24, 0x4C	; 76
    1638:	92 e0       	ldi	r25, 0x02	; 2
    163a:	09 95       	icall
			Serial.write("SMS sender AUTHORIZED !\n");
			
			// read sms Msg out of the receive Buffer
			readSms(&(GsmCommunication->receiveBuffer[0]));
    163c:	68 81       	ld	r22, Y
    163e:	79 81       	ldd	r23, Y+1	; 0x01
    1640:	6c 5f       	subi	r22, 0xFC	; 252
    1642:	7f 4f       	sbci	r23, 0xFF	; 255
    1644:	ce 01       	movw	r24, r28
    1646:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <_ZN15SmsHandlerClass7readSmsEPc>
			
			// handle sms commands
			//GsmCommunication->displayString(smsMsg);		// for debbuging
			if(strstr(smsMsg,"Globi 18") != NULL){
    164a:	6e e2       	ldi	r22, 0x2E	; 46
    164c:	72 e0       	ldi	r23, 0x02	; 2
    164e:	ce 01       	movw	r24, r28
    1650:	46 96       	adiw	r24, 0x16	; 22
    1652:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <strstr>
    1656:	89 2b       	or	r24, r25
    1658:	71 f0       	breq	.+28     	; 0x1676 <_ZN15SmsHandlerClass17handleReceivedSmsEv+0x90>
    165a:	e0 91 4c 02 	lds	r30, 0x024C	; 0x80024c <__data_end>
    165e:	f0 91 4d 02 	lds	r31, 0x024D	; 0x80024d <__data_end+0x1>
    1662:	02 80       	ldd	r0, Z+2	; 0x02
    1664:	f3 81       	ldd	r31, Z+3	; 0x03
    1666:	e0 2d       	mov	r30, r0
    1668:	43 e1       	ldi	r20, 0x13	; 19
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	67 e3       	ldi	r22, 0x37	; 55
    166e:	72 e0       	ldi	r23, 0x02	; 2
    1670:	8c e4       	ldi	r24, 0x4C	; 76
    1672:	92 e0       	ldi	r25, 0x02	; 2
    1674:	09 95       	icall
				Serial.write("Msg Globi received\n");
			}
		}
	}
}
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	08 95       	ret

00001680 <__udivmodsi4>:
    1680:	a1 e2       	ldi	r26, 0x21	; 33
    1682:	1a 2e       	mov	r1, r26
    1684:	aa 1b       	sub	r26, r26
    1686:	bb 1b       	sub	r27, r27
    1688:	fd 01       	movw	r30, r26
    168a:	0d c0       	rjmp	.+26     	; 0x16a6 <__udivmodsi4_ep>

0000168c <__udivmodsi4_loop>:
    168c:	aa 1f       	adc	r26, r26
    168e:	bb 1f       	adc	r27, r27
    1690:	ee 1f       	adc	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	a2 17       	cp	r26, r18
    1696:	b3 07       	cpc	r27, r19
    1698:	e4 07       	cpc	r30, r20
    169a:	f5 07       	cpc	r31, r21
    169c:	20 f0       	brcs	.+8      	; 0x16a6 <__udivmodsi4_ep>
    169e:	a2 1b       	sub	r26, r18
    16a0:	b3 0b       	sbc	r27, r19
    16a2:	e4 0b       	sbc	r30, r20
    16a4:	f5 0b       	sbc	r31, r21

000016a6 <__udivmodsi4_ep>:
    16a6:	66 1f       	adc	r22, r22
    16a8:	77 1f       	adc	r23, r23
    16aa:	88 1f       	adc	r24, r24
    16ac:	99 1f       	adc	r25, r25
    16ae:	1a 94       	dec	r1
    16b0:	69 f7       	brne	.-38     	; 0x168c <__udivmodsi4_loop>
    16b2:	60 95       	com	r22
    16b4:	70 95       	com	r23
    16b6:	80 95       	com	r24
    16b8:	90 95       	com	r25
    16ba:	9b 01       	movw	r18, r22
    16bc:	ac 01       	movw	r20, r24
    16be:	bd 01       	movw	r22, r26
    16c0:	cf 01       	movw	r24, r30
    16c2:	08 95       	ret

000016c4 <__tablejump2__>:
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	05 90       	lpm	r0, Z+
    16ca:	f4 91       	lpm	r31, Z
    16cc:	e0 2d       	mov	r30, r0
    16ce:	09 94       	ijmp

000016d0 <strstr>:
    16d0:	fb 01       	movw	r30, r22
    16d2:	51 91       	ld	r21, Z+
    16d4:	55 23       	and	r21, r21
    16d6:	a9 f0       	breq	.+42     	; 0x1702 <strstr+0x32>
    16d8:	bf 01       	movw	r22, r30
    16da:	dc 01       	movw	r26, r24
    16dc:	4d 91       	ld	r20, X+
    16de:	45 17       	cp	r20, r21
    16e0:	41 11       	cpse	r20, r1
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <strstr+0xc>
    16e4:	59 f4       	brne	.+22     	; 0x16fc <strstr+0x2c>
    16e6:	cd 01       	movw	r24, r26
    16e8:	01 90       	ld	r0, Z+
    16ea:	00 20       	and	r0, r0
    16ec:	49 f0       	breq	.+18     	; 0x1700 <strstr+0x30>
    16ee:	4d 91       	ld	r20, X+
    16f0:	40 15       	cp	r20, r0
    16f2:	41 11       	cpse	r20, r1
    16f4:	c9 f3       	breq	.-14     	; 0x16e8 <strstr+0x18>
    16f6:	fb 01       	movw	r30, r22
    16f8:	41 11       	cpse	r20, r1
    16fa:	ef cf       	rjmp	.-34     	; 0x16da <strstr+0xa>
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	08 95       	ret

00001704 <_exit>:
    1704:	f8 94       	cli

00001706 <__stop_program>:
    1706:	ff cf       	rjmp	.-2      	; 0x1706 <__stop_program>
