
ArduinoLockOpener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000d64  00000df8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  0080012c  0080012c  00000e24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bee5  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002754  00000000  00000000  0000d1b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c5f  00000000  00000000  0000f90d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c8c  00000000  00000000  0001256c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ac4  00000000  00000000  000131f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004bd3  00000000  00000000  00015cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000478  00000000  00000000  0001a88f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_1>
   8:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_2>
   c:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_3>
  10:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_3>
  14:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_3>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__vector_7>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__vector_16>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_18>
  4c:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_19>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  54:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  58:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  5c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  60:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	02 00       	Address 0x00000068 is out of bounds.
.word	0xffff	; ????

00000069 <digital_pin_to_timer_PGM>:
  69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
  7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
  91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
  a5:	00 00 00 00 25 00 28 00 2b 00 00                    ....%.(.+..

000000b0 <__ctors_start>:
  b0:	43 02       	muls	r20, r19
  b2:	b2 02       	muls	r27, r18

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e6       	ldi	r30, 0x64	; 100
  c8:	fd e0       	ldi	r31, 0x0D	; 13
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 32       	cpi	r26, 0x2C	; 44
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	ac e2       	ldi	r26, 0x2C	; 44
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 3e       	cpi	r26, 0xE3	; 227
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>

000000e6 <__do_global_ctors>:
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	ca e5       	ldi	r28, 0x5A	; 90
  ea:	d0 e0       	ldi	r29, 0x00	; 0
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <__do_global_ctors+0x10>
  ee:	21 97       	sbiw	r28, 0x01	; 1
  f0:	fe 01       	movw	r30, r28
  f2:	0e 94 aa 06 	call	0xd54	; 0xd54 <__tablejump2__>
  f6:	c8 35       	cpi	r28, 0x58	; 88
  f8:	d1 07       	cpc	r29, r17
  fa:	c9 f7       	brne	.-14     	; 0xee <__do_global_ctors+0x8>
  fc:	0e 94 be 02 	call	0x57c	; 0x57c <main>
 100:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <_exit>

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000108 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 108:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 10a:	91 8d       	ldd	r25, Z+25	; 0x19
 10c:	22 8d       	ldd	r18, Z+26	; 0x1a
 10e:	89 2f       	mov	r24, r25
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	80 5c       	subi	r24, 0xC0	; 192
 114:	9f 4f       	sbci	r25, 0xFF	; 255
 116:	82 1b       	sub	r24, r18
 118:	91 09       	sbc	r25, r1
}
 11a:	8f 73       	andi	r24, 0x3F	; 63
 11c:	99 27       	eor	r25, r25
 11e:	08 95       	ret

00000120 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 120:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 122:	91 8d       	ldd	r25, Z+25	; 0x19
 124:	82 8d       	ldd	r24, Z+26	; 0x1a
 126:	98 17       	cp	r25, r24
 128:	31 f0       	breq	.+12     	; 0x136 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 12a:	82 8d       	ldd	r24, Z+26	; 0x1a
 12c:	e8 0f       	add	r30, r24
 12e:	f1 1d       	adc	r31, r1
 130:	85 8d       	ldd	r24, Z+29	; 0x1d
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 13a:	08 95       	ret

0000013c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 13c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 13e:	91 8d       	ldd	r25, Z+25	; 0x19
 140:	82 8d       	ldd	r24, Z+26	; 0x1a
 142:	98 17       	cp	r25, r24
 144:	61 f0       	breq	.+24     	; 0x15e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 146:	82 8d       	ldd	r24, Z+26	; 0x1a
 148:	df 01       	movw	r26, r30
 14a:	a8 0f       	add	r26, r24
 14c:	b1 1d       	adc	r27, r1
 14e:	5d 96       	adiw	r26, 0x1d	; 29
 150:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 152:	92 8d       	ldd	r25, Z+26	; 0x1a
 154:	9f 5f       	subi	r25, 0xFF	; 255
 156:	9f 73       	andi	r25, 0x3F	; 63
 158:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 162:	08 95       	ret

00000164 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 164:	fc 01       	movw	r30, r24
 166:	23 8d       	ldd	r18, Z+27	; 0x1b
    tail = _tx_buffer_tail;
 168:	34 8d       	ldd	r19, Z+28	; 0x1c
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 16a:	23 17       	cp	r18, r19
 16c:	38 f0       	brcs	.+14     	; 0x17c <_ZN14HardwareSerial17availableForWriteEv+0x18>
 16e:	8f e3       	ldi	r24, 0x3F	; 63
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	82 1b       	sub	r24, r18
 174:	91 09       	sbc	r25, r1
 176:	83 0f       	add	r24, r19
 178:	91 1d       	adc	r25, r1
 17a:	08 95       	ret
  return tail - head - 1;
 17c:	83 2f       	mov	r24, r19
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	82 1b       	sub	r24, r18
 182:	91 09       	sbc	r25, r1
 184:	01 97       	sbiw	r24, 0x01	; 1
}
 186:	08 95       	ret

00000188 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 188:	89 e3       	ldi	r24, 0x39	; 57
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	89 2b       	or	r24, r25
 18e:	49 f0       	breq	.+18     	; 0x1a2 <_Z14serialEventRunv+0x1a>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	89 2b       	or	r24, r25
 196:	29 f0       	breq	.+10     	; 0x1a2 <_Z14serialEventRunv+0x1a>
 198:	0e 94 39 02 	call	0x472	; 0x472 <_Z17Serial0_availablev>
 19c:	81 11       	cpse	r24, r1
 19e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 1a2:	08 95       	ret

000001a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 1a4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 1a6:	84 8d       	ldd	r24, Z+28	; 0x1c
 1a8:	df 01       	movw	r26, r30
 1aa:	a8 0f       	add	r26, r24
 1ac:	b1 1d       	adc	r27, r1
 1ae:	a3 5a       	subi	r26, 0xA3	; 163
 1b0:	bf 4f       	sbci	r27, 0xFF	; 255
 1b2:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 1b4:	24 8d       	ldd	r18, Z+28	; 0x1c
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	2f 5f       	subi	r18, 0xFF	; 255
 1ba:	3f 4f       	sbci	r19, 0xFF	; 255
 1bc:	2f 73       	andi	r18, 0x3F	; 63
 1be:	30 78       	andi	r19, 0x80	; 128
 1c0:	33 23       	and	r19, r19
 1c2:	34 f4       	brge	.+12     	; 0x1d0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	31 09       	sbc	r19, r1
 1c8:	20 6c       	ori	r18, 0xC0	; 192
 1ca:	3f 6f       	ori	r19, 0xFF	; 255
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
 1d2:	a6 89       	ldd	r26, Z+22	; 0x16
 1d4:	b7 89       	ldd	r27, Z+23	; 0x17
 1d6:	8c 93       	st	X, r24
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 1d8:	a0 89       	ldd	r26, Z+16	; 0x10
 1da:	b1 89       	ldd	r27, Z+17	; 0x11
 1dc:	8c 91       	ld	r24, X
 1de:	83 70       	andi	r24, 0x03	; 3
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 1e4:	93 8d       	ldd	r25, Z+27	; 0x1b
 1e6:	84 8d       	ldd	r24, Z+28	; 0x1c
 1e8:	98 13       	cpse	r25, r24
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 1ec:	02 88       	ldd	r0, Z+18	; 0x12
 1ee:	f3 89       	ldd	r31, Z+19	; 0x13
 1f0:	e0 2d       	mov	r30, r0
 1f2:	80 81       	ld	r24, Z
 1f4:	8f 7d       	andi	r24, 0xDF	; 223
 1f6:	80 83       	st	Z, r24
 1f8:	08 95       	ret

000001fa <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 200:	88 8d       	ldd	r24, Y+24	; 0x18
 202:	88 23       	and	r24, r24
 204:	d9 f0       	breq	.+54     	; 0x23c <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 206:	ea 89       	ldd	r30, Y+18	; 0x12
 208:	fb 89       	ldd	r31, Y+19	; 0x13
 20a:	80 81       	ld	r24, Z
 20c:	85 fd       	sbrc	r24, 5
 20e:	05 c0       	rjmp	.+10     	; 0x21a <_ZN14HardwareSerial5flushEv+0x20>
 210:	a8 89       	ldd	r26, Y+16	; 0x10
 212:	b9 89       	ldd	r27, Y+17	; 0x11
 214:	8c 91       	ld	r24, X
 216:	86 fd       	sbrc	r24, 6
 218:	11 c0       	rjmp	.+34     	; 0x23c <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	07 fc       	sbrc	r0, 7
 21e:	f5 cf       	rjmp	.-22     	; 0x20a <_ZN14HardwareSerial5flushEv+0x10>
 220:	80 81       	ld	r24, Z
 222:	85 ff       	sbrs	r24, 5
 224:	f2 cf       	rjmp	.-28     	; 0x20a <_ZN14HardwareSerial5flushEv+0x10>
 226:	04 c0       	rjmp	.+8      	; 0x230 <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
 228:	ce 01       	movw	r24, r28
 22a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 22e:	eb cf       	rjmp	.-42     	; 0x206 <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 230:	a8 89       	ldd	r26, Y+16	; 0x10
 232:	b9 89       	ldd	r27, Y+17	; 0x11
 234:	8c 91       	ld	r24, X
 236:	85 ff       	sbrs	r24, 5
 238:	e8 cf       	rjmp	.-48     	; 0x20a <_ZN14HardwareSerial5flushEv+0x10>
 23a:	f6 cf       	rjmp	.-20     	; 0x228 <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
  _written = true;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 250:	9b 8d       	ldd	r25, Y+27	; 0x1b
 252:	8c 8d       	ldd	r24, Y+28	; 0x1c
 254:	98 13       	cpse	r25, r24
 256:	26 c0       	rjmp	.+76     	; 0x2a4 <_ZN14HardwareSerial5writeEh+0x62>
 258:	e8 89       	ldd	r30, Y+16	; 0x10
 25a:	f9 89       	ldd	r31, Y+17	; 0x11
 25c:	80 81       	ld	r24, Z
 25e:	85 fd       	sbrc	r24, 5
 260:	32 c0       	rjmp	.+100    	; 0x2c6 <_ZN14HardwareSerial5writeEh+0x84>
 262:	20 c0       	rjmp	.+64     	; 0x2a4 <_ZN14HardwareSerial5writeEh+0x62>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 264:	8c 8d       	ldd	r24, Y+28	; 0x1c
 266:	18 13       	cpse	r17, r24
 268:	0c c0       	rjmp	.+24     	; 0x282 <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	07 fc       	sbrc	r0, 7
 26e:	fa cf       	rjmp	.-12     	; 0x264 <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 270:	e8 89       	ldd	r30, Y+16	; 0x10
 272:	f9 89       	ldd	r31, Y+17	; 0x11
 274:	80 81       	ld	r24, Z
 276:	85 ff       	sbrs	r24, 5
 278:	f5 cf       	rjmp	.-22     	; 0x264 <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
 27a:	ce 01       	movw	r24, r28
 27c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 280:	f1 cf       	rjmp	.-30     	; 0x264 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 282:	8b 8d       	ldd	r24, Y+27	; 0x1b
 284:	fe 01       	movw	r30, r28
 286:	e8 0f       	add	r30, r24
 288:	f1 1d       	adc	r31, r1
 28a:	e3 5a       	subi	r30, 0xA3	; 163
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	00 83       	st	Z, r16

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 290:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 292:	f8 94       	cli
    _tx_buffer_head = i;
 294:	1b 8f       	std	Y+27, r17	; 0x1b
    sbi(*_ucsrb, UDRIE0);
 296:	ea 89       	ldd	r30, Y+18	; 0x12
 298:	fb 89       	ldd	r31, Y+19	; 0x13
 29a:	80 81       	ld	r24, Z
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2a0:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
 2a2:	1d c0       	rjmp	.+58     	; 0x2de <_ZN14HardwareSerial5writeEh+0x9c>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 2a4:	2b 8d       	ldd	r18, Y+27	; 0x1b
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	2f 5f       	subi	r18, 0xFF	; 255
 2aa:	3f 4f       	sbci	r19, 0xFF	; 255
 2ac:	2f 73       	andi	r18, 0x3F	; 63
 2ae:	30 78       	andi	r19, 0x80	; 128
 2b0:	33 23       	and	r19, r19
 2b2:	34 f4       	brge	.+12     	; 0x2c0 <_ZN14HardwareSerial5writeEh+0x7e>
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	31 09       	sbc	r19, r1
 2b8:	20 6c       	ori	r18, 0xC0	; 192
 2ba:	3f 6f       	ori	r19, 0xFF	; 255
 2bc:	2f 5f       	subi	r18, 0xFF	; 255
 2be:	3f 4f       	sbci	r19, 0xFF	; 255
 2c0:	06 2f       	mov	r16, r22
 2c2:	12 2f       	mov	r17, r18
 2c4:	cf cf       	rjmp	.-98     	; 0x264 <_ZN14HardwareSerial5writeEh+0x22>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 2c6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2c8:	f8 94       	cli
      *_udr = c;
 2ca:	ee 89       	ldd	r30, Y+22	; 0x16
 2cc:	ff 89       	ldd	r31, Y+23	; 0x17
 2ce:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 2d0:	e8 89       	ldd	r30, Y+16	; 0x10
 2d2:	f9 89       	ldd	r31, Y+17	; 0x11
 2d4:	80 81       	ld	r24, Z
 2d6:	83 70       	andi	r24, 0x03	; 3
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2dc:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 2ec:	cf 92       	push	r12
 2ee:	df 92       	push	r13
 2f0:	ef 92       	push	r14
 2f2:	ff 92       	push	r15
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	ec 01       	movw	r28, r24
 2fc:	6a 01       	movw	r12, r20
 2fe:	7b 01       	movw	r14, r22
 300:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 302:	e8 89       	ldd	r30, Y+16	; 0x10
 304:	f9 89       	ldd	r31, Y+17	; 0x11
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 30a:	41 15       	cp	r20, r1
 30c:	51 4e       	sbci	r21, 0xE1	; 225
 30e:	61 05       	cpc	r22, r1
 310:	71 05       	cpc	r23, r1
 312:	b1 f0       	breq	.+44     	; 0x340 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	79 e0       	ldi	r23, 0x09	; 9
 318:	8d e3       	ldi	r24, 0x3D	; 61
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	a7 01       	movw	r20, r14
 31e:	96 01       	movw	r18, r12
 320:	0e 94 88 06 	call	0xd10	; 0xd10 <__udivmodsi4>
 324:	da 01       	movw	r26, r20
 326:	c9 01       	movw	r24, r18
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	a1 09       	sbc	r26, r1
 32c:	b1 09       	sbc	r27, r1
 32e:	b6 95       	lsr	r27
 330:	a7 95       	ror	r26
 332:	97 95       	ror	r25
 334:	87 95       	ror	r24
 336:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 338:	21 15       	cp	r18, r1
 33a:	80 e1       	ldi	r24, 0x10	; 16
 33c:	38 07       	cpc	r19, r24
 33e:	a8 f0       	brcs	.+42     	; 0x36a <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 340:	e8 89       	ldd	r30, Y+16	; 0x10
 342:	f9 89       	ldd	r31, Y+17	; 0x11
 344:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 346:	60 e8       	ldi	r22, 0x80	; 128
 348:	74 e8       	ldi	r23, 0x84	; 132
 34a:	8e e1       	ldi	r24, 0x1E	; 30
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	a7 01       	movw	r20, r14
 350:	96 01       	movw	r18, r12
 352:	0e 94 88 06 	call	0xd10	; 0xd10 <__udivmodsi4>
 356:	da 01       	movw	r26, r20
 358:	c9 01       	movw	r24, r18
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	a1 09       	sbc	r26, r1
 35e:	b1 09       	sbc	r27, r1
 360:	b6 95       	lsr	r27
 362:	a7 95       	ror	r26
 364:	97 95       	ror	r25
 366:	87 95       	ror	r24
 368:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 36a:	ec 85       	ldd	r30, Y+12	; 0x0c
 36c:	fd 85       	ldd	r31, Y+13	; 0x0d
 36e:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 370:	ee 85       	ldd	r30, Y+14	; 0x0e
 372:	ff 85       	ldd	r31, Y+15	; 0x0f
 374:	20 83       	st	Z, r18

  _written = false;
 376:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 378:	ec 89       	ldd	r30, Y+20	; 0x14
 37a:	fd 89       	ldd	r31, Y+21	; 0x15
 37c:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 37e:	ea 89       	ldd	r30, Y+18	; 0x12
 380:	fb 89       	ldd	r31, Y+19	; 0x13
 382:	80 81       	ld	r24, Z
 384:	80 61       	ori	r24, 0x10	; 16
 386:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 388:	ea 89       	ldd	r30, Y+18	; 0x12
 38a:	fb 89       	ldd	r31, Y+19	; 0x13
 38c:	80 81       	ld	r24, Z
 38e:	88 60       	ori	r24, 0x08	; 8
 390:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 392:	ea 89       	ldd	r30, Y+18	; 0x12
 394:	fb 89       	ldd	r31, Y+19	; 0x13
 396:	80 81       	ld	r24, Z
 398:	80 68       	ori	r24, 0x80	; 128
 39a:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 39c:	ea 89       	ldd	r30, Y+18	; 0x12
 39e:	fb 89       	ldd	r31, Y+19	; 0x13
 3a0:	80 81       	ld	r24, Z
 3a2:	8f 7d       	andi	r24, 0xDF	; 223
 3a4:	80 83       	st	Z, r24
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	08 95       	ret

000003b6 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	2f 93       	push	r18
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 3ce:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__data_end+0x10>
 3d2:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <__data_end+0x11>
 3d6:	80 81       	ld	r24, Z
 3d8:	82 fd       	sbrc	r24, 2
 3da:	14 c0       	rjmp	.+40     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 3dc:	ec e2       	ldi	r30, 0x2C	; 44
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	a6 89       	ldd	r26, Z+22	; 0x16
 3e2:	b7 89       	ldd	r27, Z+23	; 0x17
 3e4:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 3e6:	81 8d       	ldd	r24, Z+25	; 0x19
 3e8:	8f 5f       	subi	r24, 0xFF	; 255
 3ea:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 3ec:	92 8d       	ldd	r25, Z+26	; 0x1a
 3ee:	89 17       	cp	r24, r25
 3f0:	71 f0       	breq	.+28     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
      _rx_buffer[_rx_buffer_head] = c;
 3f2:	df 01       	movw	r26, r30
 3f4:	e1 8d       	ldd	r30, Z+25	; 0x19
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	e4 5d       	subi	r30, 0xD4	; 212
 3fa:	fe 4f       	sbci	r31, 0xFE	; 254
 3fc:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
 3fe:	59 96       	adiw	r26, 0x19	; 25
 400:	8c 93       	st	X, r24
 402:	05 c0       	rjmp	.+10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 404:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <__data_end+0x16>
 408:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <__data_end+0x17>
 40c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	0f be       	out	0x3f, r0	; 63
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 448:	8c e2       	ldi	r24, 0x2C	; 44
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	bf 91       	pop	r27
 456:	af 91       	pop	r26
 458:	9f 91       	pop	r25
 45a:	8f 91       	pop	r24
 45c:	7f 91       	pop	r23
 45e:	6f 91       	pop	r22
 460:	5f 91       	pop	r21
 462:	4f 91       	pop	r20
 464:	3f 91       	pop	r19
 466:	2f 91       	pop	r18
 468:	0f 90       	pop	r0
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	0f 90       	pop	r0
 46e:	1f 90       	pop	r1
 470:	18 95       	reti

00000472 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 472:	8c e2       	ldi	r24, 0x2C	; 44
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 84 00 	call	0x108	; 0x108 <_ZN14HardwareSerial9availableEv>
 47a:	21 e0       	ldi	r18, 0x01	; 1
 47c:	89 2b       	or	r24, r25
 47e:	09 f4       	brne	.+2      	; 0x482 <_Z17Serial0_availablev+0x10>
 480:	20 e0       	ldi	r18, 0x00	; 0
}
 482:	82 2f       	mov	r24, r18
 484:	08 95       	ret

00000486 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 486:	ec e2       	ldi	r30, 0x2C	; 44
 488:	f1 e0       	ldi	r31, 0x01	; 1
 48a:	13 82       	std	Z+3, r1	; 0x03
 48c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 48e:	88 ee       	ldi	r24, 0xE8	; 232
 490:	93 e0       	ldi	r25, 0x03	; 3
 492:	a0 e0       	ldi	r26, 0x00	; 0
 494:	b0 e0       	ldi	r27, 0x00	; 0
 496:	84 83       	std	Z+4, r24	; 0x04
 498:	95 83       	std	Z+5, r25	; 0x05
 49a:	a6 83       	std	Z+6, r26	; 0x06
 49c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 49e:	89 e0       	ldi	r24, 0x09	; 9
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	91 83       	std	Z+1, r25	; 0x01
 4a4:	80 83       	st	Z, r24
 4a6:	85 ec       	ldi	r24, 0xC5	; 197
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	95 87       	std	Z+13, r25	; 0x0d
 4ac:	84 87       	std	Z+12, r24	; 0x0c
 4ae:	84 ec       	ldi	r24, 0xC4	; 196
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	97 87       	std	Z+15, r25	; 0x0f
 4b4:	86 87       	std	Z+14, r24	; 0x0e
 4b6:	80 ec       	ldi	r24, 0xC0	; 192
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	91 8b       	std	Z+17, r25	; 0x11
 4bc:	80 8b       	std	Z+16, r24	; 0x10
 4be:	81 ec       	ldi	r24, 0xC1	; 193
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	93 8b       	std	Z+19, r25	; 0x13
 4c4:	82 8b       	std	Z+18, r24	; 0x12
 4c6:	82 ec       	ldi	r24, 0xC2	; 194
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	95 8b       	std	Z+21, r25	; 0x15
 4cc:	84 8b       	std	Z+20, r24	; 0x14
 4ce:	86 ec       	ldi	r24, 0xC6	; 198
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	97 8b       	std	Z+23, r25	; 0x17
 4d4:	86 8b       	std	Z+22, r24	; 0x16
 4d6:	11 8e       	std	Z+25, r1	; 0x19
 4d8:	12 8e       	std	Z+26, r1	; 0x1a
 4da:	13 8e       	std	Z+27, r1	; 0x1b
 4dc:	14 8e       	std	Z+28, r1	; 0x1c
 4de:	08 95       	ret

000004e0 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
 4e0:	8f 92       	push	r8
 4e2:	9f 92       	push	r9
 4e4:	af 92       	push	r10
 4e6:	bf 92       	push	r11
 4e8:	cf 92       	push	r12
 4ea:	df 92       	push	r13
 4ec:	ef 92       	push	r14
 4ee:	ff 92       	push	r15
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	6c 01       	movw	r12, r24
 4fa:	7b 01       	movw	r14, r22
 4fc:	4c 01       	movw	r8, r24
 4fe:	82 e0       	ldi	r24, 0x02	; 2
 500:	88 0e       	add	r8, r24
 502:	91 1c       	adc	r9, r1
 504:	56 01       	movw	r10, r12
 506:	e5 e0       	ldi	r30, 0x05	; 5
 508:	ae 0e       	add	r10, r30
 50a:	b1 1c       	adc	r11, r1
 50c:	00 e0       	ldi	r16, 0x00	; 0
 50e:	10 e0       	ldi	r17, 0x00	; 0
 510:	f4 01       	movw	r30, r8
 512:	61 91       	ld	r22, Z+
 514:	4f 01       	movw	r8, r30
 516:	4a e0       	ldi	r20, 0x0A	; 10
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	c7 01       	movw	r24, r14
 51c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN5Print5printEhi>
 520:	ec 01       	movw	r28, r24
 522:	6e e2       	ldi	r22, 0x2E	; 46
 524:	c7 01       	movw	r24, r14
 526:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZN5Print5printEc>
 52a:	8c 0f       	add	r24, r28
 52c:	9d 1f       	adc	r25, r29
 52e:	08 0f       	add	r16, r24
 530:	19 1f       	adc	r17, r25
 532:	8a 14       	cp	r8, r10
 534:	9b 04       	cpc	r9, r11
 536:	61 f7       	brne	.-40     	; 0x510 <_ZNK9IPAddress7printToER5Print+0x30>
 538:	4a e0       	ldi	r20, 0x0A	; 10
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	f6 01       	movw	r30, r12
 53e:	65 81       	ldd	r22, Z+5	; 0x05
 540:	c7 01       	movw	r24, r14
 542:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN5Print5printEhi>
 546:	80 0f       	add	r24, r16
 548:	91 1f       	adc	r25, r17
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	bf 90       	pop	r11
 55c:	af 90       	pop	r10
 55e:	9f 90       	pop	r9
 560:	8f 90       	pop	r8
 562:	08 95       	ret

00000564 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 564:	e9 ec       	ldi	r30, 0xC9	; 201
 566:	f1 e0       	ldi	r31, 0x01	; 1
 568:	8b e1       	ldi	r24, 0x1B	; 27
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	91 83       	std	Z+1, r25	; 0x01
 56e:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
 570:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
 572:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
 574:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
 576:	15 82       	std	Z+5, r1	; 0x05
 578:	08 95       	ret

0000057a <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 57a:	08 95       	ret

0000057c <main>:

int main(void)
{
	init();
 57c:	0e 94 c1 04 	call	0x982	; 0x982 <init>
	initVariant();
 580:	0e 94 bd 02 	call	0x57a	; 0x57a <initVariant>
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
		if (serialEventRun) serialEventRun();
 584:	c4 ec       	ldi	r28, 0xC4	; 196
 586:	d0 e0       	ldi	r29, 0x00	; 0
	USBDevice.attach();
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
 588:	0e 94 50 06 	call	0xca0	; 0xca0 <main_ArduinoLockOpener>
		if (serialEventRun) serialEventRun();
 58c:	20 97       	sbiw	r28, 0x00	; 0
 58e:	e1 f3       	breq	.-8      	; 0x588 <main+0xc>
 590:	0e 94 c4 00 	call	0x188	; 0x188 <_Z14serialEventRunv>
 594:	f9 cf       	rjmp	.-14     	; 0x588 <main+0xc>

00000596 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
 596:	cf 92       	push	r12
 598:	df 92       	push	r13
 59a:	ef 92       	push	r14
 59c:	ff 92       	push	r15
 59e:	0f 93       	push	r16
 5a0:	1f 93       	push	r17
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	41 15       	cp	r20, r1
 5a8:	51 05       	cpc	r21, r1
 5aa:	c1 f0       	breq	.+48     	; 0x5dc <_ZN5Print5writeEPKhj+0x46>
 5ac:	6a 01       	movw	r12, r20
 5ae:	8c 01       	movw	r16, r24
 5b0:	e6 2e       	mov	r14, r22
 5b2:	f7 2e       	mov	r15, r23
 5b4:	c0 e0       	ldi	r28, 0x00	; 0
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
 5b8:	d7 01       	movw	r26, r14
 5ba:	6d 91       	ld	r22, X+
 5bc:	7d 01       	movw	r14, r26
 5be:	d8 01       	movw	r26, r16
 5c0:	ed 91       	ld	r30, X+
 5c2:	fc 91       	ld	r31, X
 5c4:	01 90       	ld	r0, Z+
 5c6:	f0 81       	ld	r31, Z
 5c8:	e0 2d       	mov	r30, r0
 5ca:	c8 01       	movw	r24, r16
 5cc:	09 95       	icall
 5ce:	89 2b       	or	r24, r25
 5d0:	39 f0       	breq	.+14     	; 0x5e0 <_ZN5Print5writeEPKhj+0x4a>
 5d2:	21 96       	adiw	r28, 0x01	; 1
 5d4:	cc 16       	cp	r12, r28
 5d6:	dd 06       	cpc	r13, r29
 5d8:	79 f7       	brne	.-34     	; 0x5b8 <_ZN5Print5writeEPKhj+0x22>
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <_ZN5Print5writeEPKhj+0x4a>
 5dc:	c0 e0       	ldi	r28, 0x00	; 0
 5de:	d0 e0       	ldi	r29, 0x00	; 0
 5e0:	ce 01       	movw	r24, r28
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	ff 90       	pop	r15
 5ec:	ef 90       	pop	r14
 5ee:	df 90       	pop	r13
 5f0:	cf 90       	pop	r12
 5f2:	08 95       	ret

000005f4 <_ZN5Print5printEc>:
 5f4:	dc 01       	movw	r26, r24
 5f6:	ed 91       	ld	r30, X+
 5f8:	fc 91       	ld	r31, X
 5fa:	01 90       	ld	r0, Z+
 5fc:	f0 81       	ld	r31, Z
 5fe:	e0 2d       	mov	r30, r0
 600:	09 95       	icall
 602:	08 95       	ret

00000604 <_ZN5Print7printlnEv>:
 604:	dc 01       	movw	r26, r24
 606:	ed 91       	ld	r30, X+
 608:	fc 91       	ld	r31, X
 60a:	02 80       	ldd	r0, Z+2	; 0x02
 60c:	f3 81       	ldd	r31, Z+3	; 0x03
 60e:	e0 2d       	mov	r30, r0
 610:	42 e0       	ldi	r20, 0x02	; 2
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	6d e1       	ldi	r22, 0x1D	; 29
 616:	71 e0       	ldi	r23, 0x01	; 1
 618:	09 95       	icall
 61a:	08 95       	ret

0000061c <_ZN5Print11printNumberEmh>:
 61c:	8f 92       	push	r8
 61e:	9f 92       	push	r9
 620:	af 92       	push	r10
 622:	bf 92       	push	r11
 624:	ef 92       	push	r14
 626:	ff 92       	push	r15
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	cd b7       	in	r28, 0x3d	; 61
 632:	de b7       	in	r29, 0x3e	; 62
 634:	a1 97       	sbiw	r28, 0x21	; 33
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	f8 94       	cli
 63a:	de bf       	out	0x3e, r29	; 62
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	cd bf       	out	0x3d, r28	; 61
 640:	7c 01       	movw	r14, r24
 642:	cb 01       	movw	r24, r22
 644:	ba 01       	movw	r22, r20
 646:	19 a2       	std	Y+33, r1	; 0x21
 648:	22 30       	cpi	r18, 0x02	; 2
 64a:	08 f4       	brcc	.+2      	; 0x64e <_ZN5Print11printNumberEmh+0x32>
 64c:	2a e0       	ldi	r18, 0x0A	; 10
 64e:	8e 01       	movw	r16, r28
 650:	0f 5d       	subi	r16, 0xDF	; 223
 652:	1f 4f       	sbci	r17, 0xFF	; 255
 654:	82 2e       	mov	r8, r18
 656:	91 2c       	mov	r9, r1
 658:	a1 2c       	mov	r10, r1
 65a:	b1 2c       	mov	r11, r1
 65c:	a5 01       	movw	r20, r10
 65e:	94 01       	movw	r18, r8
 660:	0e 94 88 06 	call	0xd10	; 0xd10 <__udivmodsi4>
 664:	e6 2f       	mov	r30, r22
 666:	62 2f       	mov	r22, r18
 668:	73 2f       	mov	r23, r19
 66a:	84 2f       	mov	r24, r20
 66c:	95 2f       	mov	r25, r21
 66e:	01 50       	subi	r16, 0x01	; 1
 670:	11 09       	sbc	r17, r1
 672:	ea 30       	cpi	r30, 0x0A	; 10
 674:	10 f4       	brcc	.+4      	; 0x67a <_ZN5Print11printNumberEmh+0x5e>
 676:	e0 5d       	subi	r30, 0xD0	; 208
 678:	01 c0       	rjmp	.+2      	; 0x67c <_ZN5Print11printNumberEmh+0x60>
 67a:	e9 5c       	subi	r30, 0xC9	; 201
 67c:	d8 01       	movw	r26, r16
 67e:	ec 93       	st	X, r30
 680:	61 15       	cp	r22, r1
 682:	71 05       	cpc	r23, r1
 684:	81 05       	cpc	r24, r1
 686:	91 05       	cpc	r25, r1
 688:	49 f7       	brne	.-46     	; 0x65c <_ZN5Print11printNumberEmh+0x40>
 68a:	01 15       	cp	r16, r1
 68c:	11 05       	cpc	r17, r1
 68e:	91 f0       	breq	.+36     	; 0x6b4 <_ZN5Print11printNumberEmh+0x98>
 690:	f8 01       	movw	r30, r16
 692:	01 90       	ld	r0, Z+
 694:	00 20       	and	r0, r0
 696:	e9 f7       	brne	.-6      	; 0x692 <_ZN5Print11printNumberEmh+0x76>
 698:	31 97       	sbiw	r30, 0x01	; 1
 69a:	af 01       	movw	r20, r30
 69c:	40 1b       	sub	r20, r16
 69e:	51 0b       	sbc	r21, r17
 6a0:	d7 01       	movw	r26, r14
 6a2:	ed 91       	ld	r30, X+
 6a4:	fc 91       	ld	r31, X
 6a6:	02 80       	ldd	r0, Z+2	; 0x02
 6a8:	f3 81       	ldd	r31, Z+3	; 0x03
 6aa:	e0 2d       	mov	r30, r0
 6ac:	b8 01       	movw	r22, r16
 6ae:	c7 01       	movw	r24, r14
 6b0:	09 95       	icall
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <_ZN5Print11printNumberEmh+0x9c>
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	a1 96       	adiw	r28, 0x21	; 33
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	cd bf       	out	0x3d, r28	; 61
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	1f 91       	pop	r17
 6ca:	0f 91       	pop	r16
 6cc:	ff 90       	pop	r15
 6ce:	ef 90       	pop	r14
 6d0:	bf 90       	pop	r11
 6d2:	af 90       	pop	r10
 6d4:	9f 90       	pop	r9
 6d6:	8f 90       	pop	r8
 6d8:	08 95       	ret

000006da <_ZN5Print5printEmi>:
 6da:	21 15       	cp	r18, r1
 6dc:	31 05       	cpc	r19, r1
 6de:	49 f4       	brne	.+18     	; 0x6f2 <_ZN5Print5printEmi+0x18>
 6e0:	dc 01       	movw	r26, r24
 6e2:	ed 91       	ld	r30, X+
 6e4:	fc 91       	ld	r31, X
 6e6:	01 90       	ld	r0, Z+
 6e8:	f0 81       	ld	r31, Z
 6ea:	e0 2d       	mov	r30, r0
 6ec:	64 2f       	mov	r22, r20
 6ee:	09 95       	icall
 6f0:	08 95       	ret
 6f2:	0e 94 0e 03 	call	0x61c	; 0x61c <_ZN5Print11printNumberEmh>
 6f6:	08 95       	ret

000006f8 <_ZN5Print5printEhi>:
 6f8:	9a 01       	movw	r18, r20
 6fa:	46 2f       	mov	r20, r22
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	60 e0       	ldi	r22, 0x00	; 0
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN5Print5printEmi>
 706:	08 95       	ret

00000708 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 708:	0f 93       	push	r16
 70a:	1f 93       	push	r17
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
 712:	0e 94 6d 03 	call	0x6da	; 0x6da <_ZN5Print5printEmi>
 716:	8c 01       	movw	r16, r24
  n += println();
 718:	ce 01       	movw	r24, r28
 71a:	0e 94 02 03 	call	0x604	; 0x604 <_ZN5Print7printlnEv>
  return n;
}
 71e:	80 0f       	add	r24, r16
 720:	91 1f       	adc	r25, r17
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	08 95       	ret

0000072c <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
 72c:	81 30       	cpi	r24, 0x01	; 1
 72e:	39 f0       	breq	.+14     	; 0x73e <_Z12disableTimerh+0x12>
 730:	18 f0       	brcs	.+6      	; 0x738 <_Z12disableTimerh+0xc>
 732:	82 30       	cpi	r24, 0x02	; 2
 734:	51 f0       	breq	.+20     	; 0x74a <_Z12disableTimerh+0x1e>
 736:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
 738:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
 73c:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
 73e:	ef e6       	ldi	r30, 0x6F	; 111
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	8d 7f       	andi	r24, 0xFD	; 253
 746:	80 83       	st	Z, r24
      break;
 748:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 74a:	e0 e7       	ldi	r30, 0x70	; 112
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	8d 7f       	andi	r24, 0xFD	; 253
 752:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
 75a:	e1 eb       	ldi	r30, 0xB1	; 177
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	88 7f       	andi	r24, 0xF8	; 248
 762:	84 60       	ori	r24, 0x04	; 4
 764:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
 766:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 76a:	08 95       	ret

0000076c <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
 76c:	cf 93       	push	r28
 76e:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
 770:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 774:	c8 13       	cpse	r28, r24
 776:	07 c0       	rjmp	.+14     	; 0x786 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 778:	e8 e6       	ldi	r30, 0x68	; 104
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
 77e:	9f ef       	ldi	r25, 0xFF	; 255
 780:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
      break;
 784:	01 c0       	rjmp	.+2      	; 0x788 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
 786:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
 788:	0e 94 96 03 	call	0x72c	; 0x72c <_Z12disableTimerh>

  digitalWrite(_pin, 0);
 78c:	60 e0       	ldi	r22, 0x00	; 0
 78e:	8c 2f       	mov	r24, r28
 790:	0e 94 2b 05 	call	0xa56	; 0xa56 <digitalWrite>
}
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
 798:	1f 92       	push	r1
 79a:	0f 92       	push	r0
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	0f 92       	push	r0
 7a0:	11 24       	eor	r1, r1
 7a2:	2f 93       	push	r18
 7a4:	3f 93       	push	r19
 7a6:	4f 93       	push	r20
 7a8:	5f 93       	push	r21
 7aa:	6f 93       	push	r22
 7ac:	7f 93       	push	r23
 7ae:	8f 93       	push	r24
 7b0:	9f 93       	push	r25
 7b2:	af 93       	push	r26
 7b4:	bf 93       	push	r27
 7b6:	ef 93       	push	r30
 7b8:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
 7ba:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <timer2_toggle_count>
 7be:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <timer2_toggle_count+0x1>
 7c2:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <timer2_toggle_count+0x2>
 7c6:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <timer2_toggle_count+0x3>
 7ca:	89 2b       	or	r24, r25
 7cc:	8a 2b       	or	r24, r26
 7ce:	8b 2b       	or	r24, r27
 7d0:	51 f1       	breq	.+84     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
 7d2:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <timer2_pin_mask>
 7d6:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <timer2_pin_port>
 7da:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <timer2_pin_port+0x1>
 7de:	80 81       	ld	r24, Z
 7e0:	89 27       	eor	r24, r25
 7e2:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
 7e4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <timer2_toggle_count>
 7e8:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <timer2_toggle_count+0x1>
 7ec:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <timer2_toggle_count+0x2>
 7f0:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <timer2_toggle_count+0x3>
 7f4:	18 16       	cp	r1, r24
 7f6:	19 06       	cpc	r1, r25
 7f8:	1a 06       	cpc	r1, r26
 7fa:	1b 06       	cpc	r1, r27
 7fc:	c4 f4       	brge	.+48     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
      timer2_toggle_count--;
 7fe:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <timer2_toggle_count>
 802:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <timer2_toggle_count+0x1>
 806:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <timer2_toggle_count+0x2>
 80a:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <timer2_toggle_count+0x3>
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	a1 09       	sbc	r26, r1
 812:	b1 09       	sbc	r27, r1
 814:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <timer2_toggle_count>
 818:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <timer2_toggle_count+0x1>
 81c:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <timer2_toggle_count+0x2>
 820:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <timer2_toggle_count+0x3>
 824:	04 c0       	rjmp	.+8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
 826:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 82a:	0e 94 b6 03 	call	0x76c	; 0x76c <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
 82e:	ff 91       	pop	r31
 830:	ef 91       	pop	r30
 832:	bf 91       	pop	r27
 834:	af 91       	pop	r26
 836:	9f 91       	pop	r25
 838:	8f 91       	pop	r24
 83a:	7f 91       	pop	r23
 83c:	6f 91       	pop	r22
 83e:	5f 91       	pop	r21
 840:	4f 91       	pop	r20
 842:	3f 91       	pop	r19
 844:	2f 91       	pop	r18
 846:	0f 90       	pop	r0
 848:	0f be       	out	0x3f, r0	; 63
 84a:	0f 90       	pop	r0
 84c:	1f 90       	pop	r1
 84e:	18 95       	reti

00000850 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
 850:	08 95       	ret

00000852 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
 85c:	2f 93       	push	r18
 85e:	3f 93       	push	r19
 860:	4f 93       	push	r20
 862:	5f 93       	push	r21
 864:	6f 93       	push	r22
 866:	7f 93       	push	r23
 868:	8f 93       	push	r24
 86a:	9f 93       	push	r25
 86c:	af 93       	push	r26
 86e:	bf 93       	push	r27
 870:	ef 93       	push	r30
 872:	ff 93       	push	r31
 874:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <intFunc>
 878:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <intFunc+0x1>
 87c:	09 95       	icall
 87e:	ff 91       	pop	r31
 880:	ef 91       	pop	r30
 882:	bf 91       	pop	r27
 884:	af 91       	pop	r26
 886:	9f 91       	pop	r25
 888:	8f 91       	pop	r24
 88a:	7f 91       	pop	r23
 88c:	6f 91       	pop	r22
 88e:	5f 91       	pop	r21
 890:	4f 91       	pop	r20
 892:	3f 91       	pop	r19
 894:	2f 91       	pop	r18
 896:	0f 90       	pop	r0
 898:	0f be       	out	0x3f, r0	; 63
 89a:	0f 90       	pop	r0
 89c:	1f 90       	pop	r1
 89e:	18 95       	reti

000008a0 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
 8a0:	1f 92       	push	r1
 8a2:	0f 92       	push	r0
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	0f 92       	push	r0
 8a8:	11 24       	eor	r1, r1
 8aa:	2f 93       	push	r18
 8ac:	3f 93       	push	r19
 8ae:	4f 93       	push	r20
 8b0:	5f 93       	push	r21
 8b2:	6f 93       	push	r22
 8b4:	7f 93       	push	r23
 8b6:	8f 93       	push	r24
 8b8:	9f 93       	push	r25
 8ba:	af 93       	push	r26
 8bc:	bf 93       	push	r27
 8be:	ef 93       	push	r30
 8c0:	ff 93       	push	r31
 8c2:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <intFunc+0x2>
 8c6:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <intFunc+0x3>
 8ca:	09 95       	icall
 8cc:	ff 91       	pop	r31
 8ce:	ef 91       	pop	r30
 8d0:	bf 91       	pop	r27
 8d2:	af 91       	pop	r26
 8d4:	9f 91       	pop	r25
 8d6:	8f 91       	pop	r24
 8d8:	7f 91       	pop	r23
 8da:	6f 91       	pop	r22
 8dc:	5f 91       	pop	r21
 8de:	4f 91       	pop	r20
 8e0:	3f 91       	pop	r19
 8e2:	2f 91       	pop	r18
 8e4:	0f 90       	pop	r0
 8e6:	0f be       	out	0x3f, r0	; 63
 8e8:	0f 90       	pop	r0
 8ea:	1f 90       	pop	r1
 8ec:	18 95       	reti

000008ee <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 8ee:	1f 92       	push	r1
 8f0:	0f 92       	push	r0
 8f2:	0f b6       	in	r0, 0x3f	; 63
 8f4:	0f 92       	push	r0
 8f6:	11 24       	eor	r1, r1
 8f8:	2f 93       	push	r18
 8fa:	3f 93       	push	r19
 8fc:	8f 93       	push	r24
 8fe:	9f 93       	push	r25
 900:	af 93       	push	r26
 902:	bf 93       	push	r27
 904:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <timer0_millis>
 908:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <timer0_millis+0x1>
 90c:	a0 91 d9 01 	lds	r26, 0x01D9	; 0x8001d9 <timer0_millis+0x2>
 910:	b0 91 da 01 	lds	r27, 0x01DA	; 0x8001da <timer0_millis+0x3>
 914:	30 91 d6 01 	lds	r19, 0x01D6	; 0x8001d6 <timer0_fract>
 918:	23 e0       	ldi	r18, 0x03	; 3
 91a:	23 0f       	add	r18, r19
 91c:	2d 37       	cpi	r18, 0x7D	; 125
 91e:	20 f4       	brcc	.+8      	; 0x928 <__stack+0x29>
 920:	01 96       	adiw	r24, 0x01	; 1
 922:	a1 1d       	adc	r26, r1
 924:	b1 1d       	adc	r27, r1
 926:	05 c0       	rjmp	.+10     	; 0x932 <__stack+0x33>
 928:	26 e8       	ldi	r18, 0x86	; 134
 92a:	23 0f       	add	r18, r19
 92c:	02 96       	adiw	r24, 0x02	; 2
 92e:	a1 1d       	adc	r26, r1
 930:	b1 1d       	adc	r27, r1
 932:	20 93 d6 01 	sts	0x01D6, r18	; 0x8001d6 <timer0_fract>
 936:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <timer0_millis>
 93a:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <timer0_millis+0x1>
 93e:	a0 93 d9 01 	sts	0x01D9, r26	; 0x8001d9 <timer0_millis+0x2>
 942:	b0 93 da 01 	sts	0x01DA, r27	; 0x8001da <timer0_millis+0x3>
 946:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <timer0_overflow_count>
 94a:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <timer0_overflow_count+0x1>
 94e:	a0 91 dd 01 	lds	r26, 0x01DD	; 0x8001dd <timer0_overflow_count+0x2>
 952:	b0 91 de 01 	lds	r27, 0x01DE	; 0x8001de <timer0_overflow_count+0x3>
 956:	01 96       	adiw	r24, 0x01	; 1
 958:	a1 1d       	adc	r26, r1
 95a:	b1 1d       	adc	r27, r1
 95c:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <timer0_overflow_count>
 960:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <timer0_overflow_count+0x1>
 964:	a0 93 dd 01 	sts	0x01DD, r26	; 0x8001dd <timer0_overflow_count+0x2>
 968:	b0 93 de 01 	sts	0x01DE, r27	; 0x8001de <timer0_overflow_count+0x3>
 96c:	bf 91       	pop	r27
 96e:	af 91       	pop	r26
 970:	9f 91       	pop	r25
 972:	8f 91       	pop	r24
 974:	3f 91       	pop	r19
 976:	2f 91       	pop	r18
 978:	0f 90       	pop	r0
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	0f 90       	pop	r0
 97e:	1f 90       	pop	r1
 980:	18 95       	reti

00000982 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 982:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 984:	84 b5       	in	r24, 0x24	; 36
 986:	82 60       	ori	r24, 0x02	; 2
 988:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 98a:	84 b5       	in	r24, 0x24	; 36
 98c:	81 60       	ori	r24, 0x01	; 1
 98e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 990:	85 b5       	in	r24, 0x25	; 37
 992:	82 60       	ori	r24, 0x02	; 2
 994:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 996:	85 b5       	in	r24, 0x25	; 37
 998:	81 60       	ori	r24, 0x01	; 1
 99a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 99c:	ee e6       	ldi	r30, 0x6E	; 110
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	80 81       	ld	r24, Z
 9a2:	81 60       	ori	r24, 0x01	; 1
 9a4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 9a6:	e1 e8       	ldi	r30, 0x81	; 129
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 9ac:	80 81       	ld	r24, Z
 9ae:	82 60       	ori	r24, 0x02	; 2
 9b0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 9b2:	80 81       	ld	r24, Z
 9b4:	81 60       	ori	r24, 0x01	; 1
 9b6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9b8:	e0 e8       	ldi	r30, 0x80	; 128
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	80 81       	ld	r24, Z
 9be:	81 60       	ori	r24, 0x01	; 1
 9c0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 9c2:	e1 eb       	ldi	r30, 0xB1	; 177
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	84 60       	ori	r24, 0x04	; 4
 9ca:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 9cc:	e0 eb       	ldi	r30, 0xB0	; 176
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	80 81       	ld	r24, Z
 9d2:	81 60       	ori	r24, 0x01	; 1
 9d4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 9d6:	ea e7       	ldi	r30, 0x7A	; 122
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 81       	ld	r24, Z
 9dc:	84 60       	ori	r24, 0x04	; 4
 9de:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 9e0:	80 81       	ld	r24, Z
 9e2:	82 60       	ori	r24, 0x02	; 2
 9e4:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 9e6:	80 81       	ld	r24, Z
 9e8:	81 60       	ori	r24, 0x01	; 1
 9ea:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9ec:	80 81       	ld	r24, Z
 9ee:	80 68       	ori	r24, 0x80	; 128
 9f0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9f2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 9f6:	08 95       	ret

000009f8 <turnOffPWM>:
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
 9f8:	83 30       	cpi	r24, 0x03	; 3
 9fa:	69 f0       	breq	.+26     	; 0xa16 <turnOffPWM+0x1e>
 9fc:	28 f4       	brcc	.+10     	; 0xa08 <turnOffPWM+0x10>
 9fe:	81 30       	cpi	r24, 0x01	; 1
 a00:	b1 f0       	breq	.+44     	; 0xa2e <turnOffPWM+0x36>
 a02:	82 30       	cpi	r24, 0x02	; 2
 a04:	c1 f0       	breq	.+48     	; 0xa36 <turnOffPWM+0x3e>
 a06:	08 95       	ret
 a08:	87 30       	cpi	r24, 0x07	; 7
 a0a:	c9 f0       	breq	.+50     	; 0xa3e <turnOffPWM+0x46>
 a0c:	88 30       	cpi	r24, 0x08	; 8
 a0e:	e9 f0       	breq	.+58     	; 0xa4a <turnOffPWM+0x52>
 a10:	84 30       	cpi	r24, 0x04	; 4
 a12:	01 f5       	brne	.+64     	; 0xa54 <turnOffPWM+0x5c>
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <turnOffPWM+0x2a>
 a16:	e0 e8       	ldi	r30, 0x80	; 128
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	80 81       	ld	r24, Z
 a1c:	8f 77       	andi	r24, 0x7F	; 127
 a1e:	80 83       	st	Z, r24
 a20:	08 95       	ret
 a22:	e0 e8       	ldi	r30, 0x80	; 128
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	80 81       	ld	r24, Z
 a28:	8f 7d       	andi	r24, 0xDF	; 223
 a2a:	80 83       	st	Z, r24
 a2c:	08 95       	ret
 a2e:	84 b5       	in	r24, 0x24	; 36
 a30:	8f 77       	andi	r24, 0x7F	; 127
 a32:	84 bd       	out	0x24, r24	; 36
 a34:	08 95       	ret
 a36:	84 b5       	in	r24, 0x24	; 36
 a38:	8f 7d       	andi	r24, 0xDF	; 223
 a3a:	84 bd       	out	0x24, r24	; 36
 a3c:	08 95       	ret
 a3e:	e0 eb       	ldi	r30, 0xB0	; 176
 a40:	f0 e0       	ldi	r31, 0x00	; 0
 a42:	80 81       	ld	r24, Z
 a44:	8f 77       	andi	r24, 0x7F	; 127
 a46:	80 83       	st	Z, r24
 a48:	08 95       	ret
 a4a:	e0 eb       	ldi	r30, 0xB0	; 176
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	80 81       	ld	r24, Z
 a50:	8f 7d       	andi	r24, 0xDF	; 223
 a52:	80 83       	st	Z, r24
 a54:	08 95       	ret

00000a56 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a56:	1f 93       	push	r17
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a5c:	28 2f       	mov	r18, r24
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	f9 01       	movw	r30, r18
 a62:	e7 59       	subi	r30, 0x97	; 151
 a64:	ff 4f       	sbci	r31, 0xFF	; 255
 a66:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a68:	f9 01       	movw	r30, r18
 a6a:	e3 58       	subi	r30, 0x83	; 131
 a6c:	ff 4f       	sbci	r31, 0xFF	; 255
 a6e:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
 a70:	f9 01       	movw	r30, r18
 a72:	ef 56       	subi	r30, 0x6F	; 111
 a74:	ff 4f       	sbci	r31, 0xFF	; 255
 a76:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a78:	cc 23       	and	r28, r28
 a7a:	d1 f0       	breq	.+52     	; 0xab0 <digitalWrite+0x5a>
 a7c:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a7e:	81 11       	cpse	r24, r1
 a80:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <turnOffPWM>

	out = portOutputRegister(port);
 a84:	ec 2f       	mov	r30, r28
 a86:	f0 e0       	ldi	r31, 0x00	; 0
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	eb 55       	subi	r30, 0x5B	; 91
 a8e:	ff 4f       	sbci	r31, 0xFF	; 255
 a90:	a5 91       	lpm	r26, Z+
 a92:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 a94:	8f b7       	in	r24, 0x3f	; 63
	cli();
 a96:	f8 94       	cli

	if (val == LOW) {
 a98:	d1 11       	cpse	r29, r1
 a9a:	06 c0       	rjmp	.+12     	; 0xaa8 <digitalWrite+0x52>
		*out &= ~bit;
 a9c:	9c 91       	ld	r25, X
 a9e:	e1 2f       	mov	r30, r17
 aa0:	e0 95       	com	r30
 aa2:	e9 23       	and	r30, r25
 aa4:	ec 93       	st	X, r30
 aa6:	03 c0       	rjmp	.+6      	; 0xaae <digitalWrite+0x58>
	} else {
		*out |= bit;
 aa8:	ec 91       	ld	r30, X
 aaa:	e1 2b       	or	r30, r17
 aac:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 aae:	8f bf       	out	0x3f, r24	; 63
}
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	1f 91       	pop	r17
 ab6:	08 95       	ret

00000ab8 <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
 ab8:	1f 92       	push	r1
 aba:	0f 92       	push	r0
 abc:	0f b6       	in	r0, 0x3f	; 63
 abe:	0f 92       	push	r0
 ac0:	11 24       	eor	r1, r1
 ac2:	2f 93       	push	r18
 ac4:	3f 93       	push	r19
 ac6:	4f 93       	push	r20
 ac8:	5f 93       	push	r21
 aca:	6f 93       	push	r22
 acc:	7f 93       	push	r23
 ace:	8f 93       	push	r24
 ad0:	9f 93       	push	r25
 ad2:	af 93       	push	r26
 ad4:	bf 93       	push	r27
 ad6:	cf 93       	push	r28
 ad8:	df 93       	push	r29
 ada:	ef 93       	push	r30
 adc:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
 ade:	a0 91 e1 02 	lds	r26, 0x02E1	; 0x8002e1 <_ZN14SoftwareSerial13active_objectE>
 ae2:	b0 91 e2 02 	lds	r27, 0x02E2	; 0x8002e2 <_ZN14SoftwareSerial13active_objectE+0x1>
 ae6:	10 97       	sbiw	r26, 0x00	; 0
 ae8:	09 f4       	brne	.+2      	; 0xaec <__vector_3+0x34>
 aea:	78 c0       	rjmp	.+240    	; 0xbdc <__vector_3+0x124>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 aec:	5e 96       	adiw	r26, 0x1e	; 30
 aee:	8c 91       	ld	r24, X
 af0:	5e 97       	sbiw	r26, 0x1e	; 30
 af2:	81 ff       	sbrs	r24, 1
 af4:	0d c0       	rjmp	.+26     	; 0xb10 <__vector_3+0x58>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 af6:	1e 96       	adiw	r26, 0x0e	; 14
 af8:	ed 91       	ld	r30, X+
 afa:	fc 91       	ld	r31, X
 afc:	1f 97       	sbiw	r26, 0x0f	; 15
 afe:	90 81       	ld	r25, Z

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 b00:	1d 96       	adiw	r26, 0x0d	; 13
 b02:	8c 91       	ld	r24, X
 b04:	1d 97       	sbiw	r26, 0x0d	; 13
 b06:	98 23       	and	r25, r24
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	71 f4       	brne	.+28     	; 0xb28 <__vector_3+0x70>
 b0c:	80 e0       	ldi	r24, 0x00	; 0
 b0e:	0c c0       	rjmp	.+24     	; 0xb28 <__vector_3+0x70>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 b10:	1e 96       	adiw	r26, 0x0e	; 14
 b12:	ed 91       	ld	r30, X+
 b14:	fc 91       	ld	r31, X
 b16:	1f 97       	sbiw	r26, 0x0f	; 15
 b18:	90 81       	ld	r25, Z

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
 b1a:	1d 96       	adiw	r26, 0x0d	; 13
 b1c:	8c 91       	ld	r24, X
 b1e:	1d 97       	sbiw	r26, 0x0d	; 13
 b20:	98 23       	and	r25, r24
 b22:	81 e0       	ldi	r24, 0x01	; 1
 b24:	09 f0       	breq	.+2      	; 0xb28 <__vector_3+0x70>
 b26:	80 e0       	ldi	r24, 0x00	; 0
 b28:	88 23       	and	r24, r24
 b2a:	09 f4       	brne	.+2      	; 0xb2e <__vector_3+0x76>
 b2c:	57 c0       	rjmp	.+174    	; 0xbdc <__vector_3+0x124>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
 b2e:	53 96       	adiw	r26, 0x13	; 19
 b30:	ed 91       	ld	r30, X+
 b32:	fc 91       	ld	r31, X
 b34:	54 97       	sbiw	r26, 0x14	; 20
 b36:	90 81       	ld	r25, Z
 b38:	55 96       	adiw	r26, 0x15	; 21
 b3a:	8c 91       	ld	r24, X
 b3c:	55 97       	sbiw	r26, 0x15	; 21
 b3e:	80 95       	com	r24
 b40:	89 23       	and	r24, r25
 b42:	80 83       	st	Z, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 b44:	56 96       	adiw	r26, 0x16	; 22
 b46:	8d 91       	ld	r24, X+
 b48:	9c 91       	ld	r25, X
 b4a:	57 97       	sbiw	r26, 0x17	; 23
 b4c:	01 97       	sbiw	r24, 0x01	; 1
 b4e:	f1 f7       	brne	.-4      	; 0xb4c <__vector_3+0x94>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
 b50:	58 96       	adiw	r26, 0x18	; 24
 b52:	6d 91       	ld	r22, X+
 b54:	7c 91       	ld	r23, X
 b56:	59 97       	sbiw	r26, 0x19	; 25
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 b58:	1e 96       	adiw	r26, 0x0e	; 14
 b5a:	cd 91       	ld	r28, X+
 b5c:	dc 91       	ld	r29, X
 b5e:	1f 97       	sbiw	r26, 0x0f	; 15
 b60:	1d 96       	adiw	r26, 0x0d	; 13
 b62:	5c 91       	ld	r21, X
 b64:	1d 97       	sbiw	r26, 0x0d	; 13
 b66:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
 b68:	40 e0       	ldi	r20, 0x00	; 0
 b6a:	fb 01       	movw	r30, r22
 b6c:	31 97       	sbiw	r30, 0x01	; 1
 b6e:	f1 f7       	brne	.-4      	; 0xb6c <__vector_3+0xb4>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
 b70:	84 2f       	mov	r24, r20
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	95 95       	asr	r25
 b76:	87 95       	ror	r24
 b78:	48 2f       	mov	r20, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
 b7a:	28 81       	ld	r18, Y
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
 b7c:	25 23       	and	r18, r21
 b7e:	09 f0       	breq	.+2      	; 0xb82 <__vector_3+0xca>
        d |= 0x80;
 b80:	40 68       	ori	r20, 0x80	; 128
 b82:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
 b84:	91 f7       	brne	.-28     	; 0xb6a <__vector_3+0xb2>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
 b86:	5e 96       	adiw	r26, 0x1e	; 30
 b88:	8c 91       	ld	r24, X
 b8a:	5e 97       	sbiw	r26, 0x1e	; 30
 b8c:	81 fd       	sbrc	r24, 1
      d = ~d;
 b8e:	40 95       	com	r20

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
 b90:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 b94:	8f 5f       	subi	r24, 0xFF	; 255
    if (next != _receive_buffer_head)
 b96:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <_ZN14SoftwareSerial20_receive_buffer_headE>
 b9a:	28 17       	cp	r18, r24
 b9c:	49 f0       	breq	.+18     	; 0xbb0 <__vector_3+0xf8>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
 b9e:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	ef 51       	subi	r30, 0x1F	; 31
 ba6:	fe 4f       	sbci	r31, 0xFE	; 254
 ba8:	40 83       	st	Z, r20
      _receive_buffer_tail = next;
 baa:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 bae:	07 c0       	rjmp	.+14     	; 0xbbe <__vector_3+0x106>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
 bb0:	5e 96       	adiw	r26, 0x1e	; 30
 bb2:	8c 91       	ld	r24, X
 bb4:	5e 97       	sbiw	r26, 0x1e	; 30
 bb6:	81 60       	ori	r24, 0x01	; 1
 bb8:	5e 96       	adiw	r26, 0x1e	; 30
 bba:	8c 93       	st	X, r24
 bbc:	5e 97       	sbiw	r26, 0x1e	; 30
 bbe:	5a 96       	adiw	r26, 0x1a	; 26
 bc0:	8d 91       	ld	r24, X+
 bc2:	9c 91       	ld	r25, X
 bc4:	5b 97       	sbiw	r26, 0x1b	; 27
 bc6:	01 97       	sbiw	r24, 0x01	; 1
 bc8:	f1 f7       	brne	.-4      	; 0xbc6 <__vector_3+0x10e>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
 bca:	53 96       	adiw	r26, 0x13	; 19
 bcc:	ed 91       	ld	r30, X+
 bce:	fc 91       	ld	r31, X
 bd0:	54 97       	sbiw	r26, 0x14	; 20
 bd2:	90 81       	ld	r25, Z
 bd4:	55 96       	adiw	r26, 0x15	; 21
 bd6:	8c 91       	ld	r24, X
 bd8:	89 2b       	or	r24, r25
 bda:	80 83       	st	Z, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
 bdc:	ff 91       	pop	r31
 bde:	ef 91       	pop	r30
 be0:	df 91       	pop	r29
 be2:	cf 91       	pop	r28
 be4:	bf 91       	pop	r27
 be6:	af 91       	pop	r26
 be8:	9f 91       	pop	r25
 bea:	8f 91       	pop	r24
 bec:	7f 91       	pop	r23
 bee:	6f 91       	pop	r22
 bf0:	5f 91       	pop	r21
 bf2:	4f 91       	pop	r20
 bf4:	3f 91       	pop	r19
 bf6:	2f 91       	pop	r18
 bf8:	0f 90       	pop	r0
 bfa:	0f be       	out	0x3f, r0	; 63
 bfc:	0f 90       	pop	r0
 bfe:	1f 90       	pop	r1
 c00:	18 95       	reti

00000c02 <_ZN15LedManagerClassC1Eh>:
	
}

LedManagerClass::~LedManagerClass(void)
{
	   *LedBase = 0;
 c02:	e6 2f       	mov	r30, r22
 c04:	f0 e0       	ldi	r31, 0x00	; 0
 c06:	dc 01       	movw	r26, r24
 c08:	ed 93       	st	X+, r30
 c0a:	fc 93       	st	X, r31
 c0c:	10 82       	st	Z, r1
 c0e:	fc 01       	movw	r30, r24
 c10:	12 82       	std	Z+2, r1	; 0x02
 c12:	13 82       	std	Z+3, r1	; 0x03
 c14:	14 82       	std	Z+4, r1	; 0x04
 c16:	15 82       	std	Z+5, r1	; 0x05
 c18:	08 95       	ret

00000c1a <_ZN15LedManagerClass6SetLedEiNS_8LedStateE>:
	   ShadowLedRegister = 0;
}

void LedManagerClass::SetLed(int LedNumber, LedState State)
{
 c1a:	cf 93       	push	r28
 c1c:	df 93       	push	r29
   if ((LedNumber >= 1) && (LedNumber <= MAX_LED)) {
 c1e:	9b 01       	movw	r18, r22
 c20:	21 50       	subi	r18, 0x01	; 1
 c22:	31 09       	sbc	r19, r1
 c24:	28 30       	cpi	r18, 0x08	; 8
 c26:	31 05       	cpc	r19, r1
 c28:	c0 f5       	brcc	.+112    	; 0xc9a <_ZN15LedManagerClass6SetLedEiNS_8LedStateE+0x80>
 c2a:	24 2f       	mov	r18, r20
 c2c:	ec 01       	movw	r28, r24

	   /* Find correct bitposition */
	  unsigned long  Mask = 1 << (LedNumber-1);
 c2e:	61 50       	subi	r22, 0x01	; 1
 c30:	71 09       	sbc	r23, r1
 c32:	41 e0       	ldi	r20, 0x01	; 1
 c34:	50 e0       	ldi	r21, 0x00	; 0
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <_ZN15LedManagerClass6SetLedEiNS_8LedStateE+0x22>
 c38:	44 0f       	add	r20, r20
 c3a:	55 1f       	adc	r21, r21
 c3c:	6a 95       	dec	r22
 c3e:	e2 f7       	brpl	.-8      	; 0xc38 <_ZN15LedManagerClass6SetLedEiNS_8LedStateE+0x1e>
 c40:	05 2e       	mov	r0, r21
 c42:	00 0c       	add	r0, r0
 c44:	66 0b       	sbc	r22, r22
 c46:	77 0b       	sbc	r23, r23

	   /* and clear or set bit according to State */
	   if (State != OFF) {
 c48:	22 23       	and	r18, r18
 c4a:	99 f0       	breq	.+38     	; 0xc72 <_ZN15LedManagerClass6SetLedEiNS_8LedStateE+0x58>
		   ShadowLedRegister |= Mask;// =0b00100000;
 c4c:	8a 81       	ldd	r24, Y+2	; 0x02
 c4e:	9b 81       	ldd	r25, Y+3	; 0x03
 c50:	ac 81       	ldd	r26, Y+4	; 0x04
 c52:	bd 81       	ldd	r27, Y+5	; 0x05
 c54:	84 2b       	or	r24, r20
 c56:	95 2b       	or	r25, r21
 c58:	a6 2b       	or	r26, r22
 c5a:	b7 2b       	or	r27, r23
 c5c:	8a 83       	std	Y+2, r24	; 0x02
 c5e:	9b 83       	std	Y+3, r25	; 0x03
 c60:	ac 83       	std	Y+4, r26	; 0x04
 c62:	bd 83       	std	Y+5, r27	; 0x05
		   Serial.println(Mask);
 c64:	2a e0       	ldi	r18, 0x0A	; 10
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	8c e2       	ldi	r24, 0x2C	; 44
 c6a:	91 e0       	ldi	r25, 0x01	; 1
 c6c:	0e 94 84 03 	call	0x708	; 0x708 <_ZN5Print7printlnEmi>
 c70:	10 c0       	rjmp	.+32     	; 0xc92 <_ZN15LedManagerClass6SetLedEiNS_8LedStateE+0x78>
		   } else {
		   ShadowLedRegister  &= ~Mask; //=0b00000000;
 c72:	40 95       	com	r20
 c74:	50 95       	com	r21
 c76:	60 95       	com	r22
 c78:	70 95       	com	r23
 c7a:	8a 81       	ldd	r24, Y+2	; 0x02
 c7c:	9b 81       	ldd	r25, Y+3	; 0x03
 c7e:	ac 81       	ldd	r26, Y+4	; 0x04
 c80:	bd 81       	ldd	r27, Y+5	; 0x05
 c82:	48 23       	and	r20, r24
 c84:	59 23       	and	r21, r25
 c86:	6a 23       	and	r22, r26
 c88:	7b 23       	and	r23, r27
 c8a:	4a 83       	std	Y+2, r20	; 0x02
 c8c:	5b 83       	std	Y+3, r21	; 0x03
 c8e:	6c 83       	std	Y+4, r22	; 0x04
 c90:	7d 83       	std	Y+5, r23	; 0x05
	   }
	   
	   *LedBase = ShadowLedRegister;
 c92:	e8 81       	ld	r30, Y
 c94:	f9 81       	ldd	r31, Y+1	; 0x01
 c96:	8a 81       	ldd	r24, Y+2	; 0x02
 c98:	80 83       	st	Z, r24
	}
   }
 c9a:	df 91       	pop	r29
 c9c:	cf 91       	pop	r28
 c9e:	08 95       	ret

00000ca0 <main_ArduinoLockOpener>:
#include <SoftwareSerial.h>



// the loop function runs over and over again forever
void main_ArduinoLockOpener() {
 ca0:	cf 93       	push	r28
 ca2:	df 93       	push	r29
 ca4:	00 d0       	rcall	.+0      	; 0xca6 <main_ArduinoLockOpener+0x6>
 ca6:	00 d0       	rcall	.+0      	; 0xca8 <main_ArduinoLockOpener+0x8>
 ca8:	00 d0       	rcall	.+0      	; 0xcaa <main_ArduinoLockOpener+0xa>
 caa:	cd b7       	in	r28, 0x3d	; 61
 cac:	de b7       	in	r29, 0x3e	; 62
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 cae:	26 e0       	ldi	r18, 0x06	; 6
 cb0:	40 e8       	ldi	r20, 0x80	; 128
 cb2:	55 e2       	ldi	r21, 0x25	; 37
 cb4:	60 e0       	ldi	r22, 0x00	; 0
 cb6:	70 e0       	ldi	r23, 0x00	; 0
 cb8:	8c e2       	ldi	r24, 0x2C	; 44
 cba:	91 e0       	ldi	r25, 0x01	; 1
 cbc:	0e 94 76 01 	call	0x2ec	; 0x2ec <_ZN14HardwareSerial5beginEmh>
	
	Serial.begin(9600);
	
	

    DDRB = 0b00100000; // configure pin 7 of PORTB as output (digital pin 13 on the Arduino Mega2560)
 cc0:	80 e2       	ldi	r24, 0x20	; 32
 cc2:	84 b9       	out	0x04, r24	; 4
    
	LedManagerClass LedManager;
 cc4:	65 e2       	ldi	r22, 0x25	; 37
 cc6:	ce 01       	movw	r24, r28
 cc8:	01 96       	adiw	r24, 0x01	; 1
 cca:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN15LedManagerClassC1Eh>
	   LedManagerClass *MyParent;
	   int MyLed;
	   
	   public:
      PortClass(LedManagerClass *Parent, int LedNumber) : MyParent(Parent), MyLed(LedNumber) {};
      void On()    {MyParent->SetLed(MyLed, LedManagerClass::ON);};
 cce:	41 e0       	ldi	r20, 0x01	; 1
 cd0:	66 e0       	ldi	r22, 0x06	; 6
 cd2:	70 e0       	ldi	r23, 0x00	; 0
 cd4:	ce 01       	movw	r24, r28
 cd6:	01 96       	adiw	r24, 0x01	; 1
 cd8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN15LedManagerClass6SetLedEiNS_8LedStateE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 cdc:	2f ef       	ldi	r18, 0xFF	; 255
 cde:	89 e6       	ldi	r24, 0x69	; 105
 ce0:	98 e1       	ldi	r25, 0x18	; 24
 ce2:	21 50       	subi	r18, 0x01	; 1
 ce4:	80 40       	sbci	r24, 0x00	; 0
 ce6:	90 40       	sbci	r25, 0x00	; 0
 ce8:	e1 f7       	brne	.-8      	; 0xce2 <main_ArduinoLockOpener+0x42>
 cea:	00 c0       	rjmp	.+0      	; 0xcec <main_ArduinoLockOpener+0x4c>
 cec:	00 00       	nop
      void Off()   {MyParent->SetLed(MyLed, LedManagerClass::OFF);};
 cee:	40 e0       	ldi	r20, 0x00	; 0
 cf0:	66 e0       	ldi	r22, 0x06	; 6
 cf2:	70 e0       	ldi	r23, 0x00	; 0
 cf4:	ce 01       	movw	r24, r28
 cf6:	01 96       	adiw	r24, 0x01	; 1
 cf8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN15LedManagerClass6SetLedEiNS_8LedStateE>
 cfc:	2f ef       	ldi	r18, 0xFF	; 255
 cfe:	89 e6       	ldi	r24, 0x69	; 105
 d00:	98 e1       	ldi	r25, 0x18	; 24
 d02:	21 50       	subi	r18, 0x01	; 1
 d04:	80 40       	sbci	r24, 0x00	; 0
 d06:	90 40       	sbci	r25, 0x00	; 0
 d08:	e1 f7       	brne	.-8      	; 0xd02 <main_ArduinoLockOpener+0x62>
 d0a:	00 c0       	rjmp	.+0      	; 0xd0c <main_ArduinoLockOpener+0x6c>
 d0c:	00 00       	nop
 d0e:	df cf       	rjmp	.-66     	; 0xcce <main_ArduinoLockOpener+0x2e>

00000d10 <__udivmodsi4>:
 d10:	a1 e2       	ldi	r26, 0x21	; 33
 d12:	1a 2e       	mov	r1, r26
 d14:	aa 1b       	sub	r26, r26
 d16:	bb 1b       	sub	r27, r27
 d18:	fd 01       	movw	r30, r26
 d1a:	0d c0       	rjmp	.+26     	; 0xd36 <__udivmodsi4_ep>

00000d1c <__udivmodsi4_loop>:
 d1c:	aa 1f       	adc	r26, r26
 d1e:	bb 1f       	adc	r27, r27
 d20:	ee 1f       	adc	r30, r30
 d22:	ff 1f       	adc	r31, r31
 d24:	a2 17       	cp	r26, r18
 d26:	b3 07       	cpc	r27, r19
 d28:	e4 07       	cpc	r30, r20
 d2a:	f5 07       	cpc	r31, r21
 d2c:	20 f0       	brcs	.+8      	; 0xd36 <__udivmodsi4_ep>
 d2e:	a2 1b       	sub	r26, r18
 d30:	b3 0b       	sbc	r27, r19
 d32:	e4 0b       	sbc	r30, r20
 d34:	f5 0b       	sbc	r31, r21

00000d36 <__udivmodsi4_ep>:
 d36:	66 1f       	adc	r22, r22
 d38:	77 1f       	adc	r23, r23
 d3a:	88 1f       	adc	r24, r24
 d3c:	99 1f       	adc	r25, r25
 d3e:	1a 94       	dec	r1
 d40:	69 f7       	brne	.-38     	; 0xd1c <__udivmodsi4_loop>
 d42:	60 95       	com	r22
 d44:	70 95       	com	r23
 d46:	80 95       	com	r24
 d48:	90 95       	com	r25
 d4a:	9b 01       	movw	r18, r22
 d4c:	ac 01       	movw	r20, r24
 d4e:	bd 01       	movw	r22, r26
 d50:	cf 01       	movw	r24, r30
 d52:	08 95       	ret

00000d54 <__tablejump2__>:
 d54:	ee 0f       	add	r30, r30
 d56:	ff 1f       	adc	r31, r31
 d58:	05 90       	lpm	r0, Z+
 d5a:	f4 91       	lpm	r31, Z
 d5c:	e0 2d       	mov	r30, r0
 d5e:	09 94       	ijmp

00000d60 <_exit>:
 d60:	f8 94       	cli

00000d62 <__stop_program>:
 d62:	ff cf       	rjmp	.-2      	; 0xd62 <__stop_program>
