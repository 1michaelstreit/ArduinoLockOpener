
ArduinoLockOpener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000280  00800100  00002642  000026d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b7  00800380  00800380  00002956  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002956  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000600  00000000  00000000  000029f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010fdd  00000000  00000000  00002ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000038ea  00000000  00000000  00013fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004325  00000000  00000000  000178bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010b8  00000000  00000000  0001bbe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000038b2  00000000  00000000  0001cc9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006044  00000000  00000000  0002054e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b0  00000000  00000000  00026592  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__vector_1>
       8:	0c 94 74 04 	jmp	0x8e8	; 0x8e8 <__vector_2>
       c:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__vector_3>
      10:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__vector_3>
      14:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_7>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 9b 04 	jmp	0x936	; 0x936 <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_18>
      4c:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	Address 0x00000068 is out of bounds.
.word	0xffff	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	50 02       	muls	r21, r16
      c6:	c0 02       	muls	r28, r16

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	13 e0       	ldi	r17, 0x03	; 3
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e2 e4       	ldi	r30, 0x42	; 66
      dc:	f6 e2       	ldi	r31, 0x26	; 38
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a0 38       	cpi	r26, 0x80	; 128
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	25 e0       	ldi	r18, 0x05	; 5
      ec:	a0 e8       	ldi	r26, 0x80	; 128
      ee:	b3 e0       	ldi	r27, 0x03	; 3
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a7 33       	cpi	r26, 0x37	; 55
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c4 e6       	ldi	r28, 0x64	; 100
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__tablejump2__>
     10a:	c2 36       	cpi	r28, 0x62	; 98
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 cc 02 	call	0x598	; 0x598 <main>
     114:	0c 94 1f 13 	jmp	0x263e	; 0x263e <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     11c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     11e:	91 8d       	ldd	r25, Z+25	; 0x19
     120:	22 8d       	ldd	r18, Z+26	; 0x1a
     122:	89 2f       	mov	r24, r25
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	80 5c       	subi	r24, 0xC0	; 192
     128:	9f 4f       	sbci	r25, 0xFF	; 255
     12a:	82 1b       	sub	r24, r18
     12c:	91 09       	sbc	r25, r1
}
     12e:	8f 73       	andi	r24, 0x3F	; 63
     130:	99 27       	eor	r25, r25
     132:	08 95       	ret

00000134 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     134:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     136:	91 8d       	ldd	r25, Z+25	; 0x19
     138:	82 8d       	ldd	r24, Z+26	; 0x1a
     13a:	98 17       	cp	r25, r24
     13c:	31 f0       	breq	.+12     	; 0x14a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     13e:	82 8d       	ldd	r24, Z+26	; 0x1a
     140:	e8 0f       	add	r30, r24
     142:	f1 1d       	adc	r31, r1
     144:	85 8d       	ldd	r24, Z+29	; 0x1d
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     14e:	08 95       	ret

00000150 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     150:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     152:	91 8d       	ldd	r25, Z+25	; 0x19
     154:	82 8d       	ldd	r24, Z+26	; 0x1a
     156:	98 17       	cp	r25, r24
     158:	61 f0       	breq	.+24     	; 0x172 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     15a:	82 8d       	ldd	r24, Z+26	; 0x1a
     15c:	df 01       	movw	r26, r30
     15e:	a8 0f       	add	r26, r24
     160:	b1 1d       	adc	r27, r1
     162:	5d 96       	adiw	r26, 0x1d	; 29
     164:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     166:	92 8d       	ldd	r25, Z+26	; 0x1a
     168:	9f 5f       	subi	r25, 0xFF	; 255
     16a:	9f 73       	andi	r25, 0x3F	; 63
     16c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     172:	8f ef       	ldi	r24, 0xFF	; 255
     174:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     176:	08 95       	ret

00000178 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     178:	fc 01       	movw	r30, r24
     17a:	23 8d       	ldd	r18, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     17c:	34 8d       	ldd	r19, Z+28	; 0x1c
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     17e:	23 17       	cp	r18, r19
     180:	38 f0       	brcs	.+14     	; 0x190 <_ZN14HardwareSerial17availableForWriteEv+0x18>
     182:	8f e3       	ldi	r24, 0x3F	; 63
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	82 1b       	sub	r24, r18
     188:	91 09       	sbc	r25, r1
     18a:	83 0f       	add	r24, r19
     18c:	91 1d       	adc	r25, r1
     18e:	08 95       	ret
  return tail - head - 1;
     190:	83 2f       	mov	r24, r19
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	82 1b       	sub	r24, r18
     196:	91 09       	sbc	r25, r1
     198:	01 97       	sbiw	r24, 0x01	; 1
}
     19a:	08 95       	ret

0000019c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     19c:	86 e4       	ldi	r24, 0x46	; 70
     19e:	92 e0       	ldi	r25, 0x02	; 2
     1a0:	89 2b       	or	r24, r25
     1a2:	49 f0       	breq	.+18     	; 0x1b6 <_Z14serialEventRunv+0x1a>
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	89 2b       	or	r24, r25
     1aa:	29 f0       	breq	.+10     	; 0x1b6 <_Z14serialEventRunv+0x1a>
     1ac:	0e 94 46 02 	call	0x48c	; 0x48c <_Z17Serial0_availablev>
     1b0:	81 11       	cpse	r24, r1
     1b2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     1b6:	08 95       	ret

000001b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     1b8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	df 01       	movw	r26, r30
     1be:	a8 0f       	add	r26, r24
     1c0:	b1 1d       	adc	r27, r1
     1c2:	a3 5a       	subi	r26, 0xA3	; 163
     1c4:	bf 4f       	sbci	r27, 0xFF	; 255
     1c6:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     1c8:	24 8d       	ldd	r18, Z+28	; 0x1c
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	2f 5f       	subi	r18, 0xFF	; 255
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
     1d0:	2f 73       	andi	r18, 0x3F	; 63
     1d2:	30 78       	andi	r19, 0x80	; 128
     1d4:	33 23       	and	r19, r19
     1d6:	34 f4       	brge	.+12     	; 0x1e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	31 09       	sbc	r19, r1
     1dc:	20 6c       	ori	r18, 0xC0	; 192
     1de:	3f 6f       	ori	r19, 0xFF	; 255
     1e0:	2f 5f       	subi	r18, 0xFF	; 255
     1e2:	3f 4f       	sbci	r19, 0xFF	; 255
     1e4:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     1e6:	a6 89       	ldd	r26, Z+22	; 0x16
     1e8:	b7 89       	ldd	r27, Z+23	; 0x17
     1ea:	8c 93       	st	X, r24
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     1ec:	a0 89       	ldd	r26, Z+16	; 0x10
     1ee:	b1 89       	ldd	r27, Z+17	; 0x11
     1f0:	8c 91       	ld	r24, X
     1f2:	83 70       	andi	r24, 0x03	; 3
     1f4:	80 64       	ori	r24, 0x40	; 64
     1f6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     1f8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1fa:	84 8d       	ldd	r24, Z+28	; 0x1c
     1fc:	98 13       	cpse	r25, r24
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     200:	02 88       	ldd	r0, Z+18	; 0x12
     202:	f3 89       	ldd	r31, Z+19	; 0x13
     204:	e0 2d       	mov	r30, r0
     206:	80 81       	ld	r24, Z
     208:	8f 7d       	andi	r24, 0xDF	; 223
     20a:	80 83       	st	Z, r24
     20c:	08 95       	ret

0000020e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     214:	88 8d       	ldd	r24, Y+24	; 0x18
     216:	88 23       	and	r24, r24
     218:	d9 f0       	breq	.+54     	; 0x250 <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     21a:	ea 89       	ldd	r30, Y+18	; 0x12
     21c:	fb 89       	ldd	r31, Y+19	; 0x13
     21e:	80 81       	ld	r24, Z
     220:	85 fd       	sbrc	r24, 5
     222:	05 c0       	rjmp	.+10     	; 0x22e <_ZN14HardwareSerial5flushEv+0x20>
     224:	a8 89       	ldd	r26, Y+16	; 0x10
     226:	b9 89       	ldd	r27, Y+17	; 0x11
     228:	8c 91       	ld	r24, X
     22a:	86 fd       	sbrc	r24, 6
     22c:	11 c0       	rjmp	.+34     	; 0x250 <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	07 fc       	sbrc	r0, 7
     232:	f5 cf       	rjmp	.-22     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     234:	80 81       	ld	r24, Z
     236:	85 ff       	sbrs	r24, 5
     238:	f2 cf       	rjmp	.-28     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     23a:	04 c0       	rjmp	.+8      	; 0x244 <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
     23c:	ce 01       	movw	r24, r28
     23e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     242:	eb cf       	rjmp	.-42     	; 0x21a <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     244:	a8 89       	ldd	r26, Y+16	; 0x10
     246:	b9 89       	ldd	r27, Y+17	; 0x11
     248:	8c 91       	ld	r24, X
     24a:	85 ff       	sbrs	r24, 5
     24c:	e8 cf       	rjmp	.-48     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     24e:	f6 cf       	rjmp	.-20     	; 0x23c <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	ec 01       	movw	r28, r24
  _written = true;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     264:	9b 8d       	ldd	r25, Y+27	; 0x1b
     266:	8c 8d       	ldd	r24, Y+28	; 0x1c
     268:	98 13       	cpse	r25, r24
     26a:	26 c0       	rjmp	.+76     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x62>
     26c:	e8 89       	ldd	r30, Y+16	; 0x10
     26e:	f9 89       	ldd	r31, Y+17	; 0x11
     270:	80 81       	ld	r24, Z
     272:	85 fd       	sbrc	r24, 5
     274:	32 c0       	rjmp	.+100    	; 0x2da <_ZN14HardwareSerial5writeEh+0x84>
     276:	20 c0       	rjmp	.+64     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x62>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     278:	8c 8d       	ldd	r24, Y+28	; 0x1c
     27a:	18 13       	cpse	r17, r24
     27c:	0c c0       	rjmp	.+24     	; 0x296 <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	07 fc       	sbrc	r0, 7
     282:	fa cf       	rjmp	.-12     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     284:	e8 89       	ldd	r30, Y+16	; 0x10
     286:	f9 89       	ldd	r31, Y+17	; 0x11
     288:	80 81       	ld	r24, Z
     28a:	85 ff       	sbrs	r24, 5
     28c:	f5 cf       	rjmp	.-22     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
     28e:	ce 01       	movw	r24, r28
     290:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     294:	f1 cf       	rjmp	.-30     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     296:	8b 8d       	ldd	r24, Y+27	; 0x1b
     298:	fe 01       	movw	r30, r28
     29a:	e8 0f       	add	r30, r24
     29c:	f1 1d       	adc	r31, r1
     29e:	e3 5a       	subi	r30, 0xA3	; 163
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	00 83       	st	Z, r16

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2a6:	f8 94       	cli
    _tx_buffer_head = i;
     2a8:	1b 8f       	std	Y+27, r17	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     2aa:	ea 89       	ldd	r30, Y+18	; 0x12
     2ac:	fb 89       	ldd	r31, Y+19	; 0x13
     2ae:	80 81       	ld	r24, Z
     2b0:	80 62       	ori	r24, 0x20	; 32
     2b2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2b4:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
     2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <_ZN14HardwareSerial5writeEh+0x9c>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     2b8:	2b 8d       	ldd	r18, Y+27	; 0x1b
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	2f 73       	andi	r18, 0x3F	; 63
     2c2:	30 78       	andi	r19, 0x80	; 128
     2c4:	33 23       	and	r19, r19
     2c6:	34 f4       	brge	.+12     	; 0x2d4 <_ZN14HardwareSerial5writeEh+0x7e>
     2c8:	21 50       	subi	r18, 0x01	; 1
     2ca:	31 09       	sbc	r19, r1
     2cc:	20 6c       	ori	r18, 0xC0	; 192
     2ce:	3f 6f       	ori	r19, 0xFF	; 255
     2d0:	2f 5f       	subi	r18, 0xFF	; 255
     2d2:	3f 4f       	sbci	r19, 0xFF	; 255
     2d4:	06 2f       	mov	r16, r22
     2d6:	12 2f       	mov	r17, r18
     2d8:	cf cf       	rjmp	.-98     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2dc:	f8 94       	cli
      *_udr = c;
     2de:	ee 89       	ldd	r30, Y+22	; 0x16
     2e0:	ff 89       	ldd	r31, Y+23	; 0x17
     2e2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2e4:	e8 89       	ldd	r30, Y+16	; 0x10
     2e6:	f9 89       	ldd	r31, Y+17	; 0x11
     2e8:	80 81       	ld	r24, Z
     2ea:	83 70       	andi	r24, 0x03	; 3
     2ec:	80 64       	ori	r24, 0x40	; 64
     2ee:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2f0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ec 01       	movw	r28, r24
     310:	6a 01       	movw	r12, r20
     312:	7b 01       	movw	r14, r22
     314:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     316:	e8 89       	ldd	r30, Y+16	; 0x10
     318:	f9 89       	ldd	r31, Y+17	; 0x11
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     31e:	41 15       	cp	r20, r1
     320:	51 4e       	sbci	r21, 0xE1	; 225
     322:	61 05       	cpc	r22, r1
     324:	71 05       	cpc	r23, r1
     326:	b1 f0       	breq	.+44     	; 0x354 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	79 e0       	ldi	r23, 0x09	; 9
     32c:	8d e3       	ldi	r24, 0x3D	; 61
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__udivmodsi4>
     338:	da 01       	movw	r26, r20
     33a:	c9 01       	movw	r24, r18
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	a1 09       	sbc	r26, r1
     340:	b1 09       	sbc	r27, r1
     342:	b6 95       	lsr	r27
     344:	a7 95       	ror	r26
     346:	97 95       	ror	r25
     348:	87 95       	ror	r24
     34a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     34c:	21 15       	cp	r18, r1
     34e:	80 e1       	ldi	r24, 0x10	; 16
     350:	38 07       	cpc	r19, r24
     352:	a8 f0       	brcs	.+42     	; 0x37e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     354:	e8 89       	ldd	r30, Y+16	; 0x10
     356:	f9 89       	ldd	r31, Y+17	; 0x11
     358:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     35a:	60 e8       	ldi	r22, 0x80	; 128
     35c:	74 e8       	ldi	r23, 0x84	; 132
     35e:	8e e1       	ldi	r24, 0x1E	; 30
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a7 01       	movw	r20, r14
     364:	96 01       	movw	r18, r12
     366:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__udivmodsi4>
     36a:	da 01       	movw	r26, r20
     36c:	c9 01       	movw	r24, r18
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	a1 09       	sbc	r26, r1
     372:	b1 09       	sbc	r27, r1
     374:	b6 95       	lsr	r27
     376:	a7 95       	ror	r26
     378:	97 95       	ror	r25
     37a:	87 95       	ror	r24
     37c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     37e:	ec 85       	ldd	r30, Y+12	; 0x0c
     380:	fd 85       	ldd	r31, Y+13	; 0x0d
     382:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     384:	ee 85       	ldd	r30, Y+14	; 0x0e
     386:	ff 85       	ldd	r31, Y+15	; 0x0f
     388:	20 83       	st	Z, r18

  _written = false;
     38a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     38c:	ec 89       	ldd	r30, Y+20	; 0x14
     38e:	fd 89       	ldd	r31, Y+21	; 0x15
     390:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     392:	ea 89       	ldd	r30, Y+18	; 0x12
     394:	fb 89       	ldd	r31, Y+19	; 0x13
     396:	80 81       	ld	r24, Z
     398:	80 61       	ori	r24, 0x10	; 16
     39a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     39c:	ea 89       	ldd	r30, Y+18	; 0x12
     39e:	fb 89       	ldd	r31, Y+19	; 0x13
     3a0:	80 81       	ld	r24, Z
     3a2:	88 60       	ori	r24, 0x08	; 8
     3a4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     3a6:	ea 89       	ldd	r30, Y+18	; 0x12
     3a8:	fb 89       	ldd	r31, Y+19	; 0x13
     3aa:	80 81       	ld	r24, Z
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     3b0:	ea 89       	ldd	r30, Y+18	; 0x12
     3b2:	fb 89       	ldd	r31, Y+19	; 0x13
     3b4:	80 81       	ld	r24, Z
     3b6:	8f 7d       	andi	r24, 0xDF	; 223
     3b8:	80 83       	st	Z, r24
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	08 95       	ret

000003ca <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	2f 93       	push	r18
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3e8:	e0 91 90 03 	lds	r30, 0x0390	; 0x800390 <__data_end+0x10>
     3ec:	f0 91 91 03 	lds	r31, 0x0391	; 0x800391 <__data_end+0x11>
     3f0:	80 81       	ld	r24, Z
     3f2:	82 fd       	sbrc	r24, 2
     3f4:	14 c0       	rjmp	.+40     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3f6:	e0 e8       	ldi	r30, 0x80	; 128
     3f8:	f3 e0       	ldi	r31, 0x03	; 3
     3fa:	a6 89       	ldd	r26, Z+22	; 0x16
     3fc:	b7 89       	ldd	r27, Z+23	; 0x17
     3fe:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     400:	81 8d       	ldd	r24, Z+25	; 0x19
     402:	8f 5f       	subi	r24, 0xFF	; 255
     404:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     406:	92 8d       	ldd	r25, Z+26	; 0x1a
     408:	89 17       	cp	r24, r25
     40a:	71 f0       	breq	.+28     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
      _rx_buffer[_rx_buffer_head] = c;
     40c:	df 01       	movw	r26, r30
     40e:	e1 8d       	ldd	r30, Z+25	; 0x19
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	e0 58       	subi	r30, 0x80	; 128
     414:	fc 4f       	sbci	r31, 0xFC	; 252
     416:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     418:	59 96       	adiw	r26, 0x19	; 25
     41a:	8c 93       	st	X, r24
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     41e:	e0 91 96 03 	lds	r30, 0x0396	; 0x800396 <__data_end+0x16>
     422:	f0 91 97 03 	lds	r31, 0x0397	; 0x800397 <__data_end+0x17>
     426:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	2f 93       	push	r18
     44c:	3f 93       	push	r19
     44e:	4f 93       	push	r20
     450:	5f 93       	push	r21
     452:	6f 93       	push	r22
     454:	7f 93       	push	r23
     456:	8f 93       	push	r24
     458:	9f 93       	push	r25
     45a:	af 93       	push	r26
     45c:	bf 93       	push	r27
     45e:	ef 93       	push	r30
     460:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     462:	80 e8       	ldi	r24, 0x80	; 128
     464:	93 e0       	ldi	r25, 0x03	; 3
     466:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	bf 91       	pop	r27
     470:	af 91       	pop	r26
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	7f 91       	pop	r23
     478:	6f 91       	pop	r22
     47a:	5f 91       	pop	r21
     47c:	4f 91       	pop	r20
     47e:	3f 91       	pop	r19
     480:	2f 91       	pop	r18
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     48c:	80 e8       	ldi	r24, 0x80	; 128
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN14HardwareSerial9availableEv>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	89 2b       	or	r24, r25
     498:	09 f4       	brne	.+2      	; 0x49c <_Z17Serial0_availablev+0x10>
     49a:	20 e0       	ldi	r18, 0x00	; 0
}
     49c:	82 2f       	mov	r24, r18
     49e:	08 95       	ret

000004a0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     4a0:	e0 e8       	ldi	r30, 0x80	; 128
     4a2:	f3 e0       	ldi	r31, 0x03	; 3
     4a4:	13 82       	std	Z+3, r1	; 0x03
     4a6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     4a8:	88 ee       	ldi	r24, 0xE8	; 232
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	a0 e0       	ldi	r26, 0x00	; 0
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	84 83       	std	Z+4, r24	; 0x04
     4b2:	95 83       	std	Z+5, r25	; 0x05
     4b4:	a6 83       	std	Z+6, r26	; 0x06
     4b6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     4b8:	89 e0       	ldi	r24, 0x09	; 9
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	85 ec       	ldi	r24, 0xC5	; 197
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	95 87       	std	Z+13, r25	; 0x0d
     4c6:	84 87       	std	Z+12, r24	; 0x0c
     4c8:	84 ec       	ldi	r24, 0xC4	; 196
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	97 87       	std	Z+15, r25	; 0x0f
     4ce:	86 87       	std	Z+14, r24	; 0x0e
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	91 8b       	std	Z+17, r25	; 0x11
     4d6:	80 8b       	std	Z+16, r24	; 0x10
     4d8:	81 ec       	ldi	r24, 0xC1	; 193
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	93 8b       	std	Z+19, r25	; 0x13
     4de:	82 8b       	std	Z+18, r24	; 0x12
     4e0:	82 ec       	ldi	r24, 0xC2	; 194
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	95 8b       	std	Z+21, r25	; 0x15
     4e6:	84 8b       	std	Z+20, r24	; 0x14
     4e8:	86 ec       	ldi	r24, 0xC6	; 198
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	97 8b       	std	Z+23, r25	; 0x17
     4ee:	86 8b       	std	Z+22, r24	; 0x16
     4f0:	11 8e       	std	Z+25, r1	; 0x19
     4f2:	12 8e       	std	Z+26, r1	; 0x1a
     4f4:	13 8e       	std	Z+27, r1	; 0x1b
     4f6:	14 8e       	std	Z+28, r1	; 0x1c
     4f8:	08 95       	ret

000004fa <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     4fa:	08 95       	ret

000004fc <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
     4fc:	8f 92       	push	r8
     4fe:	9f 92       	push	r9
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	6c 01       	movw	r12, r24
     516:	7b 01       	movw	r14, r22
     518:	4c 01       	movw	r8, r24
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	88 0e       	add	r8, r24
     51e:	91 1c       	adc	r9, r1
     520:	56 01       	movw	r10, r12
     522:	e5 e0       	ldi	r30, 0x05	; 5
     524:	ae 0e       	add	r10, r30
     526:	b1 1c       	adc	r11, r1
     528:	00 e0       	ldi	r16, 0x00	; 0
     52a:	10 e0       	ldi	r17, 0x00	; 0
     52c:	f4 01       	movw	r30, r8
     52e:	61 91       	ld	r22, Z+
     530:	4f 01       	movw	r8, r30
     532:	4a e0       	ldi	r20, 0x0A	; 10
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	c7 01       	movw	r24, r14
     538:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print5printEhi>
     53c:	ec 01       	movw	r28, r24
     53e:	6e e2       	ldi	r22, 0x2E	; 46
     540:	c7 01       	movw	r24, r14
     542:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN5Print5printEc>
     546:	8c 0f       	add	r24, r28
     548:	9d 1f       	adc	r25, r29
     54a:	08 0f       	add	r16, r24
     54c:	19 1f       	adc	r17, r25
     54e:	8a 14       	cp	r8, r10
     550:	9b 04       	cpc	r9, r11
     552:	61 f7       	brne	.-40     	; 0x52c <_ZNK9IPAddress7printToER5Print+0x30>
     554:	4a e0       	ldi	r20, 0x0A	; 10
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	f6 01       	movw	r30, r12
     55a:	65 81       	ldd	r22, Z+5	; 0x05
     55c:	c7 01       	movw	r24, r14
     55e:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN5Print5printEhi>
     562:	80 0f       	add	r24, r16
     564:	91 1f       	adc	r25, r17
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	9f 90       	pop	r9
     57c:	8f 90       	pop	r8
     57e:	08 95       	ret

00000580 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     580:	ed e1       	ldi	r30, 0x1D	; 29
     582:	f4 e0       	ldi	r31, 0x04	; 4
     584:	8b e1       	ldi	r24, 0x1B	; 27
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	91 83       	std	Z+1, r25	; 0x01
     58a:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     58c:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     58e:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     590:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     592:	15 82       	std	Z+5, r1	; 0x05
     594:	08 95       	ret

00000596 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     596:	08 95       	ret

00000598 <main>:

int main(void)
{
	init();
     598:	0e 94 51 05 	call	0xaa2	; 0xaa2 <init>
	initVariant();
     59c:	0e 94 cb 02 	call	0x596	; 0x596 <initVariant>
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
		if (serialEventRun) serialEventRun();
     5a0:	ce ec       	ldi	r28, 0xCE	; 206
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
	USBDevice.attach();
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
     5a4:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <main_ArduinoLockOpener>
		if (serialEventRun) serialEventRun();
     5a8:	20 97       	sbiw	r28, 0x00	; 0
     5aa:	e1 f3       	breq	.-8      	; 0x5a4 <main+0xc>
     5ac:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z14serialEventRunv>
     5b0:	f9 cf       	rjmp	.-14     	; 0x5a4 <main+0xc>

000005b2 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	41 15       	cp	r20, r1
     5c4:	51 05       	cpc	r21, r1
     5c6:	c1 f0       	breq	.+48     	; 0x5f8 <_ZN5Print5writeEPKhj+0x46>
     5c8:	6a 01       	movw	r12, r20
     5ca:	8c 01       	movw	r16, r24
     5cc:	e6 2e       	mov	r14, r22
     5ce:	f7 2e       	mov	r15, r23
     5d0:	c0 e0       	ldi	r28, 0x00	; 0
     5d2:	d0 e0       	ldi	r29, 0x00	; 0
     5d4:	d7 01       	movw	r26, r14
     5d6:	6d 91       	ld	r22, X+
     5d8:	7d 01       	movw	r14, r26
     5da:	d8 01       	movw	r26, r16
     5dc:	ed 91       	ld	r30, X+
     5de:	fc 91       	ld	r31, X
     5e0:	01 90       	ld	r0, Z+
     5e2:	f0 81       	ld	r31, Z
     5e4:	e0 2d       	mov	r30, r0
     5e6:	c8 01       	movw	r24, r16
     5e8:	09 95       	icall
     5ea:	89 2b       	or	r24, r25
     5ec:	39 f0       	breq	.+14     	; 0x5fc <_ZN5Print5writeEPKhj+0x4a>
     5ee:	21 96       	adiw	r28, 0x01	; 1
     5f0:	cc 16       	cp	r12, r28
     5f2:	dd 06       	cpc	r13, r29
     5f4:	79 f7       	brne	.-34     	; 0x5d4 <_ZN5Print5writeEPKhj+0x22>
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <_ZN5Print5writeEPKhj+0x4a>
     5f8:	c0 e0       	ldi	r28, 0x00	; 0
     5fa:	d0 e0       	ldi	r29, 0x00	; 0
     5fc:	ce 01       	movw	r24, r28
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	cf 90       	pop	r12
     60e:	08 95       	ret

00000610 <_ZN5Print5printEPKc>:
     610:	61 15       	cp	r22, r1
     612:	71 05       	cpc	r23, r1
     614:	81 f0       	breq	.+32     	; 0x636 <_ZN5Print5printEPKc+0x26>
     616:	fb 01       	movw	r30, r22
     618:	01 90       	ld	r0, Z+
     61a:	00 20       	and	r0, r0
     61c:	e9 f7       	brne	.-6      	; 0x618 <_ZN5Print5printEPKc+0x8>
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	af 01       	movw	r20, r30
     622:	46 1b       	sub	r20, r22
     624:	57 0b       	sbc	r21, r23
     626:	dc 01       	movw	r26, r24
     628:	ed 91       	ld	r30, X+
     62a:	fc 91       	ld	r31, X
     62c:	02 80       	ldd	r0, Z+2	; 0x02
     62e:	f3 81       	ldd	r31, Z+3	; 0x03
     630:	e0 2d       	mov	r30, r0
     632:	09 95       	icall
     634:	08 95       	ret
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	08 95       	ret

0000063c <_ZN5Print5printEc>:
     63c:	dc 01       	movw	r26, r24
     63e:	ed 91       	ld	r30, X+
     640:	fc 91       	ld	r31, X
     642:	01 90       	ld	r0, Z+
     644:	f0 81       	ld	r31, Z
     646:	e0 2d       	mov	r30, r0
     648:	09 95       	icall
     64a:	08 95       	ret

0000064c <_ZN5Print7printlnEv>:
     64c:	dc 01       	movw	r26, r24
     64e:	ed 91       	ld	r30, X+
     650:	fc 91       	ld	r31, X
     652:	02 80       	ldd	r0, Z+2	; 0x02
     654:	f3 81       	ldd	r31, Z+3	; 0x03
     656:	e0 2d       	mov	r30, r0
     658:	42 e0       	ldi	r20, 0x02	; 2
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	6d e1       	ldi	r22, 0x1D	; 29
     65e:	71 e0       	ldi	r23, 0x01	; 1
     660:	09 95       	icall
     662:	08 95       	ret

00000664 <_ZN5Print7printlnEPKc>:
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	ec 01       	movw	r28, r24
     66e:	0e 94 08 03 	call	0x610	; 0x610 <_ZN5Print5printEPKc>
     672:	8c 01       	movw	r16, r24
     674:	ce 01       	movw	r24, r28
     676:	0e 94 26 03 	call	0x64c	; 0x64c <_ZN5Print7printlnEv>
     67a:	80 0f       	add	r24, r16
     67c:	91 1f       	adc	r25, r17
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	08 95       	ret

00000688 <_ZN5Print11printNumberEmh>:
     688:	8f 92       	push	r8
     68a:	9f 92       	push	r9
     68c:	af 92       	push	r10
     68e:	bf 92       	push	r11
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	a1 97       	sbiw	r28, 0x21	; 33
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	7c 01       	movw	r14, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	ba 01       	movw	r22, r20
     6b2:	19 a2       	std	Y+33, r1	; 0x21
     6b4:	22 30       	cpi	r18, 0x02	; 2
     6b6:	08 f4       	brcc	.+2      	; 0x6ba <_ZN5Print11printNumberEmh+0x32>
     6b8:	2a e0       	ldi	r18, 0x0A	; 10
     6ba:	8e 01       	movw	r16, r28
     6bc:	0f 5d       	subi	r16, 0xDF	; 223
     6be:	1f 4f       	sbci	r17, 0xFF	; 255
     6c0:	82 2e       	mov	r8, r18
     6c2:	91 2c       	mov	r9, r1
     6c4:	a1 2c       	mov	r10, r1
     6c6:	b1 2c       	mov	r11, r1
     6c8:	a5 01       	movw	r20, r10
     6ca:	94 01       	movw	r18, r8
     6cc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__udivmodsi4>
     6d0:	e6 2f       	mov	r30, r22
     6d2:	62 2f       	mov	r22, r18
     6d4:	73 2f       	mov	r23, r19
     6d6:	84 2f       	mov	r24, r20
     6d8:	95 2f       	mov	r25, r21
     6da:	01 50       	subi	r16, 0x01	; 1
     6dc:	11 09       	sbc	r17, r1
     6de:	ea 30       	cpi	r30, 0x0A	; 10
     6e0:	10 f4       	brcc	.+4      	; 0x6e6 <_ZN5Print11printNumberEmh+0x5e>
     6e2:	e0 5d       	subi	r30, 0xD0	; 208
     6e4:	01 c0       	rjmp	.+2      	; 0x6e8 <_ZN5Print11printNumberEmh+0x60>
     6e6:	e9 5c       	subi	r30, 0xC9	; 201
     6e8:	d8 01       	movw	r26, r16
     6ea:	ec 93       	st	X, r30
     6ec:	61 15       	cp	r22, r1
     6ee:	71 05       	cpc	r23, r1
     6f0:	81 05       	cpc	r24, r1
     6f2:	91 05       	cpc	r25, r1
     6f4:	49 f7       	brne	.-46     	; 0x6c8 <_ZN5Print11printNumberEmh+0x40>
     6f6:	01 15       	cp	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	91 f0       	breq	.+36     	; 0x720 <_ZN5Print11printNumberEmh+0x98>
     6fc:	f8 01       	movw	r30, r16
     6fe:	01 90       	ld	r0, Z+
     700:	00 20       	and	r0, r0
     702:	e9 f7       	brne	.-6      	; 0x6fe <_ZN5Print11printNumberEmh+0x76>
     704:	31 97       	sbiw	r30, 0x01	; 1
     706:	af 01       	movw	r20, r30
     708:	40 1b       	sub	r20, r16
     70a:	51 0b       	sbc	r21, r17
     70c:	d7 01       	movw	r26, r14
     70e:	ed 91       	ld	r30, X+
     710:	fc 91       	ld	r31, X
     712:	02 80       	ldd	r0, Z+2	; 0x02
     714:	f3 81       	ldd	r31, Z+3	; 0x03
     716:	e0 2d       	mov	r30, r0
     718:	b8 01       	movw	r22, r16
     71a:	c7 01       	movw	r24, r14
     71c:	09 95       	icall
     71e:	02 c0       	rjmp	.+4      	; 0x724 <_ZN5Print11printNumberEmh+0x9c>
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	a1 96       	adiw	r28, 0x21	; 33
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	cd bf       	out	0x3d, r28	; 61
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	9f 90       	pop	r9
     742:	8f 90       	pop	r8
     744:	08 95       	ret

00000746 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     746:	21 15       	cp	r18, r1
     748:	31 05       	cpc	r19, r1
     74a:	49 f4       	brne	.+18     	; 0x75e <_ZN5Print5printEmi+0x18>
     74c:	dc 01       	movw	r26, r24
     74e:	ed 91       	ld	r30, X+
     750:	fc 91       	ld	r31, X
     752:	01 90       	ld	r0, Z+
     754:	f0 81       	ld	r31, Z
     756:	e0 2d       	mov	r30, r0
     758:	64 2f       	mov	r22, r20
     75a:	09 95       	icall
     75c:	08 95       	ret
  else return printNumber(n, base);
     75e:	0e 94 44 03 	call	0x688	; 0x688 <_ZN5Print11printNumberEmh>
}
     762:	08 95       	ret

00000764 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     764:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     766:	46 2f       	mov	r20, r22
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	0e 94 a3 03 	call	0x746	; 0x746 <_ZN5Print5printEmi>
}
     772:	08 95       	ret

00000774 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     774:	81 30       	cpi	r24, 0x01	; 1
     776:	39 f0       	breq	.+14     	; 0x786 <_Z12disableTimerh+0x12>
     778:	18 f0       	brcs	.+6      	; 0x780 <_Z12disableTimerh+0xc>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	51 f0       	breq	.+20     	; 0x792 <_Z12disableTimerh+0x1e>
     77e:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     780:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     784:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     786:	ef e6       	ldi	r30, 0x6F	; 111
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	8d 7f       	andi	r24, 0xFD	; 253
     78e:	80 83       	st	Z, r24
      break;
     790:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     792:	e0 e7       	ldi	r30, 0x70	; 112
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	8d 7f       	andi	r24, 0xFD	; 253
     79a:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     7a2:	e1 eb       	ldi	r30, 0xB1	; 177
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	88 7f       	andi	r24, 0xF8	; 248
     7aa:	84 60       	ori	r24, 0x04	; 4
     7ac:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     7ae:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     7b2:	08 95       	ret

000007b4 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7b4:	cf 93       	push	r28
     7b6:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7bc:	c8 13       	cpse	r28, r24
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7c0:	e8 e6       	ldi	r30, 0x68	; 104
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     7c6:	9f ef       	ldi	r25, 0xFF	; 255
     7c8:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
      break;
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
     7d0:	0e 94 ba 03 	call	0x774	; 0x774 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7d4:	60 e0       	ldi	r22, 0x00	; 0
     7d6:	8c 2f       	mov	r24, r28
     7d8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <digitalWrite>
}
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7e0:	1f 92       	push	r1
     7e2:	0f 92       	push	r0
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	0f 92       	push	r0
     7e8:	11 24       	eor	r1, r1
     7ea:	2f 93       	push	r18
     7ec:	3f 93       	push	r19
     7ee:	4f 93       	push	r20
     7f0:	5f 93       	push	r21
     7f2:	6f 93       	push	r22
     7f4:	7f 93       	push	r23
     7f6:	8f 93       	push	r24
     7f8:	9f 93       	push	r25
     7fa:	af 93       	push	r26
     7fc:	bf 93       	push	r27
     7fe:	ef 93       	push	r30
     800:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     802:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <timer2_toggle_count>
     806:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <timer2_toggle_count+0x1>
     80a:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <timer2_toggle_count+0x2>
     80e:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <timer2_toggle_count+0x3>
     812:	89 2b       	or	r24, r25
     814:	8a 2b       	or	r24, r26
     816:	8b 2b       	or	r24, r27
     818:	51 f1       	breq	.+84     	; 0x86e <__DATA_REGION_LENGTH__+0x6e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     81a:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <timer2_pin_mask>
     81e:	e0 91 24 04 	lds	r30, 0x0424	; 0x800424 <timer2_pin_port>
     822:	f0 91 25 04 	lds	r31, 0x0425	; 0x800425 <timer2_pin_port+0x1>
     826:	80 81       	ld	r24, Z
     828:	89 27       	eor	r24, r25
     82a:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     82c:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <timer2_toggle_count>
     830:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <timer2_toggle_count+0x1>
     834:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <timer2_toggle_count+0x2>
     838:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <timer2_toggle_count+0x3>
     83c:	18 16       	cp	r1, r24
     83e:	19 06       	cpc	r1, r25
     840:	1a 06       	cpc	r1, r26
     842:	1b 06       	cpc	r1, r27
     844:	c4 f4       	brge	.+48     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
      timer2_toggle_count--;
     846:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <timer2_toggle_count>
     84a:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <timer2_toggle_count+0x1>
     84e:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <timer2_toggle_count+0x2>
     852:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <timer2_toggle_count+0x3>
     856:	01 97       	sbiw	r24, 0x01	; 1
     858:	a1 09       	sbc	r26, r1
     85a:	b1 09       	sbc	r27, r1
     85c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <timer2_toggle_count>
     860:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <timer2_toggle_count+0x1>
     864:	a0 93 28 04 	sts	0x0428, r26	; 0x800428 <timer2_toggle_count+0x2>
     868:	b0 93 29 04 	sts	0x0429, r27	; 0x800429 <timer2_toggle_count+0x3>
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__DATA_REGION_LENGTH__+0x76>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     86e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     872:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     898:	08 95       	ret

0000089a <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     89a:	1f 92       	push	r1
     89c:	0f 92       	push	r0
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	2f 93       	push	r18
     8a6:	3f 93       	push	r19
     8a8:	4f 93       	push	r20
     8aa:	5f 93       	push	r21
     8ac:	6f 93       	push	r22
     8ae:	7f 93       	push	r23
     8b0:	8f 93       	push	r24
     8b2:	9f 93       	push	r25
     8b4:	af 93       	push	r26
     8b6:	bf 93       	push	r27
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31
     8bc:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <intFunc>
     8c0:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <intFunc+0x1>
     8c4:	09 95       	icall
     8c6:	ff 91       	pop	r31
     8c8:	ef 91       	pop	r30
     8ca:	bf 91       	pop	r27
     8cc:	af 91       	pop	r26
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	7f 91       	pop	r23
     8d4:	6f 91       	pop	r22
     8d6:	5f 91       	pop	r21
     8d8:	4f 91       	pop	r20
     8da:	3f 91       	pop	r19
     8dc:	2f 91       	pop	r18
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f 90       	pop	r0
     8e4:	1f 90       	pop	r1
     8e6:	18 95       	reti

000008e8 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     8e8:	1f 92       	push	r1
     8ea:	0f 92       	push	r0
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	0f 92       	push	r0
     8f0:	11 24       	eor	r1, r1
     8f2:	2f 93       	push	r18
     8f4:	3f 93       	push	r19
     8f6:	4f 93       	push	r20
     8f8:	5f 93       	push	r21
     8fa:	6f 93       	push	r22
     8fc:	7f 93       	push	r23
     8fe:	8f 93       	push	r24
     900:	9f 93       	push	r25
     902:	af 93       	push	r26
     904:	bf 93       	push	r27
     906:	ef 93       	push	r30
     908:	ff 93       	push	r31
     90a:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <intFunc+0x2>
     90e:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <intFunc+0x3>
     912:	09 95       	icall
     914:	ff 91       	pop	r31
     916:	ef 91       	pop	r30
     918:	bf 91       	pop	r27
     91a:	af 91       	pop	r26
     91c:	9f 91       	pop	r25
     91e:	8f 91       	pop	r24
     920:	7f 91       	pop	r23
     922:	6f 91       	pop	r22
     924:	5f 91       	pop	r21
     926:	4f 91       	pop	r20
     928:	3f 91       	pop	r19
     92a:	2f 91       	pop	r18
     92c:	0f 90       	pop	r0
     92e:	0f be       	out	0x3f, r0	; 63
     930:	0f 90       	pop	r0
     932:	1f 90       	pop	r1
     934:	18 95       	reti

00000936 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     936:	1f 92       	push	r1
     938:	0f 92       	push	r0
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	0f 92       	push	r0
     93e:	11 24       	eor	r1, r1
     940:	2f 93       	push	r18
     942:	3f 93       	push	r19
     944:	8f 93       	push	r24
     946:	9f 93       	push	r25
     948:	af 93       	push	r26
     94a:	bf 93       	push	r27
     94c:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <timer0_millis>
     950:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <timer0_millis+0x1>
     954:	a0 91 2d 04 	lds	r26, 0x042D	; 0x80042d <timer0_millis+0x2>
     958:	b0 91 2e 04 	lds	r27, 0x042E	; 0x80042e <timer0_millis+0x3>
     95c:	30 91 2a 04 	lds	r19, 0x042A	; 0x80042a <timer0_fract>
     960:	23 e0       	ldi	r18, 0x03	; 3
     962:	23 0f       	add	r18, r19
     964:	2d 37       	cpi	r18, 0x7D	; 125
     966:	20 f4       	brcc	.+8      	; 0x970 <__vector_16+0x3a>
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	a1 1d       	adc	r26, r1
     96c:	b1 1d       	adc	r27, r1
     96e:	05 c0       	rjmp	.+10     	; 0x97a <__vector_16+0x44>
     970:	26 e8       	ldi	r18, 0x86	; 134
     972:	23 0f       	add	r18, r19
     974:	02 96       	adiw	r24, 0x02	; 2
     976:	a1 1d       	adc	r26, r1
     978:	b1 1d       	adc	r27, r1
     97a:	20 93 2a 04 	sts	0x042A, r18	; 0x80042a <timer0_fract>
     97e:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <timer0_millis>
     982:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <timer0_millis+0x1>
     986:	a0 93 2d 04 	sts	0x042D, r26	; 0x80042d <timer0_millis+0x2>
     98a:	b0 93 2e 04 	sts	0x042E, r27	; 0x80042e <timer0_millis+0x3>
     98e:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <timer0_overflow_count>
     992:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <timer0_overflow_count+0x1>
     996:	a0 91 31 04 	lds	r26, 0x0431	; 0x800431 <timer0_overflow_count+0x2>
     99a:	b0 91 32 04 	lds	r27, 0x0432	; 0x800432 <timer0_overflow_count+0x3>
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	a1 1d       	adc	r26, r1
     9a2:	b1 1d       	adc	r27, r1
     9a4:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <timer0_overflow_count>
     9a8:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <timer0_overflow_count+0x1>
     9ac:	a0 93 31 04 	sts	0x0431, r26	; 0x800431 <timer0_overflow_count+0x2>
     9b0:	b0 93 32 04 	sts	0x0432, r27	; 0x800432 <timer0_overflow_count+0x3>
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	3f 91       	pop	r19
     9be:	2f 91       	pop	r18
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti

000009ca <micros>:
     9ca:	3f b7       	in	r19, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <timer0_overflow_count>
     9d2:	90 91 30 04 	lds	r25, 0x0430	; 0x800430 <timer0_overflow_count+0x1>
     9d6:	a0 91 31 04 	lds	r26, 0x0431	; 0x800431 <timer0_overflow_count+0x2>
     9da:	b0 91 32 04 	lds	r27, 0x0432	; 0x800432 <timer0_overflow_count+0x3>
     9de:	26 b5       	in	r18, 0x26	; 38
     9e0:	a8 9b       	sbis	0x15, 0	; 21
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <micros+0x24>
     9e4:	2f 3f       	cpi	r18, 0xFF	; 255
     9e6:	19 f0       	breq	.+6      	; 0x9ee <micros+0x24>
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	a1 1d       	adc	r26, r1
     9ec:	b1 1d       	adc	r27, r1
     9ee:	3f bf       	out	0x3f, r19	; 63
     9f0:	ba 2f       	mov	r27, r26
     9f2:	a9 2f       	mov	r26, r25
     9f4:	98 2f       	mov	r25, r24
     9f6:	88 27       	eor	r24, r24
     9f8:	82 0f       	add	r24, r18
     9fa:	91 1d       	adc	r25, r1
     9fc:	a1 1d       	adc	r26, r1
     9fe:	b1 1d       	adc	r27, r1
     a00:	bc 01       	movw	r22, r24
     a02:	cd 01       	movw	r24, r26
     a04:	66 0f       	add	r22, r22
     a06:	77 1f       	adc	r23, r23
     a08:	88 1f       	adc	r24, r24
     a0a:	99 1f       	adc	r25, r25
     a0c:	66 0f       	add	r22, r22
     a0e:	77 1f       	adc	r23, r23
     a10:	88 1f       	adc	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	08 95       	ret

00000a16 <delay>:
     a16:	8f 92       	push	r8
     a18:	9f 92       	push	r9
     a1a:	af 92       	push	r10
     a1c:	bf 92       	push	r11
     a1e:	cf 92       	push	r12
     a20:	df 92       	push	r13
     a22:	ef 92       	push	r14
     a24:	ff 92       	push	r15
     a26:	6b 01       	movw	r12, r22
     a28:	7c 01       	movw	r14, r24
     a2a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <micros>
     a2e:	4b 01       	movw	r8, r22
     a30:	5c 01       	movw	r10, r24
     a32:	c1 14       	cp	r12, r1
     a34:	d1 04       	cpc	r13, r1
     a36:	e1 04       	cpc	r14, r1
     a38:	f1 04       	cpc	r15, r1
     a3a:	39 f5       	brne	.+78     	; 0xa8a <delay+0x74>
     a3c:	29 c0       	rjmp	.+82     	; 0xa90 <delay+0x7a>
     a3e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <yield>
     a42:	10 c0       	rjmp	.+32     	; 0xa64 <delay+0x4e>
     a44:	21 e0       	ldi	r18, 0x01	; 1
     a46:	c2 1a       	sub	r12, r18
     a48:	d1 08       	sbc	r13, r1
     a4a:	e1 08       	sbc	r14, r1
     a4c:	f1 08       	sbc	r15, r1
     a4e:	88 ee       	ldi	r24, 0xE8	; 232
     a50:	88 0e       	add	r8, r24
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	98 1e       	adc	r9, r24
     a56:	a1 1c       	adc	r10, r1
     a58:	b1 1c       	adc	r11, r1
     a5a:	c1 14       	cp	r12, r1
     a5c:	d1 04       	cpc	r13, r1
     a5e:	e1 04       	cpc	r14, r1
     a60:	f1 04       	cpc	r15, r1
     a62:	b1 f0       	breq	.+44     	; 0xa90 <delay+0x7a>
     a64:	0e 94 e5 04 	call	0x9ca	; 0x9ca <micros>
     a68:	dc 01       	movw	r26, r24
     a6a:	cb 01       	movw	r24, r22
     a6c:	88 19       	sub	r24, r8
     a6e:	99 09       	sbc	r25, r9
     a70:	aa 09       	sbc	r26, r10
     a72:	bb 09       	sbc	r27, r11
     a74:	88 3e       	cpi	r24, 0xE8	; 232
     a76:	93 40       	sbci	r25, 0x03	; 3
     a78:	a1 05       	cpc	r26, r1
     a7a:	b1 05       	cpc	r27, r1
     a7c:	18 f7       	brcc	.-58     	; 0xa44 <delay+0x2e>
     a7e:	c1 14       	cp	r12, r1
     a80:	d1 04       	cpc	r13, r1
     a82:	e1 04       	cpc	r14, r1
     a84:	f1 04       	cpc	r15, r1
     a86:	d9 f6       	brne	.-74     	; 0xa3e <delay+0x28>
     a88:	03 c0       	rjmp	.+6      	; 0xa90 <delay+0x7a>
     a8a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <yield>
     a8e:	ea cf       	rjmp	.-44     	; 0xa64 <delay+0x4e>
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	bf 90       	pop	r11
     a9a:	af 90       	pop	r10
     a9c:	9f 90       	pop	r9
     a9e:	8f 90       	pop	r8
     aa0:	08 95       	ret

00000aa2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     aa2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     aa4:	84 b5       	in	r24, 0x24	; 36
     aa6:	82 60       	ori	r24, 0x02	; 2
     aa8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     aaa:	84 b5       	in	r24, 0x24	; 36
     aac:	81 60       	ori	r24, 0x01	; 1
     aae:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ab0:	85 b5       	in	r24, 0x25	; 37
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     ab6:	85 b5       	in	r24, 0x25	; 37
     ab8:	81 60       	ori	r24, 0x01	; 1
     aba:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     abc:	ee e6       	ldi	r30, 0x6E	; 110
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	81 60       	ori	r24, 0x01	; 1
     ac4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ac6:	e1 e8       	ldi	r30, 0x81	; 129
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     acc:	80 81       	ld	r24, Z
     ace:	82 60       	ori	r24, 0x02	; 2
     ad0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ad2:	80 81       	ld	r24, Z
     ad4:	81 60       	ori	r24, 0x01	; 1
     ad6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ad8:	e0 e8       	ldi	r30, 0x80	; 128
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	81 60       	ori	r24, 0x01	; 1
     ae0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ae2:	e1 eb       	ldi	r30, 0xB1	; 177
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	80 81       	ld	r24, Z
     ae8:	84 60       	ori	r24, 0x04	; 4
     aea:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     aec:	e0 eb       	ldi	r30, 0xB0	; 176
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	80 81       	ld	r24, Z
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     af6:	ea e7       	ldi	r30, 0x7A	; 122
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	80 81       	ld	r24, Z
     afc:	84 60       	ori	r24, 0x04	; 4
     afe:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     b00:	80 81       	ld	r24, Z
     b02:	82 60       	ori	r24, 0x02	; 2
     b04:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     b06:	80 81       	ld	r24, Z
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b0c:	80 81       	ld	r24, Z
     b0e:	80 68       	ori	r24, 0x80	; 128
     b10:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b12:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     b16:	08 95       	ret

00000b18 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b18:	83 30       	cpi	r24, 0x03	; 3
     b1a:	69 f0       	breq	.+26     	; 0xb36 <turnOffPWM+0x1e>
     b1c:	28 f4       	brcc	.+10     	; 0xb28 <turnOffPWM+0x10>
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	b1 f0       	breq	.+44     	; 0xb4e <turnOffPWM+0x36>
     b22:	82 30       	cpi	r24, 0x02	; 2
     b24:	c1 f0       	breq	.+48     	; 0xb56 <turnOffPWM+0x3e>
     b26:	08 95       	ret
     b28:	87 30       	cpi	r24, 0x07	; 7
     b2a:	c9 f0       	breq	.+50     	; 0xb5e <turnOffPWM+0x46>
     b2c:	88 30       	cpi	r24, 0x08	; 8
     b2e:	e9 f0       	breq	.+58     	; 0xb6a <turnOffPWM+0x52>
     b30:	84 30       	cpi	r24, 0x04	; 4
     b32:	01 f5       	brne	.+64     	; 0xb74 <turnOffPWM+0x5c>
     b34:	06 c0       	rjmp	.+12     	; 0xb42 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b36:	e0 e8       	ldi	r30, 0x80	; 128
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	80 81       	ld	r24, Z
     b3c:	8f 77       	andi	r24, 0x7F	; 127
     b3e:	80 83       	st	Z, r24
     b40:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b42:	e0 e8       	ldi	r30, 0x80	; 128
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8f 7d       	andi	r24, 0xDF	; 223
     b4a:	80 83       	st	Z, r24
     b4c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b4e:	84 b5       	in	r24, 0x24	; 36
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	84 bd       	out	0x24, r24	; 36
     b54:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b56:	84 b5       	in	r24, 0x24	; 36
     b58:	8f 7d       	andi	r24, 0xDF	; 223
     b5a:	84 bd       	out	0x24, r24	; 36
     b5c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b5e:	e0 eb       	ldi	r30, 0xB0	; 176
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	80 83       	st	Z, r24
     b68:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b6a:	e0 eb       	ldi	r30, 0xB0	; 176
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	8f 7d       	andi	r24, 0xDF	; 223
     b72:	80 83       	st	Z, r24
     b74:	08 95       	ret

00000b76 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	fc 01       	movw	r30, r24
     b7e:	e3 58       	subi	r30, 0x83	; 131
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b84:	fc 01       	movw	r30, r24
     b86:	ef 56       	subi	r30, 0x6F	; 111
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b8c:	88 23       	and	r24, r24
     b8e:	79 f1       	breq	.+94     	; 0xbee <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	fc 01       	movw	r30, r24
     b98:	e7 54       	subi	r30, 0x47	; 71
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	a5 91       	lpm	r26, Z+
     b9e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     ba0:	fc 01       	movw	r30, r24
     ba2:	e1 55       	subi	r30, 0x51	; 81
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
     ba6:	c5 91       	lpm	r28, Z+
     ba8:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     baa:	61 11       	cpse	r22, r1
     bac:	0c c0       	rjmp	.+24     	; 0xbc6 <pinMode+0x50>
		uint8_t oldSREG = SREG;
     bae:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bb0:	f8 94       	cli
		*reg &= ~bit;
     bb2:	8c 91       	ld	r24, X
     bb4:	e2 2f       	mov	r30, r18
     bb6:	e0 95       	com	r30
     bb8:	8e 23       	and	r24, r30
     bba:	8c 93       	st	X, r24
		*out &= ~bit;
     bbc:	28 81       	ld	r18, Y
     bbe:	e2 23       	and	r30, r18
     bc0:	e8 83       	st	Y, r30
		SREG = oldSREG;
     bc2:	9f bf       	out	0x3f, r25	; 63
     bc4:	14 c0       	rjmp	.+40     	; 0xbee <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     bc6:	62 30       	cpi	r22, 0x02	; 2
     bc8:	61 f4       	brne	.+24     	; 0xbe2 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     bca:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bcc:	f8 94       	cli
		*reg &= ~bit;
     bce:	8c 91       	ld	r24, X
     bd0:	32 2f       	mov	r19, r18
     bd2:	30 95       	com	r19
     bd4:	83 23       	and	r24, r19
     bd6:	8c 93       	st	X, r24
		*out |= bit;
     bd8:	e8 81       	ld	r30, Y
     bda:	e2 2b       	or	r30, r18
     bdc:	e8 83       	st	Y, r30
		SREG = oldSREG;
     bde:	9f bf       	out	0x3f, r25	; 63
     be0:	06 c0       	rjmp	.+12     	; 0xbee <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     be2:	8f b7       	in	r24, 0x3f	; 63
                cli();
     be4:	f8 94       	cli
		*reg |= bit;
     be6:	ec 91       	ld	r30, X
     be8:	e2 2b       	or	r30, r18
     bea:	ec 93       	st	X, r30
		SREG = oldSREG;
     bec:	8f bf       	out	0x3f, r24	; 63
	}
}
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	f9 01       	movw	r30, r18
     c00:	e7 59       	subi	r30, 0x97	; 151
     c02:	ff 4f       	sbci	r31, 0xFF	; 255
     c04:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c06:	f9 01       	movw	r30, r18
     c08:	e3 58       	subi	r30, 0x83	; 131
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     c0e:	f9 01       	movw	r30, r18
     c10:	ef 56       	subi	r30, 0x6F	; 111
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c16:	cc 23       	and	r28, r28
     c18:	d1 f0       	breq	.+52     	; 0xc4e <digitalWrite+0x5a>
     c1a:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c1c:	81 11       	cpse	r24, r1
     c1e:	0e 94 8c 05 	call	0xb18	; 0xb18 <turnOffPWM>

	out = portOutputRegister(port);
     c22:	ec 2f       	mov	r30, r28
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e1 55       	subi	r30, 0x51	; 81
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	a5 91       	lpm	r26, Z+
     c30:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c32:	8f b7       	in	r24, 0x3f	; 63
	cli();
     c34:	f8 94       	cli

	if (val == LOW) {
     c36:	d1 11       	cpse	r29, r1
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <digitalWrite+0x52>
		*out &= ~bit;
     c3a:	9c 91       	ld	r25, X
     c3c:	e1 2f       	mov	r30, r17
     c3e:	e0 95       	com	r30
     c40:	e9 23       	and	r30, r25
     c42:	ec 93       	st	X, r30
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <digitalWrite+0x58>
	} else {
		*out |= bit;
     c46:	ec 91       	ld	r30, X
     c48:	e1 2b       	or	r30, r17
     c4a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     c4c:	8f bf       	out	0x3f, r24	; 63
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	08 95       	ret

00000c56 <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     c56:	20 91 35 05 	lds	r18, 0x0535	; 0x800535 <_ZN14SoftwareSerial13active_objectE>
     c5a:	30 91 36 05 	lds	r19, 0x0536	; 0x800536 <_ZN14SoftwareSerial13active_objectE+0x1>
     c5e:	28 17       	cp	r18, r24
     c60:	39 07       	cpc	r19, r25
     c62:	99 f4       	brne	.+38     	; 0xc8a <_ZN14SoftwareSerial4readEv+0x34>
     c64:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <_ZN14SoftwareSerial20_receive_buffer_headE>
     c68:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     c6c:	98 17       	cp	r25, r24
     c6e:	81 f0       	breq	.+32     	; 0xc90 <_ZN14SoftwareSerial4readEv+0x3a>
     c70:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <_ZN14SoftwareSerial20_receive_buffer_headE>
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	eb 5c       	subi	r30, 0xCB	; 203
     c78:	fb 4f       	sbci	r31, 0xFB	; 251
     c7a:	80 81       	ld	r24, Z
     c7c:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <_ZN14SoftwareSerial20_receive_buffer_headE>
     c80:	2f 5f       	subi	r18, 0xFF	; 255
     c82:	20 93 33 04 	sts	0x0433, r18	; 0x800433 <_ZN14SoftwareSerial20_receive_buffer_headE>
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	08 95       	ret
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	9f ef       	ldi	r25, 0xFF	; 255
     c8e:	08 95       	ret
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	9f ef       	ldi	r25, 0xFF	; 255
     c94:	08 95       	ret

00000c96 <_ZN14SoftwareSerial9availableEv>:
     c96:	20 91 35 05 	lds	r18, 0x0535	; 0x800535 <_ZN14SoftwareSerial13active_objectE>
     c9a:	30 91 36 05 	lds	r19, 0x0536	; 0x800536 <_ZN14SoftwareSerial13active_objectE+0x1>
     c9e:	28 17       	cp	r18, r24
     ca0:	39 07       	cpc	r19, r25
     ca2:	99 f4       	brne	.+38     	; 0xcca <_ZN14SoftwareSerial9availableEv+0x34>
     ca4:	20 91 34 04 	lds	r18, 0x0434	; 0x800434 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     ca8:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <_ZN14SoftwareSerial20_receive_buffer_headE>
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	33 95       	inc	r19
     cb0:	28 1b       	sub	r18, r24
     cb2:	31 09       	sbc	r19, r1
     cb4:	30 78       	andi	r19, 0x80	; 128
     cb6:	33 23       	and	r19, r19
     cb8:	2c f4       	brge	.+10     	; 0xcc4 <_ZN14SoftwareSerial9availableEv+0x2e>
     cba:	21 50       	subi	r18, 0x01	; 1
     cbc:	31 09       	sbc	r19, r1
     cbe:	3f 6f       	ori	r19, 0xFF	; 255
     cc0:	2f 5f       	subi	r18, 0xFF	; 255
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	82 2f       	mov	r24, r18
     cc6:	93 2f       	mov	r25, r19
     cc8:	08 95       	ret
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	08 95       	ret

00000cd0 <_ZN14SoftwareSerial5writeEh>:
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	ec 01       	movw	r28, r24
     cd8:	4c 8d       	ldd	r20, Y+28	; 0x1c
     cda:	5d 8d       	ldd	r21, Y+29	; 0x1d
     cdc:	41 15       	cp	r20, r1
     cde:	51 05       	cpc	r21, r1
     ce0:	29 f4       	brne	.+10     	; 0xcec <_ZN14SoftwareSerial5writeEh+0x1c>
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9b 83       	std	Y+3, r25	; 0x03
     ce8:	8a 83       	std	Y+2, r24	; 0x02
     cea:	38 c0       	rjmp	.+112    	; 0xd5c <_ZN14SoftwareSerial5writeEh+0x8c>
     cec:	a9 89       	ldd	r26, Y+17	; 0x11
     cee:	ba 89       	ldd	r27, Y+18	; 0x12
     cf0:	88 89       	ldd	r24, Y+16	; 0x10
     cf2:	38 2f       	mov	r19, r24
     cf4:	30 95       	com	r19
     cf6:	1f b7       	in	r17, 0x3f	; 63
     cf8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cfa:	79 2f       	mov	r23, r25
     cfc:	72 70       	andi	r23, 0x02	; 2
     cfe:	91 fd       	sbrc	r25, 1
     d00:	60 95       	com	r22
     d02:	f8 94       	cli
     d04:	77 23       	and	r23, r23
     d06:	21 f0       	breq	.+8      	; 0xd10 <_ZN14SoftwareSerial5writeEh+0x40>
     d08:	9c 91       	ld	r25, X
     d0a:	98 2b       	or	r25, r24
     d0c:	9c 93       	st	X, r25
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <_ZN14SoftwareSerial5writeEh+0x46>
     d10:	9c 91       	ld	r25, X
     d12:	93 23       	and	r25, r19
     d14:	9c 93       	st	X, r25
     d16:	fa 01       	movw	r30, r20
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <_ZN14SoftwareSerial5writeEh+0x48>
     d1c:	98 e0       	ldi	r25, 0x08	; 8
     d1e:	60 ff       	sbrs	r22, 0
     d20:	04 c0       	rjmp	.+8      	; 0xd2a <_ZN14SoftwareSerial5writeEh+0x5a>
     d22:	2c 91       	ld	r18, X
     d24:	28 2b       	or	r18, r24
     d26:	2c 93       	st	X, r18
     d28:	03 c0       	rjmp	.+6      	; 0xd30 <_ZN14SoftwareSerial5writeEh+0x60>
     d2a:	2c 91       	ld	r18, X
     d2c:	23 23       	and	r18, r19
     d2e:	2c 93       	st	X, r18
     d30:	fa 01       	movw	r30, r20
     d32:	31 97       	sbiw	r30, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <_ZN14SoftwareSerial5writeEh+0x62>
     d36:	66 95       	lsr	r22
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	89 f7       	brne	.-30     	; 0xd1e <_ZN14SoftwareSerial5writeEh+0x4e>
     d3c:	77 23       	and	r23, r23
     d3e:	21 f0       	breq	.+8      	; 0xd48 <_ZN14SoftwareSerial5writeEh+0x78>
     d40:	8c 91       	ld	r24, X
     d42:	38 23       	and	r19, r24
     d44:	3c 93       	st	X, r19
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <_ZN14SoftwareSerial5writeEh+0x7e>
     d48:	9c 91       	ld	r25, X
     d4a:	89 2b       	or	r24, r25
     d4c:	8c 93       	st	X, r24
     d4e:	1f bf       	out	0x3f, r17	; 63
     d50:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d52:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <_ZN14SoftwareSerial5writeEh+0x84>
     d58:	41 e0       	ldi	r20, 0x01	; 1
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	ca 01       	movw	r24, r20
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	08 95       	ret

00000d66 <_ZN14SoftwareSerial5flushEv>:
     d66:	08 95       	ret

00000d68 <_ZN14SoftwareSerial4peekEv>:
     d68:	20 91 35 05 	lds	r18, 0x0535	; 0x800535 <_ZN14SoftwareSerial13active_objectE>
     d6c:	30 91 36 05 	lds	r19, 0x0536	; 0x800536 <_ZN14SoftwareSerial13active_objectE+0x1>
     d70:	28 17       	cp	r18, r24
     d72:	39 07       	cpc	r19, r25
     d74:	71 f4       	brne	.+28     	; 0xd92 <_ZN14SoftwareSerial4peekEv+0x2a>
     d76:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <_ZN14SoftwareSerial20_receive_buffer_headE>
     d7a:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d7e:	98 17       	cp	r25, r24
     d80:	59 f0       	breq	.+22     	; 0xd98 <_ZN14SoftwareSerial4peekEv+0x30>
     d82:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <_ZN14SoftwareSerial20_receive_buffer_headE>
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	eb 5c       	subi	r30, 0xCB	; 203
     d8a:	fb 4f       	sbci	r31, 0xFB	; 251
     d8c:	80 81       	ld	r24, Z
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	08 95       	ret
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	9f ef       	ldi	r25, 0xFF	; 255
     d96:	08 95       	ret
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
     d9c:	08 95       	ret

00000d9e <_ZN14SoftwareSerial13stopListeningEv>:
     d9e:	e0 91 35 05 	lds	r30, 0x0535	; 0x800535 <_ZN14SoftwareSerial13active_objectE>
     da2:	f0 91 36 05 	lds	r31, 0x0536	; 0x800536 <_ZN14SoftwareSerial13active_objectE+0x1>
     da6:	e8 17       	cp	r30, r24
     da8:	f9 07       	cpc	r31, r25
     daa:	69 f4       	brne	.+26     	; 0xdc6 <_ZN14SoftwareSerial13stopListeningEv+0x28>
     dac:	a3 89       	ldd	r26, Z+19	; 0x13
     dae:	b4 89       	ldd	r27, Z+20	; 0x14
     db0:	9c 91       	ld	r25, X
     db2:	85 89       	ldd	r24, Z+21	; 0x15
     db4:	80 95       	com	r24
     db6:	89 23       	and	r24, r25
     db8:	8c 93       	st	X, r24
     dba:	10 92 36 05 	sts	0x0536, r1	; 0x800536 <_ZN14SoftwareSerial13active_objectE+0x1>
     dbe:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <_ZN14SoftwareSerial13active_objectE>
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	08 95       	ret
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	08 95       	ret

00000dca <_ZN14SoftwareSerial6listenEv>:
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	ec 01       	movw	r28, r24
     dd0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dd2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     dd4:	89 2b       	or	r24, r25
     dd6:	f1 f0       	breq	.+60     	; 0xe14 <_ZN14SoftwareSerial6listenEv+0x4a>
     dd8:	80 91 35 05 	lds	r24, 0x0535	; 0x800535 <_ZN14SoftwareSerial13active_objectE>
     ddc:	90 91 36 05 	lds	r25, 0x0536	; 0x800536 <_ZN14SoftwareSerial13active_objectE+0x1>
     de0:	c8 17       	cp	r28, r24
     de2:	d9 07       	cpc	r29, r25
     de4:	c9 f0       	breq	.+50     	; 0xe18 <_ZN14SoftwareSerial6listenEv+0x4e>
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	11 f0       	breq	.+4      	; 0xdee <_ZN14SoftwareSerial6listenEv+0x24>
     dea:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN14SoftwareSerial13stopListeningEv>
     dee:	8e 8d       	ldd	r24, Y+30	; 0x1e
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	8e 8f       	std	Y+30, r24	; 0x1e
     df4:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     df8:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <_ZN14SoftwareSerial20_receive_buffer_headE>
     dfc:	d0 93 36 05 	sts	0x0536, r29	; 0x800536 <_ZN14SoftwareSerial13active_objectE+0x1>
     e00:	c0 93 35 05 	sts	0x0535, r28	; 0x800535 <_ZN14SoftwareSerial13active_objectE>
     e04:	eb 89       	ldd	r30, Y+19	; 0x13
     e06:	fc 89       	ldd	r31, Y+20	; 0x14
     e08:	90 81       	ld	r25, Z
     e0a:	8d 89       	ldd	r24, Y+21	; 0x15
     e0c:	89 2b       	or	r24, r25
     e0e:	80 83       	st	Z, r24
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	03 c0       	rjmp	.+6      	; 0xe1a <_ZN14SoftwareSerial6listenEv+0x50>
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <_ZN14SoftwareSerial6listenEv+0x50>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	08 95       	ret

00000e20 <__vector_3>:
     e20:	1f 92       	push	r1
     e22:	0f 92       	push	r0
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	0f 92       	push	r0
     e28:	11 24       	eor	r1, r1
     e2a:	2f 93       	push	r18
     e2c:	3f 93       	push	r19
     e2e:	4f 93       	push	r20
     e30:	5f 93       	push	r21
     e32:	6f 93       	push	r22
     e34:	7f 93       	push	r23
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	af 93       	push	r26
     e3c:	bf 93       	push	r27
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	ef 93       	push	r30
     e44:	ff 93       	push	r31
     e46:	a0 91 35 05 	lds	r26, 0x0535	; 0x800535 <_ZN14SoftwareSerial13active_objectE>
     e4a:	b0 91 36 05 	lds	r27, 0x0536	; 0x800536 <_ZN14SoftwareSerial13active_objectE+0x1>
     e4e:	10 97       	sbiw	r26, 0x00	; 0
     e50:	09 f4       	brne	.+2      	; 0xe54 <__vector_3+0x34>
     e52:	78 c0       	rjmp	.+240    	; 0xf44 <__vector_3+0x124>
     e54:	5e 96       	adiw	r26, 0x1e	; 30
     e56:	8c 91       	ld	r24, X
     e58:	5e 97       	sbiw	r26, 0x1e	; 30
     e5a:	81 ff       	sbrs	r24, 1
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <__vector_3+0x58>
     e5e:	1e 96       	adiw	r26, 0x0e	; 14
     e60:	ed 91       	ld	r30, X+
     e62:	fc 91       	ld	r31, X
     e64:	1f 97       	sbiw	r26, 0x0f	; 15
     e66:	90 81       	ld	r25, Z
     e68:	1d 96       	adiw	r26, 0x0d	; 13
     e6a:	8c 91       	ld	r24, X
     e6c:	1d 97       	sbiw	r26, 0x0d	; 13
     e6e:	98 23       	and	r25, r24
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	71 f4       	brne	.+28     	; 0xe90 <__vector_3+0x70>
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	0c c0       	rjmp	.+24     	; 0xe90 <__vector_3+0x70>
     e78:	1e 96       	adiw	r26, 0x0e	; 14
     e7a:	ed 91       	ld	r30, X+
     e7c:	fc 91       	ld	r31, X
     e7e:	1f 97       	sbiw	r26, 0x0f	; 15
     e80:	90 81       	ld	r25, Z
     e82:	1d 96       	adiw	r26, 0x0d	; 13
     e84:	8c 91       	ld	r24, X
     e86:	1d 97       	sbiw	r26, 0x0d	; 13
     e88:	98 23       	and	r25, r24
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	09 f0       	breq	.+2      	; 0xe90 <__vector_3+0x70>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	88 23       	and	r24, r24
     e92:	09 f4       	brne	.+2      	; 0xe96 <__vector_3+0x76>
     e94:	57 c0       	rjmp	.+174    	; 0xf44 <__vector_3+0x124>
     e96:	53 96       	adiw	r26, 0x13	; 19
     e98:	ed 91       	ld	r30, X+
     e9a:	fc 91       	ld	r31, X
     e9c:	54 97       	sbiw	r26, 0x14	; 20
     e9e:	90 81       	ld	r25, Z
     ea0:	55 96       	adiw	r26, 0x15	; 21
     ea2:	8c 91       	ld	r24, X
     ea4:	55 97       	sbiw	r26, 0x15	; 21
     ea6:	80 95       	com	r24
     ea8:	89 23       	and	r24, r25
     eaa:	80 83       	st	Z, r24
     eac:	56 96       	adiw	r26, 0x16	; 22
     eae:	8d 91       	ld	r24, X+
     eb0:	9c 91       	ld	r25, X
     eb2:	57 97       	sbiw	r26, 0x17	; 23
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <__vector_3+0x94>
     eb8:	58 96       	adiw	r26, 0x18	; 24
     eba:	6d 91       	ld	r22, X+
     ebc:	7c 91       	ld	r23, X
     ebe:	59 97       	sbiw	r26, 0x19	; 25
     ec0:	1e 96       	adiw	r26, 0x0e	; 14
     ec2:	cd 91       	ld	r28, X+
     ec4:	dc 91       	ld	r29, X
     ec6:	1f 97       	sbiw	r26, 0x0f	; 15
     ec8:	1d 96       	adiw	r26, 0x0d	; 13
     eca:	5c 91       	ld	r21, X
     ecc:	1d 97       	sbiw	r26, 0x0d	; 13
     ece:	38 e0       	ldi	r19, 0x08	; 8
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	fb 01       	movw	r30, r22
     ed4:	31 97       	sbiw	r30, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <__vector_3+0xb4>
     ed8:	84 2f       	mov	r24, r20
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	95 95       	asr	r25
     ede:	87 95       	ror	r24
     ee0:	48 2f       	mov	r20, r24
     ee2:	28 81       	ld	r18, Y
     ee4:	25 23       	and	r18, r21
     ee6:	09 f0       	breq	.+2      	; 0xeea <__vector_3+0xca>
     ee8:	40 68       	ori	r20, 0x80	; 128
     eea:	31 50       	subi	r19, 0x01	; 1
     eec:	91 f7       	brne	.-28     	; 0xed2 <__vector_3+0xb2>
     eee:	5e 96       	adiw	r26, 0x1e	; 30
     ef0:	8c 91       	ld	r24, X
     ef2:	5e 97       	sbiw	r26, 0x1e	; 30
     ef4:	81 fd       	sbrc	r24, 1
     ef6:	40 95       	com	r20
     ef8:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <_ZN14SoftwareSerial20_receive_buffer_headE>
     f02:	28 17       	cp	r18, r24
     f04:	49 f0       	breq	.+18     	; 0xf18 <__vector_3+0xf8>
     f06:	e0 91 34 04 	lds	r30, 0x0434	; 0x800434 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	eb 5c       	subi	r30, 0xCB	; 203
     f0e:	fb 4f       	sbci	r31, 0xFB	; 251
     f10:	40 83       	st	Z, r20
     f12:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f16:	07 c0       	rjmp	.+14     	; 0xf26 <__vector_3+0x106>
     f18:	5e 96       	adiw	r26, 0x1e	; 30
     f1a:	8c 91       	ld	r24, X
     f1c:	5e 97       	sbiw	r26, 0x1e	; 30
     f1e:	81 60       	ori	r24, 0x01	; 1
     f20:	5e 96       	adiw	r26, 0x1e	; 30
     f22:	8c 93       	st	X, r24
     f24:	5e 97       	sbiw	r26, 0x1e	; 30
     f26:	5a 96       	adiw	r26, 0x1a	; 26
     f28:	8d 91       	ld	r24, X+
     f2a:	9c 91       	ld	r25, X
     f2c:	5b 97       	sbiw	r26, 0x1b	; 27
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <__vector_3+0x10e>
     f32:	53 96       	adiw	r26, 0x13	; 19
     f34:	ed 91       	ld	r30, X+
     f36:	fc 91       	ld	r31, X
     f38:	54 97       	sbiw	r26, 0x14	; 20
     f3a:	90 81       	ld	r25, Z
     f3c:	55 96       	adiw	r26, 0x15	; 21
     f3e:	8c 91       	ld	r24, X
     f40:	89 2b       	or	r24, r25
     f42:	80 83       	st	Z, r24
     f44:	ff 91       	pop	r31
     f46:	ef 91       	pop	r30
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	bf 91       	pop	r27
     f4e:	af 91       	pop	r26
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	7f 91       	pop	r23
     f56:	6f 91       	pop	r22
     f58:	5f 91       	pop	r21
     f5a:	4f 91       	pop	r20
     f5c:	3f 91       	pop	r19
     f5e:	2f 91       	pop	r18
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	1f 90       	pop	r1
     f68:	18 95       	reti

00000f6a <_ZN14SoftwareSerial5setTXEh>:
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
     f72:	16 2f       	mov	r17, r22
     f74:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f76:	66 95       	lsr	r22
     f78:	61 70       	andi	r22, 0x01	; 1
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	68 27       	eor	r22, r24
     f7e:	81 2f       	mov	r24, r17
     f80:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <digitalWrite>
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	81 2f       	mov	r24, r17
     f88:	0e 94 bb 05 	call	0xb76	; 0xb76 <pinMode>
     f8c:	81 2f       	mov	r24, r17
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	fc 01       	movw	r30, r24
     f92:	e3 58       	subi	r30, 0x83	; 131
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	e4 91       	lpm	r30, Z
     f98:	e8 8b       	std	Y+16, r30	; 0x10
     f9a:	fc 01       	movw	r30, r24
     f9c:	ef 56       	subi	r30, 0x6F	; 111
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	e4 91       	lpm	r30, Z
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	ee 0f       	add	r30, r30
     fa6:	ff 1f       	adc	r31, r31
     fa8:	e1 55       	subi	r30, 0x51	; 81
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	85 91       	lpm	r24, Z+
     fae:	94 91       	lpm	r25, Z
     fb0:	9a 8b       	std	Y+18, r25	; 0x12
     fb2:	89 8b       	std	Y+17, r24	; 0x11
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	08 95       	ret

00000fbc <_ZN14SoftwareSerial5setRXEh>:
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	ec 01       	movw	r28, r24
     fc4:	16 2f       	mov	r17, r22
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	81 2f       	mov	r24, r17
     fca:	0e 94 bb 05 	call	0xb76	; 0xb76 <pinMode>
     fce:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd0:	81 fd       	sbrc	r24, 1
     fd2:	04 c0       	rjmp	.+8      	; 0xfdc <_ZN14SoftwareSerial5setRXEh+0x20>
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	81 2f       	mov	r24, r17
     fd8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <digitalWrite>
     fdc:	1c 87       	std	Y+12, r17	; 0x0c
     fde:	61 2f       	mov	r22, r17
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	fb 01       	movw	r30, r22
     fe4:	e3 58       	subi	r30, 0x83	; 131
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	e4 91       	lpm	r30, Z
     fea:	ed 87       	std	Y+13, r30	; 0x0d
     fec:	fb 01       	movw	r30, r22
     fee:	ef 56       	subi	r30, 0x6F	; 111
     ff0:	ff 4f       	sbci	r31, 0xFF	; 255
     ff2:	e4 91       	lpm	r30, Z
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	eb 55       	subi	r30, 0x5B	; 91
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	85 91       	lpm	r24, Z+
    1000:	94 91       	lpm	r25, Z
    1002:	9f 87       	std	Y+15, r25	; 0x0f
    1004:	8e 87       	std	Y+14, r24	; 0x0e
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	08 95       	ret

0000100e <_ZN14SoftwareSerialC1Ehhb>:
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	ec 01       	movw	r28, r24
    1016:	16 2f       	mov	r17, r22
    1018:	1b 82       	std	Y+3, r1	; 0x03
    101a:	1a 82       	std	Y+2, r1	; 0x02
    101c:	88 ee       	ldi	r24, 0xE8	; 232
    101e:	93 e0       	ldi	r25, 0x03	; 3
    1020:	a0 e0       	ldi	r26, 0x00	; 0
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	8c 83       	std	Y+4, r24	; 0x04
    1026:	9d 83       	std	Y+5, r25	; 0x05
    1028:	ae 83       	std	Y+6, r26	; 0x06
    102a:	bf 83       	std	Y+7, r27	; 0x07
    102c:	80 e3       	ldi	r24, 0x30	; 48
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	99 83       	std	Y+1, r25	; 0x01
    1032:	88 83       	st	Y, r24
    1034:	1f 8a       	std	Y+23, r1	; 0x17
    1036:	1e 8a       	std	Y+22, r1	; 0x16
    1038:	19 8e       	std	Y+25, r1	; 0x19
    103a:	18 8e       	std	Y+24, r1	; 0x18
    103c:	1b 8e       	std	Y+27, r1	; 0x1b
    103e:	1a 8e       	std	Y+26, r1	; 0x1a
    1040:	1d 8e       	std	Y+29, r1	; 0x1d
    1042:	1c 8e       	std	Y+28, r1	; 0x1c
    1044:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1046:	8e 7f       	andi	r24, 0xFE	; 254
    1048:	20 fb       	bst	r18, 0
    104a:	81 f9       	bld	r24, 1
    104c:	8e 8f       	std	Y+30, r24	; 0x1e
    104e:	64 2f       	mov	r22, r20
    1050:	ce 01       	movw	r24, r28
    1052:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN14SoftwareSerial5setTXEh>
    1056:	61 2f       	mov	r22, r17
    1058:	ce 01       	movw	r24, r28
    105a:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN14SoftwareSerial5setRXEh>
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	08 95       	ret

00001066 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
    106c:	9a 01       	movw	r18, r20
    106e:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    1070:	1b 8e       	std	Y+27, r1	; 0x1b
    1072:	1a 8e       	std	Y+26, r1	; 0x1a
    1074:	19 8e       	std	Y+25, r1	; 0x19
    1076:	18 8e       	std	Y+24, r1	; 0x18
    1078:	1f 8a       	std	Y+23, r1	; 0x17
    107a:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	79 e0       	ldi	r23, 0x09	; 9
    1080:	8d e3       	ldi	r24, 0x3D	; 61
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__udivmodsi4>
    1088:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    108a:	24 30       	cpi	r18, 0x04	; 4
    108c:	31 05       	cpc	r19, r1
    108e:	18 f0       	brcs	.+6      	; 0x1096 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    1090:	c9 01       	movw	r24, r18
    1092:	03 97       	sbiw	r24, 0x03	; 3
    1094:	02 c0       	rjmp	.+4      	; 0x109a <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    109a:	9d 8f       	std	Y+29, r25	; 0x1d
    109c:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    109e:	8c 85       	ldd	r24, Y+12	; 0x0c
    10a0:	86 31       	cpi	r24, 0x16	; 22
    10a2:	08 f0       	brcs	.+2      	; 0x10a6 <_ZN14SoftwareSerial5beginEl+0x40>
    10a4:	41 c0       	rjmp	.+130    	; 0x1128 <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    10a6:	b9 01       	movw	r22, r18
    10a8:	76 95       	lsr	r23
    10aa:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    10ac:	64 31       	cpi	r22, 0x14	; 20
    10ae:	71 05       	cpc	r23, r1
    10b0:	18 f0       	brcs	.+6      	; 0x10b8 <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
    10b2:	63 51       	subi	r22, 0x13	; 19
    10b4:	71 09       	sbc	r23, r1
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    10bc:	7f 8b       	std	Y+23, r23	; 0x17
    10be:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    10c0:	36 97       	sbiw	r30, 0x06	; 6
    10c2:	20 f0       	brcs	.+8      	; 0x10cc <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
    10c4:	b9 01       	movw	r22, r18
    10c6:	65 50       	subi	r22, 0x05	; 5
    10c8:	71 09       	sbc	r23, r1
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    10d0:	79 8f       	std	Y+25, r23	; 0x19
    10d2:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    10d4:	b9 01       	movw	r22, r18
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	26 0f       	add	r18, r22
    10dc:	37 1f       	adc	r19, r23
    10de:	36 95       	lsr	r19
    10e0:	27 95       	ror	r18
    10e2:	36 95       	lsr	r19
    10e4:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    10e6:	2d 30       	cpi	r18, 0x0D	; 13
    10e8:	31 05       	cpc	r19, r1
    10ea:	10 f1       	brcs	.+68     	; 0x1130 <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
    10ec:	2c 50       	subi	r18, 0x0C	; 12
    10ee:	31 09       	sbc	r19, r1
    10f0:	21 c0       	rjmp	.+66     	; 0x1134 <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    10f2:	21 e0       	ldi	r18, 0x01	; 1
    10f4:	8e 30       	cpi	r24, 0x0E	; 14
    10f6:	08 f4       	brcc	.+2      	; 0x10fa <_ZN14SoftwareSerial5beginEl+0x94>
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <_ZN14SoftwareSerial5beginEl+0x9a>
    10fe:	88 0f       	add	r24, r24
    1100:	2a 95       	dec	r18
    1102:	ea f7       	brpl	.-6      	; 0x10fe <_ZN14SoftwareSerial5beginEl+0x98>
    1104:	98 2b       	or	r25, r24
    1106:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    110a:	9c 85       	ldd	r25, Y+12	; 0x0c
    110c:	98 30       	cpi	r25, 0x08	; 8
    110e:	d0 f0       	brcs	.+52     	; 0x1144 <_ZN14SoftwareSerial5beginEl+0xde>
    1110:	9e 30       	cpi	r25, 0x0E	; 14
    1112:	10 f1       	brcs	.+68     	; 0x1158 <_ZN14SoftwareSerial5beginEl+0xf2>
    1114:	96 31       	cpi	r25, 0x16	; 22
    1116:	58 f1       	brcs	.+86     	; 0x116e <_ZN14SoftwareSerial5beginEl+0x108>
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	2a c0       	rjmp	.+84     	; 0x1172 <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    111e:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1120:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1122:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    1128:	ce 01       	movw	r24, r28
    112a:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN14SoftwareSerial6listenEv>
}
    112e:	2a c0       	rjmp	.+84     	; 0x1184 <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    1130:	21 e0       	ldi	r18, 0x01	; 1
    1132:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    1134:	3b 8f       	std	Y+27, r19	; 0x1b
    1136:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    1138:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    113c:	88 30       	cpi	r24, 0x08	; 8
    113e:	c8 f6       	brcc	.-78     	; 0x10f2 <_ZN14SoftwareSerial5beginEl+0x8c>
    1140:	84 e0       	ldi	r24, 0x04	; 4
    1142:	e0 cf       	rjmp	.-64     	; 0x1104 <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1144:	2d e6       	ldi	r18, 0x6D	; 109
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	3c 8b       	std	Y+20, r19	; 0x14
    114a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <_ZN14SoftwareSerial5beginEl+0xec>
    1150:	88 0f       	add	r24, r24
    1152:	9a 95       	dec	r25
    1154:	ea f7       	brpl	.-6      	; 0x1150 <_ZN14SoftwareSerial5beginEl+0xea>
    1156:	e3 cf       	rjmp	.-58     	; 0x111e <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1158:	2b e6       	ldi	r18, 0x6B	; 107
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3c 8b       	std	Y+20, r19	; 0x14
    115e:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1160:	98 50       	subi	r25, 0x08	; 8
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <_ZN14SoftwareSerial5beginEl+0x102>
    1166:	88 0f       	add	r24, r24
    1168:	9a 95       	dec	r25
    116a:	ea f7       	brpl	.-6      	; 0x1166 <_ZN14SoftwareSerial5beginEl+0x100>
    116c:	d8 cf       	rjmp	.-80     	; 0x111e <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    116e:	2c e6       	ldi	r18, 0x6C	; 108
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	3c 8b       	std	Y+20, r19	; 0x14
    1174:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1176:	9e 50       	subi	r25, 0x0E	; 14
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	01 c0       	rjmp	.+2      	; 0x117e <_ZN14SoftwareSerial5beginEl+0x118>
    117c:	88 0f       	add	r24, r24
    117e:	9a 95       	dec	r25
    1180:	ea f7       	brpl	.-6      	; 0x117c <_ZN14SoftwareSerial5beginEl+0x116>
    1182:	cd cf       	rjmp	.-102    	; 0x111e <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	08 95       	ret

0000118a <_ZN25AuthorizationHandlerClassC1EP21GsmCommunicationClassP11EepromClass>:
	GsmCommunication = NewCommunication;
	eeprom1 = NewEeprom1;
} //AuthorizationHandlerClass

// default destructor
AuthorizationHandlerClass::~AuthorizationHandlerClass()
    118a:	fc 01       	movw	r30, r24
    118c:	71 83       	std	Z+1, r23	; 0x01
    118e:	60 83       	st	Z, r22
    1190:	53 83       	std	Z+3, r21	; 0x03
    1192:	42 83       	std	Z+2, r20	; 0x02
    1194:	08 95       	ret

00001196 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
int AuthorizationHandlerClass::checkAuthorization(char *nrToCheck){
    1196:	3f 92       	push	r3
    1198:	4f 92       	push	r4
    119a:	5f 92       	push	r5
    119c:	6f 92       	push	r6
    119e:	7f 92       	push	r7
    11a0:	8f 92       	push	r8
    11a2:	9f 92       	push	r9
    11a4:	af 92       	push	r10
    11a6:	bf 92       	push	r11
    11a8:	cf 92       	push	r12
    11aa:	df 92       	push	r13
    11ac:	ef 92       	push	r14
    11ae:	ff 92       	push	r15
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	5b 01       	movw	r10, r22
	int i = 0;
	int v = 0;
	int nrOfMatchDigits = 0;
	int eepromAddress = eeprom1->getEepromAddress();
    11ba:	fc 01       	movw	r30, r24
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN11EepromClass16getEepromAddressEv>
    11c4:	4c 01       	movw	r8, r24
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    11c6:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    11ca:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    11ce:	02 80       	ldd	r0, Z+2	; 0x02
    11d0:	f3 81       	ldd	r31, Z+3	; 0x03
    11d2:	e0 2d       	mov	r30, r0
    11d4:	46 e1       	ldi	r20, 0x16	; 22
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	6e e3       	ldi	r22, 0x3E	; 62
    11da:	71 e0       	ldi	r23, 0x01	; 1
    11dc:	80 e8       	ldi	r24, 0x80	; 128
    11de:	93 e0       	ldi	r25, 0x03	; 3
    11e0:	09 95       	icall
	Serial.write("CheckAuthorization...\n");
	//Serial.write("phone numbers in Contacts:\n");
	//eeprom1->displayEeprom();						// displays all contacts in Eeprom
	
	// return 1 if minimum nr of digits matching
	for(i=0; i<eepromAddress;i++){								// until end of eeprom data reached
    11e2:	18 14       	cp	r1, r8
    11e4:	19 04       	cpc	r1, r9
    11e6:	e4 f5       	brge	.+120    	; 0x1260 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0xca>
		for(v=0;nrToCheck[v]!='\0';v++){						// until string end
    11e8:	f5 01       	movw	r30, r10
    11ea:	40 80       	ld	r4, Z
    11ec:	e1 2c       	mov	r14, r1
    11ee:	f1 2c       	mov	r15, r1
    11f0:	c0 e0       	ldi	r28, 0x00	; 0
    11f2:	d0 e0       	ldi	r29, 0x00	; 0
				nrOfMatchDigits = 0;					
			}
			if(nrOfMatchDigits>=NR_OF_MATCHING_DIGITS){			// return 1 if min matching digits reached
				return(1);
			}
			if((i+1)%9==0 && i!=0){
    11f4:	0f 2e       	mov	r0, r31
    11f6:	f9 e0       	ldi	r31, 0x09	; 9
    11f8:	6f 2e       	mov	r6, r31
    11fa:	71 2c       	mov	r7, r1
    11fc:	f0 2d       	mov	r31, r0
    11fe:	34 2c       	mov	r3, r4
	//Serial.write("phone numbers in Contacts:\n");
	//eeprom1->displayEeprom();						// displays all contacts in Eeprom
	
	// return 1 if minimum nr of digits matching
	for(i=0; i<eepromAddress;i++){								// until end of eeprom data reached
		for(v=0;nrToCheck[v]!='\0';v++){						// until string end
    1200:	44 20       	and	r4, r4
    1202:	29 f1       	breq	.+74     	; 0x124e <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0xb8>
				nrOfMatchDigits = 0;					
			}
			if(nrOfMatchDigits>=NR_OF_MATCHING_DIGITS){			// return 1 if min matching digits reached
				return(1);
			}
			if((i+1)%9==0 && i!=0){
    1204:	c7 01       	movw	r24, r14
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	b3 01       	movw	r22, r6
    120a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__divmodhi4>
    120e:	6c 01       	movw	r12, r24
    1210:	85 01       	movw	r16, r10
    1212:	0f 5f       	subi	r16, 0xFF	; 255
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	53 2c       	mov	r5, r3

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1218:	c7 01       	movw	r24, r14
    121a:	8c 0f       	add	r24, r28
    121c:	9d 1f       	adc	r25, r29
    121e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <eeprom_read_byte>
	//eeprom1->displayEeprom();						// displays all contacts in Eeprom
	
	// return 1 if minimum nr of digits matching
	for(i=0; i<eepromAddress;i++){								// until end of eeprom data reached
		for(v=0;nrToCheck[v]!='\0';v++){						// until string end
			if(nrToCheck[v]==EEPROM.read(i+nrOfMatchDigits)){	// compare single digits
    1222:	85 11       	cpse	r24, r5
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0x9a>
				nrOfMatchDigits++;								// increase if matching Digit
    1226:	21 96       	adiw	r28, 0x01	; 1
				}else{
				nrOfMatchDigits = 0;					
			}
			if(nrOfMatchDigits>=NR_OF_MATCHING_DIGITS){			// return 1 if min matching digits reached
    1228:	c9 30       	cpi	r28, 0x09	; 9
    122a:	d1 05       	cpc	r29, r1
    122c:	1c f0       	brlt	.+6      	; 0x1234 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0x9e>
    122e:	1b c0       	rjmp	.+54     	; 0x1266 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0xd0>
	for(i=0; i<eepromAddress;i++){								// until end of eeprom data reached
		for(v=0;nrToCheck[v]!='\0';v++){						// until string end
			if(nrToCheck[v]==EEPROM.read(i+nrOfMatchDigits)){	// compare single digits
				nrOfMatchDigits++;								// increase if matching Digit
				}else{
				nrOfMatchDigits = 0;					
    1230:	c0 e0       	ldi	r28, 0x00	; 0
    1232:	d0 e0       	ldi	r29, 0x00	; 0
			}
			if(nrOfMatchDigits>=NR_OF_MATCHING_DIGITS){			// return 1 if min matching digits reached
				return(1);
			}
			if((i+1)%9==0 && i!=0){
    1234:	c1 14       	cp	r12, r1
    1236:	d1 04       	cpc	r13, r1
    1238:	29 f4       	brne	.+10     	; 0x1244 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0xae>
    123a:	e1 14       	cp	r14, r1
    123c:	f1 04       	cpc	r15, r1
    123e:	11 f0       	breq	.+4      	; 0x1244 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0xae>
				nrOfMatchDigits = 0;
    1240:	c0 e0       	ldi	r28, 0x00	; 0
    1242:	d0 e0       	ldi	r29, 0x00	; 0
	//Serial.write("phone numbers in Contacts:\n");
	//eeprom1->displayEeprom();						// displays all contacts in Eeprom
	
	// return 1 if minimum nr of digits matching
	for(i=0; i<eepromAddress;i++){								// until end of eeprom data reached
		for(v=0;nrToCheck[v]!='\0';v++){						// until string end
    1244:	f8 01       	movw	r30, r16
    1246:	51 90       	ld	r5, Z+
    1248:	8f 01       	movw	r16, r30
    124a:	51 10       	cpse	r5, r1
    124c:	e5 cf       	rjmp	.-54     	; 0x1218 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0x82>
	Serial.write("CheckAuthorization...\n");
	//Serial.write("phone numbers in Contacts:\n");
	//eeprom1->displayEeprom();						// displays all contacts in Eeprom
	
	// return 1 if minimum nr of digits matching
	for(i=0; i<eepromAddress;i++){								// until end of eeprom data reached
    124e:	ff ef       	ldi	r31, 0xFF	; 255
    1250:	ef 1a       	sub	r14, r31
    1252:	ff 0a       	sbc	r15, r31
    1254:	8e 14       	cp	r8, r14
    1256:	9f 04       	cpc	r9, r15
    1258:	99 f6       	brne	.-90     	; 0x1200 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0x6a>
			if((i+1)%9==0 && i!=0){
				nrOfMatchDigits = 0;
			}
		}
	}
	return(0);		// return 0 if no matching phone number was detected
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	05 c0       	rjmp	.+10     	; 0x126a <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0xd4>
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc+0xd4>
				nrOfMatchDigits++;								// increase if matching Digit
				}else{
				nrOfMatchDigits = 0;					
			}
			if(nrOfMatchDigits>=NR_OF_MATCHING_DIGITS){			// return 1 if min matching digits reached
				return(1);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
				nrOfMatchDigits = 0;
			}
		}
	}
	return(0);		// return 0 if no matching phone number was detected
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	bf 90       	pop	r11
    127c:	af 90       	pop	r10
    127e:	9f 90       	pop	r9
    1280:	8f 90       	pop	r8
    1282:	7f 90       	pop	r7
    1284:	6f 90       	pop	r6
    1286:	5f 90       	pop	r5
    1288:	4f 90       	pop	r4
    128a:	3f 90       	pop	r3
    128c:	08 95       	ret

0000128e <_ZN25AuthorizationHandlerClass10answerCallEv>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void AuthorizationHandlerClass::answerCall(){
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	ec 01       	movw	r28, r24
	
	// hang up incoming Call
	GsmCommunication->sendAtCmd("ATA");
    1294:	65 e5       	ldi	r22, 0x55	; 85
    1296:	71 e0       	ldi	r23, 0x01	; 1
    1298:	88 81       	ld	r24, Y
    129a:	99 81       	ldd	r25, Y+1	; 0x01
    129c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN21GsmCommunicationClass9sendAtCmdEPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12a0:	2f ef       	ldi	r18, 0xFF	; 255
    12a2:	87 e8       	ldi	r24, 0x87	; 135
    12a4:	93 e1       	ldi	r25, 0x13	; 19
    12a6:	21 50       	subi	r18, 0x01	; 1
    12a8:	80 40       	sbci	r24, 0x00	; 0
    12aa:	90 40       	sbci	r25, 0x00	; 0
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <_ZN25AuthorizationHandlerClass10answerCallEv+0x18>
    12ae:	00 c0       	rjmp	.+0      	; 0x12b0 <_ZN25AuthorizationHandlerClass10answerCallEv+0x22>
    12b0:	00 00       	nop
	_delay_ms(400);
	GsmCommunication->readSerial();
    12b2:	88 81       	ld	r24, Y
    12b4:	99 81       	ldd	r25, Y+1	; 0x01
    12b6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN21GsmCommunicationClass10readSerialEv>
	GsmCommunication->sendAtCmd("AT+CVHU=0");
    12ba:	69 e5       	ldi	r22, 0x59	; 89
    12bc:	71 e0       	ldi	r23, 0x01	; 1
    12be:	88 81       	ld	r24, Y
    12c0:	99 81       	ldd	r25, Y+1	; 0x01
    12c2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN21GsmCommunicationClass9sendAtCmdEPc>
    12c6:	2f ef       	ldi	r18, 0xFF	; 255
    12c8:	87 e8       	ldi	r24, 0x87	; 135
    12ca:	93 e1       	ldi	r25, 0x13	; 19
    12cc:	21 50       	subi	r18, 0x01	; 1
    12ce:	80 40       	sbci	r24, 0x00	; 0
    12d0:	90 40       	sbci	r25, 0x00	; 0
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <_ZN25AuthorizationHandlerClass10answerCallEv+0x3e>
    12d4:	00 c0       	rjmp	.+0      	; 0x12d6 <_ZN25AuthorizationHandlerClass10answerCallEv+0x48>
    12d6:	00 00       	nop
	_delay_ms(400);
	GsmCommunication->readSerial();
    12d8:	88 81       	ld	r24, Y
    12da:	99 81       	ldd	r25, Y+1	; 0x01
    12dc:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN21GsmCommunicationClass10readSerialEv>
	GsmCommunication->sendAtCmd("ATH");
    12e0:	63 e6       	ldi	r22, 0x63	; 99
    12e2:	71 e0       	ldi	r23, 0x01	; 1
    12e4:	88 81       	ld	r24, Y
    12e6:	99 81       	ldd	r25, Y+1	; 0x01
    12e8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN21GsmCommunicationClass9sendAtCmdEPc>
    12ec:	2f ef       	ldi	r18, 0xFF	; 255
    12ee:	87 e8       	ldi	r24, 0x87	; 135
    12f0:	93 e1       	ldi	r25, 0x13	; 19
    12f2:	21 50       	subi	r18, 0x01	; 1
    12f4:	80 40       	sbci	r24, 0x00	; 0
    12f6:	90 40       	sbci	r25, 0x00	; 0
    12f8:	e1 f7       	brne	.-8      	; 0x12f2 <_ZN25AuthorizationHandlerClass10answerCallEv+0x64>
    12fa:	00 c0       	rjmp	.+0      	; 0x12fc <_ZN25AuthorizationHandlerClass10answerCallEv+0x6e>
    12fc:	00 00       	nop
	_delay_ms(400);
	GsmCommunication->readSerial();
    12fe:	88 81       	ld	r24, Y
    1300:	99 81       	ldd	r25, Y+1	; 0x01
    1302:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN21GsmCommunicationClass10readSerialEv>
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	08 95       	ret

0000130c <_ZN25AuthorizationHandlerClass18handleReceivedCallEP15LockOpenerClass>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void AuthorizationHandlerClass::handleReceivedCall(LockOpenerClass *Lock){
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	ec 01       	movw	r28, r24
    131a:	7b 01       	movw	r14, r22
	
	if(strstr(GsmCommunication->receiveBuffer, "RING") != NULL){		// check if call received
    131c:	08 81       	ld	r16, Y
    131e:	19 81       	ldd	r17, Y+1	; 0x01
    1320:	67 e6       	ldi	r22, 0x67	; 103
    1322:	71 e0       	ldi	r23, 0x01	; 1
    1324:	c8 01       	movw	r24, r16
    1326:	0e 94 05 10 	call	0x200a	; 0x200a <strstr>
    132a:	89 2b       	or	r24, r25
    132c:	09 f4       	brne	.+2      	; 0x1330 <_ZN25AuthorizationHandlerClass18handleReceivedCallEP15LockOpenerClass+0x24>
    132e:	4c c0       	rjmp	.+152    	; 0x13c8 <_ZN25AuthorizationHandlerClass18handleReceivedCallEP15LockOpenerClass+0xbc>
		
		GsmCommunication->sendAtCmd("AT+CLCC");			// read phone Number from caller
    1330:	6c e6       	ldi	r22, 0x6C	; 108
    1332:	71 e0       	ldi	r23, 0x01	; 1
    1334:	c8 01       	movw	r24, r16
    1336:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <_ZN21GsmCommunicationClass9sendAtCmdEPc>
		GsmCommunication->readSerial();
    133a:	88 81       	ld	r24, Y
    133c:	99 81       	ldd	r25, Y+1	; 0x01
    133e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN21GsmCommunicationClass10readSerialEv>
		
		if(checkAuthorization(GsmCommunication->receiveBuffer) == 1){	// if Nr. of caller is authorized open Lock
    1342:	68 81       	ld	r22, Y
    1344:	79 81       	ldd	r23, Y+1	; 0x01
    1346:	ce 01       	movw	r24, r28
    1348:	0e 94 cb 08 	call	0x1196	; 0x1196 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc>
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	71 f5       	brne	.+92     	; 0x13ac <_ZN25AuthorizationHandlerClass18handleReceivedCallEP15LockOpenerClass+0xa0>
    1350:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1354:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1358:	02 80       	ldd	r0, Z+2	; 0x02
    135a:	f3 81       	ldd	r31, Z+3	; 0x03
    135c:	e0 2d       	mov	r30, r0
    135e:	41 e2       	ldi	r20, 0x21	; 33
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	64 e7       	ldi	r22, 0x74	; 116
    1364:	71 e0       	ldi	r23, 0x01	; 1
    1366:	80 e8       	ldi	r24, 0x80	; 128
    1368:	93 e0       	ldi	r25, 0x03	; 3
    136a:	09 95       	icall
			Serial.write("Number authorized -> OPEN LOCK \n\n");
			answerCall();		//hang up incoming call
    136c:	ce 01       	movw	r24, r28
    136e:	0e 94 47 09 	call	0x128e	; 0x128e <_ZN25AuthorizationHandlerClass10answerCallEv>
			
			// open lock
			delay(1000);		
    1372:	68 ee       	ldi	r22, 0xE8	; 232
    1374:	73 e0       	ldi	r23, 0x03	; 3
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 0b 05 	call	0xa16	; 0xa16 <delay>
			Lock->On();
    137e:	d7 01       	movw	r26, r14
    1380:	ed 91       	ld	r30, X+
    1382:	fc 91       	ld	r31, X
    1384:	01 90       	ld	r0, Z+
    1386:	f0 81       	ld	r31, Z
    1388:	e0 2d       	mov	r30, r0
    138a:	c7 01       	movw	r24, r14
    138c:	09 95       	icall
			delay(1000);
    138e:	68 ee       	ldi	r22, 0xE8	; 232
    1390:	73 e0       	ldi	r23, 0x03	; 3
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 0b 05 	call	0xa16	; 0xa16 <delay>
			Lock->Off();
    139a:	d7 01       	movw	r26, r14
    139c:	ed 91       	ld	r30, X+
    139e:	fc 91       	ld	r31, X
    13a0:	02 80       	ldd	r0, Z+2	; 0x02
    13a2:	f3 81       	ldd	r31, Z+3	; 0x03
    13a4:	e0 2d       	mov	r30, r0
    13a6:	c7 01       	movw	r24, r14
    13a8:	09 95       	icall
    13aa:	0e c0       	rjmp	.+28     	; 0x13c8 <_ZN25AuthorizationHandlerClass18handleReceivedCallEP15LockOpenerClass+0xbc>
    13ac:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    13b0:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    13b4:	02 80       	ldd	r0, Z+2	; 0x02
    13b6:	f3 81       	ldd	r31, Z+3	; 0x03
    13b8:	e0 2d       	mov	r30, r0
    13ba:	42 e1       	ldi	r20, 0x12	; 18
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	66 e9       	ldi	r22, 0x96	; 150
    13c0:	71 e0       	ldi	r23, 0x01	; 1
    13c2:	80 e8       	ldi	r24, 0x80	; 128
    13c4:	93 e0       	ldi	r25, 0x03	; 3
    13c6:	09 95       	icall
		}else{
			Serial.write("Number DECLINED \n\n");		// if Nr. is declined
		}
	}
}
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	08 95       	ret

000013d6 <_ZN15CmdContactClassC1EP11EepromClassP21GsmCommunicationClassP25AuthorizationHandlerClass>:
{
	eeprom1 = newEeprom1;
} //CmdContactClass

// default destructor
CmdContactClass::~CmdContactClass()
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
    13e0:	8b 01       	movw	r16, r22
    13e2:	ba 01       	movw	r22, r20
    13e4:	a9 01       	movw	r20, r18
    13e6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>
    13ea:	c7 5e       	subi	r28, 0xE7	; 231
    13ec:	de 4f       	sbci	r29, 0xFE	; 254
    13ee:	19 83       	std	Y+1, r17	; 0x01
    13f0:	08 83       	st	Y, r16
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	08 95       	ret

000013fc <_ZN15CmdContactClass12removePrefixEPcS0_>:
/*  History     : 31.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void CmdContactClass::removePrefix(char *phoneNumber, char *smsMsg){

	int stringLength = strlen(smsMsg)-2; // get the sting length
    13fc:	da 01       	movw	r26, r20
    13fe:	0d 90       	ld	r0, X+
    1400:	00 20       	and	r0, r0
    1402:	e9 f7       	brne	.-6      	; 0x13fe <_ZN15CmdContactClass12removePrefixEPcS0_+0x2>
    1404:	11 97       	sbiw	r26, 0x01	; 1
    1406:	a4 1b       	sub	r26, r20
    1408:	b5 0b       	sbc	r27, r21

	// remove prefix
	if(stringLength>9){
    140a:	cd 01       	movw	r24, r26
    140c:	02 97       	sbiw	r24, 0x02	; 2
    140e:	0a 97       	sbiw	r24, 0x0a	; 10
    1410:	6c f0       	brlt	.+26     	; 0x142c <_ZN15CmdContactClass12removePrefixEPcS0_+0x30>
    1412:	1b 97       	sbiw	r26, 0x0b	; 11
    1414:	fa 01       	movw	r30, r20
    1416:	ea 0f       	add	r30, r26
    1418:	fb 1f       	adc	r31, r27
    141a:	db 01       	movw	r26, r22
    141c:	9b 01       	movw	r18, r22
    141e:	27 5f       	subi	r18, 0xF7	; 247
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
		for(int u=0; u<9; u++){
			phoneNumber[u] = smsMsg[u+(stringLength-9)];
    1422:	81 91       	ld	r24, Z+
    1424:	8d 93       	st	X+, r24

	int stringLength = strlen(smsMsg)-2; // get the sting length

	// remove prefix
	if(stringLength>9){
		for(int u=0; u<9; u++){
    1426:	a2 17       	cp	r26, r18
    1428:	b3 07       	cpc	r27, r19
    142a:	d9 f7       	brne	.-10     	; 0x1422 <_ZN15CmdContactClass12removePrefixEPcS0_+0x26>
			phoneNumber[u] = smsMsg[u+(stringLength-9)];
		}
	}
	phoneNumber[9] = '\0';
    142c:	fb 01       	movw	r30, r22
    142e:	11 86       	std	Z+9, r1	; 0x09
    1430:	08 95       	ret

00001432 <_ZN15CmdContactClass13executeSmsCmdEv>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 31.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void CmdContactClass::executeSmsCmd(){
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	ce 56       	subi	r28, 0x6E	; 110
    1448:	d1 09       	sbc	r29, r1
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
	char cBuffer[50];
	
	if(newSmsReceived == true){
    1454:	fc 01       	movw	r30, r24
    1456:	f3 95       	inc	r31
    1458:	20 81       	ld	r18, Z
    145a:	22 23       	and	r18, r18
    145c:	09 f4       	brne	.+2      	; 0x1460 <_ZN15CmdContactClass13executeSmsCmdEv+0x2e>
    145e:	9e c0       	rjmp	.+316    	; 0x159c <_ZN15CmdContactClass13executeSmsCmdEv+0x16a>
    1460:	8c 01       	movw	r16, r24
		char newPhoneNumber[10] = {0};
    1462:	fe 01       	movw	r30, r28
    1464:	eb 59       	subi	r30, 0x9B	; 155
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	8a e0       	ldi	r24, 0x0A	; 10
    146a:	df 01       	movw	r26, r30
    146c:	1d 92       	st	X+, r1
    146e:	8a 95       	dec	r24
    1470:	e9 f7       	brne	.-6      	; 0x146c <_ZN15CmdContactClass13executeSmsCmdEv+0x3a>
		char newName[NAME_SIZE] = {0};
    1472:	f2 97       	sbiw	r30, 0x32	; 50
    1474:	82 e3       	ldi	r24, 0x32	; 50
    1476:	df 01       	movw	r26, r30
    1478:	1d 92       	st	X+, r1
    147a:	8a 95       	dec	r24
    147c:	e9 f7       	brne	.-6      	; 0x1478 <_ZN15CmdContactClass13executeSmsCmdEv+0x46>
		
		// add new Contact
		if(strstr(smsMsg,"CMD_Add_Nr:") != NULL){		
    147e:	69 ea       	ldi	r22, 0xA9	; 169
    1480:	71 e0       	ldi	r23, 0x01	; 1
    1482:	c8 01       	movw	r24, r16
    1484:	0e 94 05 10 	call	0x200a	; 0x200a <strstr>
    1488:	89 2b       	or	r24, r25
    148a:	09 f4       	brne	.+2      	; 0x148e <_ZN15CmdContactClass13executeSmsCmdEv+0x5c>
    148c:	44 c0       	rjmp	.+136    	; 0x1516 <_ZN15CmdContactClass13executeSmsCmdEv+0xe4>
			
			removePrefix(newPhoneNumber,smsMsg);		// removes prefix from nr. 
    148e:	7e 01       	movw	r14, r28
    1490:	b5 e6       	ldi	r27, 0x65	; 101
    1492:	eb 0e       	add	r14, r27
    1494:	f1 1c       	adc	r15, r1
    1496:	a8 01       	movw	r20, r16
    1498:	b7 01       	movw	r22, r14
    149a:	c8 01       	movw	r24, r16
    149c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_ZN15CmdContactClass12removePrefixEPcS0_>
			strcpy(newName,"Unknown");					// define standard name for new nr.
    14a0:	88 e0       	ldi	r24, 0x08	; 8
    14a2:	e5 eb       	ldi	r30, 0xB5	; 181
    14a4:	f1 e0       	ldi	r31, 0x01	; 1
    14a6:	de 01       	movw	r26, r28
    14a8:	d3 96       	adiw	r26, 0x33	; 51
    14aa:	01 90       	ld	r0, Z+
    14ac:	0d 92       	st	X+, r0
    14ae:	8a 95       	dec	r24
    14b0:	e1 f7       	brne	.-8      	; 0x14aa <_ZN15CmdContactClass13executeSmsCmdEv+0x78>
			
			sprintf(cBuffer,"Number received: %s \n",newPhoneNumber );
    14b2:	ff 92       	push	r15
    14b4:	ef 92       	push	r14
    14b6:	8d eb       	ldi	r24, 0xBD	; 189
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	9f 93       	push	r25
    14bc:	8f 93       	push	r24
    14be:	fe 01       	movw	r30, r28
    14c0:	31 96       	adiw	r30, 0x01	; 1
    14c2:	6f 01       	movw	r12, r30
    14c4:	ff 93       	push	r31
    14c6:	ef 93       	push	r30
    14c8:	0e 94 1f 10 	call	0x203e	; 0x203e <sprintf>
    14cc:	f6 01       	movw	r30, r12
    14ce:	01 90       	ld	r0, Z+
    14d0:	00 20       	and	r0, r0
    14d2:	e9 f7       	brne	.-6      	; 0x14ce <_ZN15CmdContactClass13executeSmsCmdEv+0x9c>
    14d4:	31 97       	sbiw	r30, 0x01	; 1
    14d6:	af 01       	movw	r20, r30
    14d8:	4c 19       	sub	r20, r12
    14da:	5d 09       	sbc	r21, r13
    14dc:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    14e0:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    14e4:	02 80       	ldd	r0, Z+2	; 0x02
    14e6:	f3 81       	ldd	r31, Z+3	; 0x03
    14e8:	e0 2d       	mov	r30, r0
    14ea:	b6 01       	movw	r22, r12
    14ec:	80 e8       	ldi	r24, 0x80	; 128
    14ee:	93 e0       	ldi	r25, 0x03	; 3
    14f0:	09 95       	icall
			Serial.write(cBuffer);
			
			eeprom1->addContactToEeprom(newName,newPhoneNumber);	// store new contact
    14f2:	f8 01       	movw	r30, r16
    14f4:	e7 5e       	subi	r30, 0xE7	; 231
    14f6:	fe 4f       	sbci	r31, 0xFE	; 254
    14f8:	a7 01       	movw	r20, r14
    14fa:	be 01       	movw	r22, r28
    14fc:	6d 5c       	subi	r22, 0xCD	; 205
    14fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN11EepromClass18addContactToEepromEPcS0_>
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	43 c0       	rjmp	.+134    	; 0x159c <_ZN15CmdContactClass13executeSmsCmdEv+0x16a>
		}else
		
		// clear eeprom
		if(strstr(smsMsg,"CMD_clear") != NULL){
    1516:	63 ed       	ldi	r22, 0xD3	; 211
    1518:	71 e0       	ldi	r23, 0x01	; 1
    151a:	c8 01       	movw	r24, r16
    151c:	0e 94 05 10 	call	0x200a	; 0x200a <strstr>
    1520:	89 2b       	or	r24, r25
    1522:	89 f0       	breq	.+34     	; 0x1546 <_ZN15CmdContactClass13executeSmsCmdEv+0x114>
			eeprom1->clearEeprom();										// clear eeprom
    1524:	07 5e       	subi	r16, 0xE7	; 231
    1526:	1e 4f       	sbci	r17, 0xFE	; 254
    1528:	d8 01       	movw	r26, r16
    152a:	8d 91       	ld	r24, X+
    152c:	9c 91       	ld	r25, X
    152e:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN11EepromClass11clearEepromEv>
			eeprom1->addContactToEeprom("Michael Streit", "786750902");	// add standard contact
    1532:	4d ed       	ldi	r20, 0xDD	; 221
    1534:	51 e0       	ldi	r21, 0x01	; 1
    1536:	67 ee       	ldi	r22, 0xE7	; 231
    1538:	71 e0       	ldi	r23, 0x01	; 1
    153a:	f8 01       	movw	r30, r16
    153c:	80 81       	ld	r24, Z
    153e:	91 81       	ldd	r25, Z+1	; 0x01
    1540:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN11EepromClass18addContactToEepromEPcS0_>
    1544:	2b c0       	rjmp	.+86     	; 0x159c <_ZN15CmdContactClass13executeSmsCmdEv+0x16a>
		}else
		
		// display contacts
		if(strstr(smsMsg,"CMD_contacts") != NULL){
    1546:	66 ef       	ldi	r22, 0xF6	; 246
    1548:	71 e0       	ldi	r23, 0x01	; 1
    154a:	c8 01       	movw	r24, r16
    154c:	0e 94 05 10 	call	0x200a	; 0x200a <strstr>
    1550:	89 2b       	or	r24, r25
    1552:	b1 f0       	breq	.+44     	; 0x1580 <_ZN15CmdContactClass13executeSmsCmdEv+0x14e>
    1554:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1558:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    155c:	02 80       	ldd	r0, Z+2	; 0x02
    155e:	f3 81       	ldd	r31, Z+3	; 0x03
    1560:	e0 2d       	mov	r30, r0
    1562:	48 e1       	ldi	r20, 0x18	; 24
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	63 e0       	ldi	r22, 0x03	; 3
    1568:	72 e0       	ldi	r23, 0x02	; 2
    156a:	80 e8       	ldi	r24, 0x80	; 128
    156c:	93 e0       	ldi	r25, 0x03	; 3
    156e:	09 95       	icall
			Serial.write("Displays all Contacts: \n");				// display all contacts
			eeprom1->displayEeprom();
    1570:	f8 01       	movw	r30, r16
    1572:	e7 5e       	subi	r30, 0xE7	; 231
    1574:	fe 4f       	sbci	r31, 0xFE	; 254
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	0e 94 a6 0b 	call	0x174c	; 0x174c <_ZN11EepromClass13displayEepromEv>
    157e:	0e c0       	rjmp	.+28     	; 0x159c <_ZN15CmdContactClass13executeSmsCmdEv+0x16a>
    1580:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1584:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1588:	02 80       	ldd	r0, Z+2	; 0x02
    158a:	f3 81       	ldd	r31, Z+3	; 0x03
    158c:	e0 2d       	mov	r30, r0
    158e:	45 e1       	ldi	r20, 0x15	; 21
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	6c e1       	ldi	r22, 0x1C	; 28
    1594:	72 e0       	ldi	r23, 0x02	; 2
    1596:	80 e8       	ldi	r24, 0x80	; 128
    1598:	93 e0       	ldi	r25, 0x03	; 3
    159a:	09 95       	icall
			}else{
			Serial.write("No Command received \n");					// if no cmd was received
		}
	}
	newSmsReceived == false;
}
    159c:	c2 59       	subi	r28, 0x92	; 146
    159e:	df 4f       	sbci	r29, 0xFF	; 255
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	08 95       	ret

000015bc <_ZN11EepromClassC1Ev>:
EepromClass::EepromClass()
{
} //EepromClass

// default destructor
EepromClass::~EepromClass()
    15bc:	08 95       	ret

000015be <_ZN11EepromClass16getEepromAddressEv>:
/*  History    : 31.03.2021  IO Created                                     */
/*                                                                          */
/*  File       : EepromClass.cpp											*/
/*                                                                          */
/****************************************************************************/
int EepromClass::getEepromAddress(){
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	c0 e0       	ldi	r28, 0x00	; 0
    15c4:	d0 e0       	ldi	r29, 0x00	; 0
    15c6:	ce 01       	movw	r24, r28
    15c8:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <eeprom_read_byte>
	for(int address=0; address < EEPROM.length();address++){
		if(EEPROM.read(address)== 0){
    15cc:	88 23       	and	r24, r24
    15ce:	41 f0       	breq	.+16     	; 0x15e0 <_ZN11EepromClass16getEepromAddressEv+0x22>
/*                                                                          */
/*  File       : EepromClass.cpp											*/
/*                                                                          */
/****************************************************************************/
int EepromClass::getEepromAddress(){
	for(int address=0; address < EEPROM.length();address++){
    15d0:	21 96       	adiw	r28, 0x01	; 1
    15d2:	c1 15       	cp	r28, r1
    15d4:	84 e0       	ldi	r24, 0x04	; 4
    15d6:	d8 07       	cpc	r29, r24
    15d8:	b1 f7       	brne	.-20     	; 0x15c6 <_ZN11EepromClass16getEepromAddressEv+0x8>
		if(EEPROM.read(address)== 0){
			return(address);
		}
	}
	return(EEPROM.length());
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	94 e0       	ldi	r25, 0x04	; 4
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <_ZN11EepromClass16getEepromAddressEv+0x26>
    15e0:	8c 2f       	mov	r24, r28
    15e2:	9d 2f       	mov	r25, r29
}
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <_ZN11EepromClass18addContactToEepromEPcS0_>:
/*  History    : 31.03.2021  IO Created                                     */
/*                                                                          */
/*  File       : EepromClass.cpp											*/
/*                                                                          */
/****************************************************************************/
void EepromClass::addContactToEeprom(char *newName, char *newPhoneNr){
    15ea:	af 92       	push	r10
    15ec:	bf 92       	push	r11
    15ee:	cf 92       	push	r12
    15f0:	df 92       	push	r13
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	e2 97       	sbiw	r28, 0x32	; 50
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	6b 01       	movw	r12, r22
    1610:	7a 01       	movw	r14, r20
	char cBuffer[50];
	int eepromAddress;
	
	eepromAddress = getEepromAddress();							// "Phone_Number0","Name0","Phone_Number1","Name1",...
    1612:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN11EepromClass16getEepromAddressEv>
    1616:	8c 01       	movw	r16, r24
	
	for(int i=0; newPhoneNr[i]!= NULL ; i++, eepromAddress++){	// until end of phone number is not reached
    1618:	f7 01       	movw	r30, r14
    161a:	60 81       	ld	r22, Z
    161c:	66 23       	and	r22, r22
    161e:	c9 f0       	breq	.+50     	; 0x1652 <_ZN11EepromClass18addContactToEepromEPcS0_+0x68>
    1620:	57 01       	movw	r10, r14
    1622:	ff ef       	ldi	r31, 0xFF	; 255
    1624:	af 1a       	sub	r10, r31
    1626:	bf 0a       	sbc	r11, r31
		if(eepromAddress < (EEPROM.length())){					// error if eeprom full
    1628:	01 15       	cp	r16, r1
    162a:	84 e0       	ldi	r24, 0x04	; 4
    162c:	18 07       	cpc	r17, r24
    162e:	20 f4       	brcc	.+8      	; 0x1638 <_ZN11EepromClass18addContactToEepromEPcS0_+0x4e>
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1630:	c8 01       	movw	r24, r16
    1632:	0e 94 da 12 	call	0x25b4	; 0x25b4 <eeprom_write_byte>
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <_ZN11EepromClass18addContactToEepromEPcS0_+0x5a>
			EEPROM.write(eepromAddress, newPhoneNr[i]);			// write phone number into eeprom
			}else{
			Serial.print("ERROR EEPROM is full");
    1638:	62 e3       	ldi	r22, 0x32	; 50
    163a:	72 e0       	ldi	r23, 0x02	; 2
    163c:	80 e8       	ldi	r24, 0x80	; 128
    163e:	93 e0       	ldi	r25, 0x03	; 3
    1640:	0e 94 08 03 	call	0x610	; 0x610 <_ZN5Print5printEPKc>
	char cBuffer[50];
	int eepromAddress;
	
	eepromAddress = getEepromAddress();							// "Phone_Number0","Name0","Phone_Number1","Name1",...
	
	for(int i=0; newPhoneNr[i]!= NULL ; i++, eepromAddress++){	// until end of phone number is not reached
    1644:	0f 5f       	subi	r16, 0xFF	; 255
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
    1648:	f5 01       	movw	r30, r10
    164a:	61 91       	ld	r22, Z+
    164c:	5f 01       	movw	r10, r30
    164e:	61 11       	cpse	r22, r1
    1650:	eb cf       	rjmp	.-42     	; 0x1628 <_ZN11EepromClass18addContactToEepromEPcS0_+0x3e>
    1652:	6c e2       	ldi	r22, 0x2C	; 44
    1654:	c8 01       	movw	r24, r16
    1656:	0e 94 da 12 	call	0x25b4	; 0x25b4 <eeprom_write_byte>
			}else{
			Serial.print("ERROR EEPROM is full");
		}
	}
	EEPROM.write(eepromAddress, ',');							// write delimiter
	eepromAddress++;
    165a:	0f 5f       	subi	r16, 0xFF	; 255
    165c:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(int i=0; newName[i] != NULL; i++, eepromAddress++){
    165e:	f6 01       	movw	r30, r12
    1660:	60 81       	ld	r22, Z
    1662:	66 23       	and	r22, r22
    1664:	c9 f0       	breq	.+50     	; 0x1698 <_ZN11EepromClass18addContactToEepromEPcS0_+0xae>
    1666:	56 01       	movw	r10, r12
    1668:	ff ef       	ldi	r31, 0xFF	; 255
    166a:	af 1a       	sub	r10, r31
    166c:	bf 0a       	sbc	r11, r31
		if(eepromAddress < (EEPROM.length())){					// error if eeprom full
    166e:	01 15       	cp	r16, r1
    1670:	84 e0       	ldi	r24, 0x04	; 4
    1672:	18 07       	cpc	r17, r24
    1674:	20 f4       	brcc	.+8      	; 0x167e <_ZN11EepromClass18addContactToEepromEPcS0_+0x94>
    1676:	c8 01       	movw	r24, r16
    1678:	0e 94 da 12 	call	0x25b4	; 0x25b4 <eeprom_write_byte>
    167c:	06 c0       	rjmp	.+12     	; 0x168a <_ZN11EepromClass18addContactToEepromEPcS0_+0xa0>
			EEPROM.write(eepromAddress, newName[i]);			// write Name into eeprom
			}else{
			Serial.print("ERROR EEPROM is full");
    167e:	62 e3       	ldi	r22, 0x32	; 50
    1680:	72 e0       	ldi	r23, 0x02	; 2
    1682:	80 e8       	ldi	r24, 0x80	; 128
    1684:	93 e0       	ldi	r25, 0x03	; 3
    1686:	0e 94 08 03 	call	0x610	; 0x610 <_ZN5Print5printEPKc>
		}
	}
	EEPROM.write(eepromAddress, ',');							// write delimiter
	eepromAddress++;
	
	for(int i=0; newName[i] != NULL; i++, eepromAddress++){
    168a:	0f 5f       	subi	r16, 0xFF	; 255
    168c:	1f 4f       	sbci	r17, 0xFF	; 255
    168e:	f5 01       	movw	r30, r10
    1690:	61 91       	ld	r22, Z+
    1692:	5f 01       	movw	r10, r30
    1694:	61 11       	cpse	r22, r1
    1696:	eb cf       	rjmp	.-42     	; 0x166e <_ZN11EepromClass18addContactToEepromEPcS0_+0x84>
    1698:	6c e2       	ldi	r22, 0x2C	; 44
    169a:	c8 01       	movw	r24, r16
    169c:	0e 94 da 12 	call	0x25b4	; 0x25b4 <eeprom_write_byte>
			Serial.print("ERROR EEPROM is full");
		}
	}
	EEPROM.write(eepromAddress, ',');							// write delimiter
	
	sprintf(cBuffer,"Added: %s, %s	to EEPROM \n\n",newPhoneNr,newName );
    16a0:	df 92       	push	r13
    16a2:	cf 92       	push	r12
    16a4:	ff 92       	push	r15
    16a6:	ef 92       	push	r14
    16a8:	87 e4       	ldi	r24, 0x47	; 71
    16aa:	92 e0       	ldi	r25, 0x02	; 2
    16ac:	9f 93       	push	r25
    16ae:	8f 93       	push	r24
    16b0:	8e 01       	movw	r16, r28
    16b2:	0f 5f       	subi	r16, 0xFF	; 255
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	1f 93       	push	r17
    16b8:	0f 93       	push	r16
    16ba:	0e 94 1f 10 	call	0x203e	; 0x203e <sprintf>
    16be:	f8 01       	movw	r30, r16
    16c0:	01 90       	ld	r0, Z+
    16c2:	00 20       	and	r0, r0
    16c4:	e9 f7       	brne	.-6      	; 0x16c0 <_ZN11EepromClass18addContactToEepromEPcS0_+0xd6>
    16c6:	31 97       	sbiw	r30, 0x01	; 1
    16c8:	af 01       	movw	r20, r30
    16ca:	40 1b       	sub	r20, r16
    16cc:	51 0b       	sbc	r21, r17
    16ce:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    16d2:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    16d6:	02 80       	ldd	r0, Z+2	; 0x02
    16d8:	f3 81       	ldd	r31, Z+3	; 0x03
    16da:	e0 2d       	mov	r30, r0
    16dc:	b8 01       	movw	r22, r16
    16de:	80 e8       	ldi	r24, 0x80	; 128
    16e0:	93 e0       	ldi	r25, 0x03	; 3
    16e2:	09 95       	icall
	Serial.write(cBuffer);
}
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	e2 96       	adiw	r28, 0x32	; 50
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	ff 90       	pop	r15
    1704:	ef 90       	pop	r14
    1706:	df 90       	pop	r13
    1708:	cf 90       	pop	r12
    170a:	bf 90       	pop	r11
    170c:	af 90       	pop	r10
    170e:	08 95       	ret

00001710 <_ZN11EepromClass11clearEepromEv>:
/*  History    : 31.03.2021  IO Created                                     */
/*                                                                          */
/*  File       : EepromClass.cpp											*/
/*                                                                          */
/****************************************************************************/
void EepromClass::clearEeprom(){
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	c0 e0       	ldi	r28, 0x00	; 0
    1716:	d0 e0       	ldi	r29, 0x00	; 0
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	ce 01       	movw	r24, r28
    171c:	0e 94 da 12 	call	0x25b4	; 0x25b4 <eeprom_write_byte>
	for (int i = 0 ; i < EEPROM.length() ; i++) {
    1720:	21 96       	adiw	r28, 0x01	; 1
    1722:	c1 15       	cp	r28, r1
    1724:	84 e0       	ldi	r24, 0x04	; 4
    1726:	d8 07       	cpc	r29, r24
    1728:	b9 f7       	brne	.-18     	; 0x1718 <_ZN11EepromClass11clearEepromEv+0x8>
    172a:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    172e:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1732:	02 80       	ldd	r0, Z+2	; 0x02
    1734:	f3 81       	ldd	r31, Z+3	; 0x03
    1736:	e0 2d       	mov	r30, r0
    1738:	40 e1       	ldi	r20, 0x10	; 16
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	62 e6       	ldi	r22, 0x62	; 98
    173e:	72 e0       	ldi	r23, 0x02	; 2
    1740:	80 e8       	ldi	r24, 0x80	; 128
    1742:	93 e0       	ldi	r25, 0x03	; 3
    1744:	09 95       	icall
		EEPROM.write(i, 0);
	}
	Serial.write("EEPROM cleared\n\n");
}
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <_ZN11EepromClass13displayEepromEv>:
/*  History    : 31.03.2021  IO Created                                     */
/*                                                                          */
/*  File       : EepromClass.cpp											*/
/*                                                                          */
/****************************************************************************/
void EepromClass::displayEeprom(){
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
	int delimiterCnt = 0;
	int eepromAddress;
	
	eepromAddress = getEepromAddress();
    1758:	0e 94 df 0a 	call	0x15be	; 0x15be <_ZN11EepromClass16getEepromAddressEv>
    175c:	7c 01       	movw	r14, r24
	for(int i= 0; i<eepromAddress; i++){	// display contact until end of eepromdata reached
    175e:	18 16       	cp	r1, r24
    1760:	19 06       	cpc	r1, r25
    1762:	44 f5       	brge	.+80     	; 0x17b4 <_ZN11EepromClass13displayEepromEv+0x68>
    1764:	c0 e0       	ldi	r28, 0x00	; 0
    1766:	d0 e0       	ldi	r29, 0x00	; 0
    1768:	00 e0       	ldi	r16, 0x00	; 0
    176a:	10 e0       	ldi	r17, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    176c:	ce 01       	movw	r24, r28
    176e:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <eeprom_read_byte>
		if(EEPROM.read(i)==','){			// check if Name or Number ended
    1772:	8c 32       	cpi	r24, 0x2C	; 44
    1774:	11 f4       	brne	.+4      	; 0x177a <_ZN11EepromClass13displayEepromEv+0x2e>
			delimiterCnt++;
    1776:	0f 5f       	subi	r16, 0xFF	; 255
    1778:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if(delimiterCnt>1){					// make new line for new contact
    177a:	02 30       	cpi	r16, 0x02	; 2
    177c:	11 05       	cpc	r17, r1
    177e:	8c f0       	brlt	.+34     	; 0x17a2 <_ZN11EepromClass13displayEepromEv+0x56>
    1780:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1784:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1788:	02 80       	ldd	r0, Z+2	; 0x02
    178a:	f3 81       	ldd	r31, Z+3	; 0x03
    178c:	e0 2d       	mov	r30, r0
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	6a e1       	ldi	r22, 0x1A	; 26
    1794:	73 e0       	ldi	r23, 0x03	; 3
    1796:	80 e8       	ldi	r24, 0x80	; 128
    1798:	93 e0       	ldi	r25, 0x03	; 3
    179a:	09 95       	icall
			Serial.write("\n");
			delimiterCnt = 0;
    179c:	00 e0       	ldi	r16, 0x00	; 0
    179e:	10 e0       	ldi	r17, 0x00	; 0
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <_ZN11EepromClass13displayEepromEv+0x60>
			}else{
			Serial.write(EEPROM.read(i));	// display Contact
    17a2:	68 2f       	mov	r22, r24
    17a4:	80 e8       	ldi	r24, 0x80	; 128
    17a6:	93 e0       	ldi	r25, 0x03	; 3
    17a8:	0e 94 2b 01 	call	0x256	; 0x256 <_ZN14HardwareSerial5writeEh>
void EepromClass::displayEeprom(){
	int delimiterCnt = 0;
	int eepromAddress;
	
	eepromAddress = getEepromAddress();
	for(int i= 0; i<eepromAddress; i++){	// display contact until end of eepromdata reached
    17ac:	21 96       	adiw	r28, 0x01	; 1
    17ae:	ec 16       	cp	r14, r28
    17b0:	fd 06       	cpc	r15, r29
    17b2:	e1 f6       	brne	.-72     	; 0x176c <_ZN11EepromClass13displayEepromEv+0x20>
			delimiterCnt = 0;
			}else{
			Serial.write(EEPROM.read(i));	// display Contact
		}
	}
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	08 95       	ret

000017c2 <_ZN21GsmCommunicationClass10readSerialEv>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 23.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void GsmCommunicationClass::readSerial(){
    17c2:	cf 92       	push	r12
    17c4:	df 92       	push	r13
    17c6:	ef 92       	push	r14
    17c8:	ff 92       	push	r15
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	8c 01       	movw	r16, r24
    17d4:	2f ef       	ldi	r18, 0xFF	; 255
    17d6:	81 ee       	ldi	r24, 0xE1	; 225
    17d8:	94 e0       	ldi	r25, 0x04	; 4
    17da:	21 50       	subi	r18, 0x01	; 1
    17dc:	80 40       	sbci	r24, 0x00	; 0
    17de:	90 40       	sbci	r25, 0x00	; 0
    17e0:	e1 f7       	brne	.-8      	; 0x17da <_ZN21GsmCommunicationClass10readSerialEv+0x18>
    17e2:	00 c0       	rjmp	.+0      	; 0x17e4 <_ZN21GsmCommunicationClass10readSerialEv+0x22>
    17e4:	00 00       	nop
    17e6:	78 01       	movw	r14, r16
    17e8:	c8 01       	movw	r24, r16
    17ea:	93 95       	inc	r25
    17ec:	f8 01       	movw	r30, r16
	
	_delay_ms(100);
	
	// clear Buffer
	for(int u=0; u<bufferSize; u++){
		receiveBuffer[u] = '\0';
    17ee:	11 92       	st	Z+, r1
	bool somethingReceived = false;
	
	_delay_ms(100);
	
	// clear Buffer
	for(int u=0; u<bufferSize; u++){
    17f0:	e8 17       	cp	r30, r24
    17f2:	f9 07       	cpc	r31, r25
    17f4:	e1 f7       	brne	.-8      	; 0x17ee <_ZN21GsmCommunicationClass10readSerialEv+0x2c>
		receiveBuffer[u] = '\0';
	}
	
	// fill Buffer
	if(GsmSerial->available()){
    17f6:	f8 01       	movw	r30, r16
    17f8:	ee 5f       	subi	r30, 0xFE	; 254
    17fa:	fe 4f       	sbci	r31, 0xFE	; 254
    17fc:	80 81       	ld	r24, Z
    17fe:	91 81       	ldd	r25, Z+1	; 0x01
    1800:	dc 01       	movw	r26, r24
    1802:	ed 91       	ld	r30, X+
    1804:	fc 91       	ld	r31, X
    1806:	00 84       	ldd	r0, Z+8	; 0x08
    1808:	f1 85       	ldd	r31, Z+9	; 0x09
    180a:	e0 2d       	mov	r30, r0
    180c:	09 95       	icall
    180e:	89 2b       	or	r24, r25
    1810:	c9 f1       	breq	.+114    	; 0x1884 <_ZN21GsmCommunicationClass10readSerialEv+0xc2>
    1812:	c0 e0       	ldi	r28, 0x00	; 0
    1814:	d0 e0       	ldi	r29, 0x00	; 0
		while(GsmSerial->available()){
    1816:	68 01       	movw	r12, r16
    1818:	be ef       	ldi	r27, 0xFE	; 254
    181a:	cb 1a       	sub	r12, r27
    181c:	db 0a       	sbc	r13, r27
    181e:	f6 01       	movw	r30, r12
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	dc 01       	movw	r26, r24
    1826:	ed 91       	ld	r30, X+
    1828:	fc 91       	ld	r31, X
    182a:	00 84       	ldd	r0, Z+8	; 0x08
    182c:	f1 85       	ldd	r31, Z+9	; 0x09
    182e:	e0 2d       	mov	r30, r0
    1830:	09 95       	icall
    1832:	89 2b       	or	r24, r25
    1834:	79 f0       	breq	.+30     	; 0x1854 <_ZN21GsmCommunicationClass10readSerialEv+0x92>
		receiveBuffer[i] = GsmSerial->read();
    1836:	f6 01       	movw	r30, r12
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	dc 01       	movw	r26, r24
    183e:	ed 91       	ld	r30, X+
    1840:	fc 91       	ld	r31, X
    1842:	02 84       	ldd	r0, Z+10	; 0x0a
    1844:	f3 85       	ldd	r31, Z+11	; 0x0b
    1846:	e0 2d       	mov	r30, r0
    1848:	09 95       	icall
    184a:	f7 01       	movw	r30, r14
    184c:	81 93       	st	Z+, r24
    184e:	7f 01       	movw	r14, r30
		i++;
    1850:	21 96       	adiw	r28, 0x01	; 1
		receiveBuffer[u] = '\0';
	}
	
	// fill Buffer
	if(GsmSerial->available()){
		while(GsmSerial->available()){
    1852:	e5 cf       	rjmp	.-54     	; 0x181e <_ZN21GsmCommunicationClass10readSerialEv+0x5c>
		receiveBuffer[i] = GsmSerial->read();
		i++;
		}
	
	// set end of string
	receiveBuffer[i] = '\0';
    1854:	c0 0f       	add	r28, r16
    1856:	d1 1f       	adc	r29, r17
    1858:	18 82       	st	Y, r1
	
	// print received Buffer
	Serial.write(receiveBuffer);
    185a:	f8 01       	movw	r30, r16
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    185c:	30 97       	sbiw	r30, 0x00	; 0
    185e:	91 f0       	breq	.+36     	; 0x1884 <_ZN21GsmCommunicationClass10readSerialEv+0xc2>
      return write((const uint8_t *)str, strlen(str));
    1860:	01 90       	ld	r0, Z+
    1862:	00 20       	and	r0, r0
    1864:	e9 f7       	brne	.-6      	; 0x1860 <_ZN21GsmCommunicationClass10readSerialEv+0x9e>
    1866:	31 97       	sbiw	r30, 0x01	; 1
    1868:	af 01       	movw	r20, r30
    186a:	40 1b       	sub	r20, r16
    186c:	51 0b       	sbc	r21, r17
    186e:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1872:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1876:	02 80       	ldd	r0, Z+2	; 0x02
    1878:	f3 81       	ldd	r31, Z+3	; 0x03
    187a:	e0 2d       	mov	r30, r0
    187c:	b8 01       	movw	r22, r16
    187e:	80 e8       	ldi	r24, 0x80	; 128
    1880:	93 e0       	ldi	r25, 0x03	; 3
    1882:	09 95       	icall
	}
}
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	ff 90       	pop	r15
    188e:	ef 90       	pop	r14
    1890:	df 90       	pop	r13
    1892:	cf 90       	pop	r12
    1894:	08 95       	ret

00001896 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 05.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
GsmCommunicationClass::GsmCommunicationClass(SoftwareSerial *NewGsmSerial)
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	ec 01       	movw	r28, r24
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	fe 01       	movw	r30, r28
    18a6:	9c 01       	movw	r18, r24
    18a8:	11 92       	st	Z+, r1
    18aa:	21 50       	subi	r18, 0x01	; 1
    18ac:	30 40       	sbci	r19, 0x00	; 0
    18ae:	e1 f7       	brne	.-8      	; 0x18a8 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x12>
    18b0:	fe 01       	movw	r30, r28
    18b2:	f3 95       	inc	r31
    18b4:	82 e3       	ldi	r24, 0x32	; 50
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
    18bc:	34 96       	adiw	r30, 0x04	; 4
    18be:	10 82       	st	Z, r1
    18c0:	31 96       	adiw	r30, 0x01	; 1
    18c2:	10 82       	st	Z, r1
    18c4:	31 96       	adiw	r30, 0x01	; 1
    18c6:	10 82       	st	Z, r1
{
	GsmSerial = NewGsmSerial;
    18c8:	8e 01       	movw	r16, r28
    18ca:	0e 5f       	subi	r16, 0xFE	; 254
    18cc:	1e 4f       	sbci	r17, 0xFE	; 254
    18ce:	f8 01       	movw	r30, r16
    18d0:	71 83       	std	Z+1, r23	; 0x01
    18d2:	60 83       	st	Z, r22
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    18d4:	26 e0       	ldi	r18, 0x06	; 6
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	55 e2       	ldi	r21, 0x25	; 37
    18da:	60 e0       	ldi	r22, 0x00	; 0
    18dc:	70 e0       	ldi	r23, 0x00	; 0
    18de:	80 e8       	ldi	r24, 0x80	; 128
    18e0:	93 e0       	ldi	r25, 0x03	; 3
    18e2:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial5beginEmh>
	
	// begin serial communication
	Serial.begin(BAUDRATE_DEBUG_SERIAL);		// for debugging with USB
	GsmSerial->begin(BAUDRATE_GSM_SERIAL);		// for GSM communication
    18e6:	40 e8       	ldi	r20, 0x80	; 128
    18e8:	55 e2       	ldi	r21, 0x25	; 37
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	f8 01       	movw	r30, r16
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN14SoftwareSerial5beginEl>
    18f8:	ff ef       	ldi	r31, 0xFF	; 255
    18fa:	23 ed       	ldi	r18, 0xD3	; 211
    18fc:	30 e3       	ldi	r19, 0x30	; 48
    18fe:	f1 50       	subi	r31, 0x01	; 1
    1900:	20 40       	sbci	r18, 0x00	; 0
    1902:	30 40       	sbci	r19, 0x00	; 0
    1904:	e1 f7       	brne	.-8      	; 0x18fe <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x68>
    1906:	00 c0       	rjmp	.+0      	; 0x1908 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x72>
    1908:	00 00       	nop
	
	_delay_ms(1000);
	
	GsmSerial->println("AT");	// AT Handshake with GSM
    190a:	63 e7       	ldi	r22, 0x73	; 115
    190c:	72 e0       	ldi	r23, 0x02	; 2
    190e:	f8 01       	movw	r30, r16
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	0e 94 32 03 	call	0x664	; 0x664 <_ZN5Print7printlnEPKc>
	readSerial();
    1918:	ce 01       	movw	r24, r28
    191a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN21GsmCommunicationClass10readSerialEv>
	
} //GsmCommunicationClass
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	08 95       	ret

00001928 <_ZN21GsmCommunicationClass12setUpSmsModeEv>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 23.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void GsmCommunicationClass::setUpSmsMode(){
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	ec 01       	movw	r28, r24
	GsmSerial->println("AT+CMGF=1");			// Configure TEXT mode
    1932:	8c 01       	movw	r16, r24
    1934:	0e 5f       	subi	r16, 0xFE	; 254
    1936:	1e 4f       	sbci	r17, 0xFE	; 254
    1938:	66 e7       	ldi	r22, 0x76	; 118
    193a:	72 e0       	ldi	r23, 0x02	; 2
    193c:	f8 01       	movw	r30, r16
    193e:	80 81       	ld	r24, Z
    1940:	91 81       	ldd	r25, Z+1	; 0x01
    1942:	0e 94 32 03 	call	0x664	; 0x664 <_ZN5Print7printlnEPKc>
	readSerial();
    1946:	ce 01       	movw	r24, r28
    1948:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN21GsmCommunicationClass10readSerialEv>
	
	GsmSerial->println("AT+CNMI=1,2,0,0,0");	// define how newly arrived SMS Msg. should be handled
    194c:	60 e8       	ldi	r22, 0x80	; 128
    194e:	72 e0       	ldi	r23, 0x02	; 2
    1950:	f8 01       	movw	r30, r16
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	0e 94 32 03 	call	0x664	; 0x664 <_ZN5Print7printlnEPKc>
	readSerial();
    195a:	ce 01       	movw	r24, r28
    195c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN21GsmCommunicationClass10readSerialEv>
	
	// check Answer
	if(strstr(receiveBuffer, "OK") != NULL){			// check if configured
    1960:	62 e9       	ldi	r22, 0x92	; 146
    1962:	72 e0       	ldi	r23, 0x02	; 2
    1964:	ce 01       	movw	r24, r28
    1966:	0e 94 05 10 	call	0x200a	; 0x200a <strstr>
    196a:	89 2b       	or	r24, r25
    196c:	b1 f0       	breq	.+44     	; 0x199a <_ZN21GsmCommunicationClass12setUpSmsModeEv+0x72>
    196e:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1972:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1976:	02 80       	ldd	r0, Z+2	; 0x02
    1978:	f3 81       	ldd	r31, Z+3	; 0x03
    197a:	e0 2d       	mov	r30, r0
    197c:	48 e1       	ldi	r20, 0x18	; 24
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	65 e9       	ldi	r22, 0x95	; 149
    1982:	72 e0       	ldi	r23, 0x02	; 2
    1984:	80 e8       	ldi	r24, 0x80	; 128
    1986:	93 e0       	ldi	r25, 0x03	; 3
    1988:	09 95       	icall
		Serial.write("SMS Mode is configured\n\n");
		gsmIsConnectedOld = gsmIsConnected;
    198a:	fe 01       	movw	r30, r28
    198c:	eb 5f       	subi	r30, 0xFB	; 251
    198e:	fe 4f       	sbci	r31, 0xFE	; 254
    1990:	cc 5f       	subi	r28, 0xFC	; 252
    1992:	de 4f       	sbci	r29, 0xFE	; 254
    1994:	88 81       	ld	r24, Y
    1996:	80 83       	st	Z, r24
    1998:	24 c0       	rjmp	.+72     	; 0x19e2 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0xba>
	}else if(strstr(receiveBuffer, "ERROR")){	
    199a:	6e ea       	ldi	r22, 0xAE	; 174
    199c:	72 e0       	ldi	r23, 0x02	; 2
    199e:	ce 01       	movw	r24, r28
    19a0:	0e 94 05 10 	call	0x200a	; 0x200a <strstr>
    19a4:	89 2b       	or	r24, r25
    19a6:	79 f0       	breq	.+30     	; 0x19c6 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0x9e>
    19a8:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    19ac:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    19b0:	02 80       	ldd	r0, Z+2	; 0x02
    19b2:	f3 81       	ldd	r31, Z+3	; 0x03
    19b4:	e0 2d       	mov	r30, r0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	64 eb       	ldi	r22, 0xB4	; 180
    19bc:	72 e0       	ldi	r23, 0x02	; 2
    19be:	80 e8       	ldi	r24, 0x80	; 128
    19c0:	93 e0       	ldi	r25, 0x03	; 3
    19c2:	09 95       	icall
    19c4:	0e c0       	rjmp	.+28     	; 0x19e2 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0xba>
    19c6:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    19ca:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    19ce:	02 80       	ldd	r0, Z+2	; 0x02
    19d0:	f3 81       	ldd	r31, Z+3	; 0x03
    19d2:	e0 2d       	mov	r30, r0
    19d4:	41 e2       	ldi	r20, 0x21	; 33
    19d6:	50 e0       	ldi	r21, 0x00	; 0
    19d8:	65 ed       	ldi	r22, 0xD5	; 213
    19da:	72 e0       	ldi	r23, 0x02	; 2
    19dc:	80 e8       	ldi	r24, 0x80	; 128
    19de:	93 e0       	ldi	r25, 0x03	; 3
    19e0:	09 95       	icall
		Serial.write("ERROR in SMS mode configuration\n");
	}else{
		Serial.write("No response in SMS configuration\n");
	}
}
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	08 95       	ret

000019ec <_ZN21GsmCommunicationClass15checkConnectionEv>:
/*                                                                           */
/*  History     : 23.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void GsmCommunicationClass::checkConnection()
{	
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
	if(loopCntConnection >= REP_CHECK_CONNECTION){			// define repetition rate
    19f4:	fc 01       	movw	r30, r24
    19f6:	f3 95       	inc	r31
    19f8:	20 81       	ld	r18, Z
    19fa:	31 81       	ldd	r19, Z+1	; 0x01
    19fc:	22 33       	cpi	r18, 0x32	; 50
    19fe:	31 05       	cpc	r19, r1
    1a00:	0c f4       	brge	.+2      	; 0x1a04 <_ZN21GsmCommunicationClass15checkConnectionEv+0x18>
    1a02:	4f c0       	rjmp	.+158    	; 0x1aa2 <_ZN21GsmCommunicationClass15checkConnectionEv+0xb6>
    1a04:	ec 01       	movw	r28, r24
		loopCntConnection = 0;
    1a06:	11 82       	std	Z+1, r1	; 0x01
    1a08:	10 82       	st	Z, r1
		
		if (GsmSerial->available()==0){
    1a0a:	32 96       	adiw	r30, 0x02	; 2
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	dc 01       	movw	r26, r24
    1a12:	ed 91       	ld	r30, X+
    1a14:	fc 91       	ld	r31, X
    1a16:	00 84       	ldd	r0, Z+8	; 0x08
    1a18:	f1 85       	ldd	r31, Z+9	; 0x09
    1a1a:	e0 2d       	mov	r30, r0
    1a1c:	09 95       	icall
    1a1e:	89 2b       	or	r24, r25
    1a20:	49 f4       	brne	.+18     	; 0x1a34 <_ZN21GsmCommunicationClass15checkConnectionEv+0x48>
			GsmSerial->println("AT+CREG?");					// ask if connected to cellular Network
    1a22:	67 ef       	ldi	r22, 0xF7	; 247
    1a24:	72 e0       	ldi	r23, 0x02	; 2
    1a26:	fe 01       	movw	r30, r28
    1a28:	ee 5f       	subi	r30, 0xFE	; 254
    1a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2c:	80 81       	ld	r24, Z
    1a2e:	91 81       	ldd	r25, Z+1	; 0x01
    1a30:	0e 94 32 03 	call	0x664	; 0x664 <_ZN5Print7printlnEPKc>
		}
		readSerial();										// read Answer
    1a34:	ce 01       	movw	r24, r28
    1a36:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN21GsmCommunicationClass10readSerialEv>
	
		if(strstr(receiveBuffer, "+CREG: 0,1") != NULL){	// check if connection was successful
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	73 e0       	ldi	r23, 0x03	; 3
    1a3e:	ce 01       	movw	r24, r28
    1a40:	0e 94 05 10 	call	0x200a	; 0x200a <strstr>
    1a44:	89 2b       	or	r24, r25
    1a46:	49 f1       	breq	.+82     	; 0x1a9a <_ZN21GsmCommunicationClass15checkConnectionEv+0xae>
			gsmIsConnected = true;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	8e 01       	movw	r16, r28
    1a4c:	0c 5f       	subi	r16, 0xFC	; 252
    1a4e:	1e 4f       	sbci	r17, 0xFE	; 254
    1a50:	f8 01       	movw	r30, r16
    1a52:	80 83       	st	Z, r24
    1a54:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1a58:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1a5c:	02 80       	ldd	r0, Z+2	; 0x02
    1a5e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a60:	e0 2d       	mov	r30, r0
    1a62:	40 e1       	ldi	r20, 0x10	; 16
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	6b e0       	ldi	r22, 0x0B	; 11
    1a68:	73 e0       	ldi	r23, 0x03	; 3
    1a6a:	80 e8       	ldi	r24, 0x80	; 128
    1a6c:	93 e0       	ldi	r25, 0x03	; 3
    1a6e:	09 95       	icall
			Serial.write("GSM Connected\n\n\n");			// print that connection is successful
			if(gsmIsConnected == true && gsmIsConnectedOld == false){
    1a70:	d8 01       	movw	r26, r16
    1a72:	8c 91       	ld	r24, X
    1a74:	88 23       	and	r24, r24
    1a76:	49 f0       	breq	.+18     	; 0x1a8a <_ZN21GsmCommunicationClass15checkConnectionEv+0x9e>
    1a78:	fe 01       	movw	r30, r28
    1a7a:	eb 5f       	subi	r30, 0xFB	; 251
    1a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7e:	80 81       	ld	r24, Z
    1a80:	81 11       	cpse	r24, r1
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <_ZN21GsmCommunicationClass15checkConnectionEv+0x9e>
				setUpSmsMode();								// set up Sms Mode if connected
    1a84:	ce 01       	movw	r24, r28
    1a86:	0e 94 94 0c 	call	0x1928	; 0x1928 <_ZN21GsmCommunicationClass12setUpSmsModeEv>
			}
			gsmIsConnectedOld = gsmIsConnected;
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	eb 5f       	subi	r30, 0xFB	; 251
    1a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a90:	cc 5f       	subi	r28, 0xFC	; 252
    1a92:	de 4f       	sbci	r29, 0xFE	; 254
    1a94:	88 81       	ld	r24, Y
    1a96:	80 83       	st	Z, r24
    1a98:	0a c0       	rjmp	.+20     	; 0x1aae <_ZN21GsmCommunicationClass15checkConnectionEv+0xc2>
			}else{
			gsmIsConnected = false;							// GSM is not connected
    1a9a:	cc 5f       	subi	r28, 0xFC	; 252
    1a9c:	de 4f       	sbci	r29, 0xFE	; 254
    1a9e:	18 82       	st	Y, r1
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <_ZN21GsmCommunicationClass15checkConnectionEv+0xc2>
		}
	}else{
		loopCntConnection++;
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	f3 95       	inc	r31
    1aa6:	2f 5f       	subi	r18, 0xFF	; 255
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	31 83       	std	Z+1, r19	; 0x01
    1aac:	20 83       	st	Z, r18
	}
}
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	08 95       	ret

00001ab8 <_ZN21GsmCommunicationClass9sendAtCmdEPc>:
/*                                                                           */
/*  History     : 23.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void GsmCommunicationClass::sendAtCmd(char atCmd[256]){
	GsmSerial->println(atCmd);
    1ab8:	8e 5f       	subi	r24, 0xFE	; 254
    1aba:	9e 4f       	sbci	r25, 0xFE	; 254
    1abc:	fc 01       	movw	r30, r24
    1abe:	80 81       	ld	r24, Z
    1ac0:	91 81       	ldd	r25, Z+1	; 0x01
    1ac2:	0e 94 32 03 	call	0x664	; 0x664 <_ZN5Print7printlnEPKc>
    1ac6:	08 95       	ret

00001ac8 <_ZN13GpioPortClassC1EPh>:
	PORTD	&= ~(1 << LOCK);		// clear bit
}

GpioPortClass::~GpioPortClass(void)
{
	*LedBase = 0;
    1ac8:	fc 01       	movw	r30, r24
    1aca:	12 82       	std	Z+2, r1	; 0x02
    1acc:	11 82       	std	Z+1, r1	; 0x01
    1ace:	74 83       	std	Z+4, r23	; 0x04
    1ad0:	63 83       	std	Z+3, r22	; 0x03
    1ad2:	15 82       	std	Z+5, r1	; 0x05
    1ad4:	16 82       	std	Z+6, r1	; 0x06
    1ad6:	17 82       	std	Z+7, r1	; 0x07
    1ad8:	10 86       	std	Z+8, r1	; 0x08
    1ada:	25 9a       	sbi	0x04, 5	; 4
    1adc:	2d 98       	cbi	0x05, 5	; 5
    1ade:	20 9a       	sbi	0x04, 0	; 4
    1ae0:	28 98       	cbi	0x05, 0	; 5
    1ae2:	55 9a       	sbi	0x0a, 5	; 10
    1ae4:	5d 98       	cbi	0x0b, 5	; 11
    1ae6:	08 95       	ret

00001ae8 <_ZN13GpioPortClass6SetLedEiNS_8LedStateE>:
/*                                                                           */
/*  History     : 10.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void GpioPortClass::SetLed(int LedNumber, LedState State)
{
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	fc 01       	movw	r30, r24
	if ((LedNumber >= 0) && (LedNumber <= MAX_LED-1)) {
    1aee:	68 30       	cpi	r22, 0x08	; 8
    1af0:	71 05       	cpc	r23, r1
    1af2:	70 f5       	brcc	.+92     	; 0x1b50 <_ZN13GpioPortClass6SetLedEiNS_8LedStateE+0x68>

		/* Find correct bitposition */
		unsigned long  Mask = 1 << (LedNumber);
    1af4:	01 e0       	ldi	r16, 0x01	; 1
    1af6:	10 e0       	ldi	r17, 0x00	; 0
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <_ZN13GpioPortClass6SetLedEiNS_8LedStateE+0x16>
    1afa:	00 0f       	add	r16, r16
    1afc:	11 1f       	adc	r17, r17
    1afe:	6a 95       	dec	r22
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <_ZN13GpioPortClass6SetLedEiNS_8LedStateE+0x12>
    1b02:	01 2e       	mov	r0, r17
    1b04:	00 0c       	add	r0, r0
    1b06:	22 0b       	sbc	r18, r18
    1b08:	33 0b       	sbc	r19, r19

		/* and clear or set bit according to State */
		if (State != OFF) {
    1b0a:	44 23       	and	r20, r20
    1b0c:	69 f0       	breq	.+26     	; 0x1b28 <_ZN13GpioPortClass6SetLedEiNS_8LedStateE+0x40>
			ShadowLedRegister |= Mask;
    1b0e:	85 81       	ldd	r24, Z+5	; 0x05
    1b10:	96 81       	ldd	r25, Z+6	; 0x06
    1b12:	a7 81       	ldd	r26, Z+7	; 0x07
    1b14:	b0 85       	ldd	r27, Z+8	; 0x08
    1b16:	08 2b       	or	r16, r24
    1b18:	19 2b       	or	r17, r25
    1b1a:	2a 2b       	or	r18, r26
    1b1c:	3b 2b       	or	r19, r27
    1b1e:	05 83       	std	Z+5, r16	; 0x05
    1b20:	16 83       	std	Z+6, r17	; 0x06
    1b22:	27 83       	std	Z+7, r18	; 0x07
    1b24:	30 87       	std	Z+8, r19	; 0x08
    1b26:	10 c0       	rjmp	.+32     	; 0x1b48 <_ZN13GpioPortClass6SetLedEiNS_8LedStateE+0x60>
			} else {
			ShadowLedRegister  &= ~Mask;
    1b28:	00 95       	com	r16
    1b2a:	10 95       	com	r17
    1b2c:	20 95       	com	r18
    1b2e:	30 95       	com	r19
    1b30:	85 81       	ldd	r24, Z+5	; 0x05
    1b32:	96 81       	ldd	r25, Z+6	; 0x06
    1b34:	a7 81       	ldd	r26, Z+7	; 0x07
    1b36:	b0 85       	ldd	r27, Z+8	; 0x08
    1b38:	08 23       	and	r16, r24
    1b3a:	19 23       	and	r17, r25
    1b3c:	2a 23       	and	r18, r26
    1b3e:	3b 23       	and	r19, r27
    1b40:	05 83       	std	Z+5, r16	; 0x05
    1b42:	16 83       	std	Z+6, r17	; 0x06
    1b44:	27 83       	std	Z+7, r18	; 0x07
    1b46:	30 87       	std	Z+8, r19	; 0x08
		}
		
		*LedBase = ShadowLedRegister;
    1b48:	a3 81       	ldd	r26, Z+3	; 0x03
    1b4a:	b4 81       	ldd	r27, Z+4	; 0x04
    1b4c:	85 81       	ldd	r24, Z+5	; 0x05
    1b4e:	8c 93       	st	X, r24
	}
}
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	08 95       	ret

00001b56 <_ZN13GpioPortClass9ToggleLedEi>:
/*                                                                           */
/*  History     : 10.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void GpioPortClass::ToggleLed(int LedNumber)
{
    1b56:	fc 01       	movw	r30, r24
	if(loopCntLed >= REP_TOGGLE_LED){						// defines the number of loops
    1b58:	81 81       	ldd	r24, Z+1	; 0x01
    1b5a:	92 81       	ldd	r25, Z+2	; 0x02
    1b5c:	18 16       	cp	r1, r24
    1b5e:	19 06       	cpc	r1, r25
    1b60:	0c f5       	brge	.+66     	; 0x1ba4 <_ZN13GpioPortClass9ToggleLedEi+0x4e>
		loopCntLed = 0;
    1b62:	12 82       	std	Z+2, r1	; 0x02
    1b64:	11 82       	std	Z+1, r1	; 0x01
		if ((LedNumber >= 0) && (LedNumber <= MAX_LED-1)) {
    1b66:	68 30       	cpi	r22, 0x08	; 8
    1b68:	71 05       	cpc	r23, r1
    1b6a:	f8 f4       	brcc	.+62     	; 0x1baa <_ZN13GpioPortClass9ToggleLedEi+0x54>

			/* Find correct bitposition */
			unsigned long  Mask = 1 << (LedNumber);

			/* and clear or set bit according to State */
			ShadowLedRegister ^= Mask;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <_ZN13GpioPortClass9ToggleLedEi+0x20>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	6a 95       	dec	r22
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <_ZN13GpioPortClass9ToggleLedEi+0x1c>
    1b7a:	09 2e       	mov	r0, r25
    1b7c:	00 0c       	add	r0, r0
    1b7e:	aa 0b       	sbc	r26, r26
    1b80:	bb 0b       	sbc	r27, r27
    1b82:	45 81       	ldd	r20, Z+5	; 0x05
    1b84:	56 81       	ldd	r21, Z+6	; 0x06
    1b86:	67 81       	ldd	r22, Z+7	; 0x07
    1b88:	70 85       	ldd	r23, Z+8	; 0x08
    1b8a:	84 27       	eor	r24, r20
    1b8c:	95 27       	eor	r25, r21
    1b8e:	a6 27       	eor	r26, r22
    1b90:	b7 27       	eor	r27, r23
    1b92:	85 83       	std	Z+5, r24	; 0x05
    1b94:	96 83       	std	Z+6, r25	; 0x06
    1b96:	a7 83       	std	Z+7, r26	; 0x07
    1b98:	b0 87       	std	Z+8, r27	; 0x08
			
			*LedBase = ShadowLedRegister;						// set the outputs
    1b9a:	03 80       	ldd	r0, Z+3	; 0x03
    1b9c:	f4 81       	ldd	r31, Z+4	; 0x04
    1b9e:	e0 2d       	mov	r30, r0
    1ba0:	80 83       	st	Z, r24
    1ba2:	08 95       	ret
		}
		}else{
		loopCntLed++;
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	92 83       	std	Z+2, r25	; 0x02
    1ba8:	81 83       	std	Z+1, r24	; 0x01
    1baa:	08 95       	ret

00001bac <_ZN15LockOpenerClass3OffEv>:
	int MyLed;
	
	public:
	LockOpenerClass(GpioPortClass *Parent, int LedNumber) : MyParent(Parent), MyLed(LedNumber) {};
	void On()    {MyParent->SetLed(MyLed, GpioPortClass::ON);};
	void Off()   {MyParent->SetLed(MyLed, GpioPortClass::OFF);};
    1bac:	fc 01       	movw	r30, r24
    1bae:	64 81       	ldd	r22, Z+4	; 0x04
    1bb0:	75 81       	ldd	r23, Z+5	; 0x05
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN13GpioPortClass6SetLedEiNS_8LedStateE>
    1bbc:	08 95       	ret

00001bbe <_ZN15LockOpenerClass2OnEv>:
	GpioPortClass *MyParent;
	int MyLed;
	
	public:
	LockOpenerClass(GpioPortClass *Parent, int LedNumber) : MyParent(Parent), MyLed(LedNumber) {};
	void On()    {MyParent->SetLed(MyLed, GpioPortClass::ON);};
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	64 81       	ldd	r22, Z+4	; 0x04
    1bc2:	75 81       	ldd	r23, Z+5	; 0x05
    1bc4:	41 e0       	ldi	r20, 0x01	; 1
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <_ZN13GpioPortClass6SetLedEiNS_8LedStateE>
    1bce:	08 95       	ret

00001bd0 <_ZN15LockOpenerClass6ToggleEv>:
	void Off()   {MyParent->SetLed(MyLed, GpioPortClass::OFF);};
	void Toggle(){MyParent->ToggleLed(MyLed);};
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	64 81       	ldd	r22, Z+4	; 0x04
    1bd4:	75 81       	ldd	r23, Z+5	; 0x05
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN13GpioPortClass9ToggleLedEi>
    1bde:	08 95       	ret

00001be0 <main_ArduinoLockOpener>:

/* Class procedure declaration */


// the loop function runs over and over again forever
void main_ArduinoLockOpener() {
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	ce 55       	subi	r28, 0x5E	; 94
    1bea:	d2 40       	sbci	r29, 0x02	; 2
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
	
	// create gsmSerial 
	SoftwareSerial GsmSerial(RX, TX); // RX TX
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	42 e0       	ldi	r20, 0x02	; 2
    1bfa:	63 e0       	ldi	r22, 0x03	; 3
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN14SoftwareSerialC1Ehhb>
	
	// create eeprom object
	EepromClass Eeprom1;
    1c04:	ce 01       	movw	r24, r28
    1c06:	80 96       	adiw	r24, 0x20	; 32
    1c08:	0e 94 de 0a 	call	0x15bc	; 0x15bc <_ZN11EepromClassC1Ev>
	
	GsmCommunicationClass GsmCommunication(&GsmSerial);
    1c0c:	be 01       	movw	r22, r28
    1c0e:	6f 5f       	subi	r22, 0xFF	; 255
    1c10:	7f 4f       	sbci	r23, 0xFF	; 255
    1c12:	ce 01       	movw	r24, r28
    1c14:	81 96       	adiw	r24, 0x21	; 33
    1c16:	0e 94 4b 0c 	call	0x1896	; 0x1896 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial>
	AuthorizationHandlerClass AuthorizationHandler(&GsmCommunication,&Eeprom1);
    1c1a:	ae 01       	movw	r20, r28
    1c1c:	40 5e       	subi	r20, 0xE0	; 224
    1c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c20:	be 01       	movw	r22, r28
    1c22:	6f 5d       	subi	r22, 0xDF	; 223
    1c24:	7f 4f       	sbci	r23, 0xFF	; 255
    1c26:	ce 01       	movw	r24, r28
    1c28:	88 5d       	subi	r24, 0xD8	; 216
    1c2a:	9e 4f       	sbci	r25, 0xFE	; 254
    1c2c:	0e 94 c5 08 	call	0x118a	; 0x118a <_ZN25AuthorizationHandlerClassC1EP21GsmCommunicationClassP11EepromClass>
	CmdContactClass SmsHandler(&Eeprom1, &GsmCommunication, &AuthorizationHandler);
    1c30:	9e 01       	movw	r18, r28
    1c32:	28 5d       	subi	r18, 0xD8	; 216
    1c34:	3e 4f       	sbci	r19, 0xFE	; 254
    1c36:	ae 01       	movw	r20, r28
    1c38:	4f 5d       	subi	r20, 0xDF	; 223
    1c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3c:	be 01       	movw	r22, r28
    1c3e:	60 5e       	subi	r22, 0xE0	; 224
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	ce 01       	movw	r24, r28
    1c44:	84 5d       	subi	r24, 0xD4	; 212
    1c46:	9e 4f       	sbci	r25, 0xFE	; 254
    1c48:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN15CmdContactClassC1EP11EepromClassP21GsmCommunicationClassP25AuthorizationHandlerClass>

	// clera Eeprom and add standard contacts
	Eeprom1.clearEeprom();
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	80 96       	adiw	r24, 0x20	; 32
    1c50:	0e 94 88 0b 	call	0x1710	; 0x1710 <_ZN11EepromClass11clearEepromEv>
	
	Eeprom1.addContactToEeprom("Michael Streit","786750902");
    1c54:	4d ed       	ldi	r20, 0xDD	; 221
    1c56:	51 e0       	ldi	r21, 0x01	; 1
    1c58:	67 ee       	ldi	r22, 0xE7	; 231
    1c5a:	71 e0       	ldi	r23, 0x01	; 1
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	80 96       	adiw	r24, 0x20	; 32
    1c60:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <_ZN11EepromClass18addContactToEepromEPcS0_>
	//Eeprom1.addContactToEeprom("Hans","564418910");
	//Eeprom1.addContactToEeprom("Anna","564418784");
	
	
    //DDRB = 0b00100000; // configure pin 7 of PORTB as output (digital pin 13 on the Arduino Mega2560) 
	GpioPortClass GpioPortB((uint8_t*)0x25);
    1c64:	8e 01       	movw	r16, r28
    1c66:	09 5b       	subi	r16, 0xB9	; 185
    1c68:	1d 4f       	sbci	r17, 0xFD	; 253
    1c6a:	65 e2       	ldi	r22, 0x25	; 37
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	c8 01       	movw	r24, r16
    1c70:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN13GpioPortClassC1EPh>
	GpioPortClass GpioPortD((uint8_t*)0x2B);
    1c74:	6b e2       	ldi	r22, 0x2B	; 43
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	ce 01       	movw	r24, r28
    1c7a:	80 5b       	subi	r24, 0xB0	; 176
    1c7c:	9d 4f       	sbci	r25, 0xFD	; 253
    1c7e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZN13GpioPortClassC1EPh>
{
	GpioPortClass *MyParent;
	int MyLed;
	
	public:
	LockOpenerClass(GpioPortClass *Parent, int LedNumber) : MyParent(Parent), MyLed(LedNumber) {};
    1c82:	87 e2       	ldi	r24, 0x27	; 39
    1c84:	93 e0       	ldi	r25, 0x03	; 3
    1c86:	c7 5a       	subi	r28, 0xA7	; 167
    1c88:	dd 4f       	sbci	r29, 0xFD	; 253
    1c8a:	99 83       	std	Y+1, r25	; 0x01
    1c8c:	88 83       	st	Y, r24
    1c8e:	c9 55       	subi	r28, 0x59	; 89
    1c90:	d2 40       	sbci	r29, 0x02	; 2
    1c92:	c5 5a       	subi	r28, 0xA5	; 165
    1c94:	dd 4f       	sbci	r29, 0xFD	; 253
    1c96:	19 83       	std	Y+1, r17	; 0x01
    1c98:	08 83       	st	Y, r16
    1c9a:	cb 55       	subi	r28, 0x5B	; 91
    1c9c:	d2 40       	sbci	r29, 0x02	; 2
    1c9e:	c3 5a       	subi	r28, 0xA3	; 163
    1ca0:	dd 4f       	sbci	r29, 0xFD	; 253
    1ca2:	19 82       	std	Y+1, r1	; 0x01
    1ca4:	18 82       	st	Y, r1
    1ca6:	cd 55       	subi	r28, 0x5D	; 93
    1ca8:	d2 40       	sbci	r29, 0x02	; 2
    1caa:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1cae:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1cb2:	02 80       	ldd	r0, Z+2	; 0x02
    1cb4:	f3 81       	ldd	r31, Z+3	; 0x03
    1cb6:	e0 2d       	mov	r30, r0
    1cb8:	46 e0       	ldi	r20, 0x06	; 6
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	6c e1       	ldi	r22, 0x1C	; 28
    1cbe:	73 e0       	ldi	r23, 0x03	; 3
    1cc0:	80 e8       	ldi	r24, 0x80	; 128
    1cc2:	93 e0       	ldi	r25, 0x03	; 3
    1cc4:	09 95       	icall
    1cc6:	2f ef       	ldi	r18, 0xFF	; 255
    1cc8:	83 ed       	ldi	r24, 0xD3	; 211
    1cca:	90 e3       	ldi	r25, 0x30	; 48
    1ccc:	21 50       	subi	r18, 0x01	; 1
    1cce:	80 40       	sbci	r24, 0x00	; 0
    1cd0:	90 40       	sbci	r25, 0x00	; 0
    1cd2:	e1 f7       	brne	.-8      	; 0x1ccc <main_ArduinoLockOpener+0xec>
    1cd4:	00 c0       	rjmp	.+0      	; 0x1cd6 <main_ArduinoLockOpener+0xf6>
    1cd6:	00 00       	nop
	Serial.write("Start\n");
	_delay_ms(1000);
	

    for(;;){
		GsmCommunication.checkConnection();	
    1cd8:	ce 01       	movw	r24, r28
    1cda:	81 96       	adiw	r24, 0x21	; 33
    1cdc:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <_ZN21GsmCommunicationClass15checkConnectionEv>
		GsmCommunication.readSerial();	
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	81 96       	adiw	r24, 0x21	; 33
    1ce4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <_ZN21GsmCommunicationClass10readSerialEv>
		SmsHandler.handleReceivedSms();
    1ce8:	ce 01       	movw	r24, r28
    1cea:	84 5d       	subi	r24, 0xD4	; 212
    1cec:	9e 4f       	sbci	r25, 0xFE	; 254
    1cee:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <_ZN15SmsHandlerClass17handleReceivedSmsEv>
		SmsHandler.executeSmsCmd();
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	84 5d       	subi	r24, 0xD4	; 212
    1cf6:	9e 4f       	sbci	r25, 0xFE	; 254
    1cf8:	0e 94 19 0a 	call	0x1432	; 0x1432 <_ZN15CmdContactClass13executeSmsCmdEv>
		AuthorizationHandler.handleReceivedCall(&LockRepresentationLed);
    1cfc:	be 01       	movw	r22, r28
    1cfe:	67 5a       	subi	r22, 0xA7	; 167
    1d00:	7d 4f       	sbci	r23, 0xFD	; 253
    1d02:	ce 01       	movw	r24, r28
    1d04:	88 5d       	subi	r24, 0xD8	; 216
    1d06:	9e 4f       	sbci	r25, 0xFE	; 254
    1d08:	0e 94 86 09 	call	0x130c	; 0x130c <_ZN25AuthorizationHandlerClass18handleReceivedCallEP15LockOpenerClass>
	   
	   public:
      GPIOLedClass(GpioPortClass *Parent, int LedNumber) : MyParent(Parent), MyLed(LedNumber) {};
      void On()    {MyParent->SetLed(MyLed, GpioPortClass::ON);};
      void Off()   {MyParent->SetLed(MyLed, GpioPortClass::OFF);};
      void Toggle(){MyParent->ToggleLed(MyLed);};
    1d0c:	65 e0       	ldi	r22, 0x05	; 5
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	ce 01       	movw	r24, r28
    1d12:	89 5b       	subi	r24, 0xB9	; 185
    1d14:	9d 4f       	sbci	r25, 0xFD	; 253
    1d16:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <_ZN13GpioPortClass9ToggleLedEi>
    1d1a:	de cf       	rjmp	.-68     	; 0x1cd8 <main_ArduinoLockOpener+0xf8>

00001d1c <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>:
	GsmCommunication = NewGsmCommunication;
	AuthorizationHandler = NewAuthorizationHandler;
} //SmsHandlerClass

// default destructor
SmsHandlerClass::~SmsHandlerClass()
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	31 e0       	ldi	r19, 0x01	; 1
    1d20:	dc 01       	movw	r26, r24
    1d22:	f9 01       	movw	r30, r18
    1d24:	1d 92       	st	X+, r1
    1d26:	31 97       	sbiw	r30, 0x01	; 1
    1d28:	e9 f7       	brne	.-6      	; 0x1d24 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass+0x8>
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	f3 95       	inc	r31
    1d2e:	10 82       	st	Z, r1
    1d30:	31 96       	adiw	r30, 0x01	; 1
    1d32:	24 e1       	ldi	r18, 0x14	; 20
    1d34:	df 01       	movw	r26, r30
    1d36:	1d 92       	st	X+, r1
    1d38:	2a 95       	dec	r18
    1d3a:	e9 f7       	brne	.-6      	; 0x1d36 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass+0x1a>
    1d3c:	74 96       	adiw	r30, 0x14	; 20
    1d3e:	71 83       	std	Z+1, r23	; 0x01
    1d40:	60 83       	st	Z, r22
    1d42:	32 96       	adiw	r30, 0x02	; 2
    1d44:	51 83       	std	Z+1, r21	; 0x01
    1d46:	40 83       	st	Z, r20
    1d48:	08 95       	ret

00001d4a <_ZN15SmsHandlerClass7readSmsEPcS0_>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void SmsHandlerClass::readSms(char *target, char *buffer){
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	eb 01       	movw	r28, r22
    1d50:	fa 01       	movw	r30, r20
    1d52:	33 97       	sbiw	r30, 0x03	; 3
	int textStart = 0;
	int i = 0;
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	50 e0       	ldi	r21, 0x00	; 0
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void SmsHandlerClass::readSms(char *target, char *buffer){
	int textStart = 0;
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
		
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){ // trigger start of SMS message
			textStart = 1;
    1d5c:	71 e0       	ldi	r23, 0x01	; 1
    1d5e:	60 e0       	ldi	r22, 0x00	; 0
    1d60:	df 01       	movw	r26, r30
/*****************************************************************************/
void SmsHandlerClass::readSms(char *target, char *buffer){
	int textStart = 0;
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
    1d62:	83 81       	ldd	r24, Z+3	; 0x03
    1d64:	88 23       	and	r24, r24
    1d66:	b1 f0       	breq	.+44     	; 0x1d94 <_ZN15SmsHandlerClass7readSmsEPcS0_+0x4a>
    1d68:	31 96       	adiw	r30, 0x01	; 1
		
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){ // trigger start of SMS message
    1d6a:	9c 91       	ld	r25, X
    1d6c:	92 32       	cpi	r25, 0x22	; 34
    1d6e:	31 f4       	brne	.+12     	; 0x1d7c <_ZN15SmsHandlerClass7readSmsEPcS0_+0x32>
    1d70:	90 81       	ld	r25, Z
    1d72:	9d 30       	cpi	r25, 0x0D	; 13
    1d74:	19 f4       	brne	.+6      	; 0x1d7c <_ZN15SmsHandlerClass7readSmsEPcS0_+0x32>
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	9a 30       	cpi	r25, 0x0A	; 10
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <_ZN15SmsHandlerClass7readSmsEPcS0_+0x38>
    1d7c:	21 30       	cpi	r18, 0x01	; 1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	79 f7       	brne	.-34     	; 0x1d60 <_ZN15SmsHandlerClass7readSmsEPcS0_+0x16>
			textStart = 1;
			target[i]=buffer[u];		// copy sms msg into target
    1d82:	de 01       	movw	r26, r28
    1d84:	a4 0f       	add	r26, r20
    1d86:	b5 1f       	adc	r27, r21
    1d88:	8c 93       	st	X, r24
			i++;
    1d8a:	4f 5f       	subi	r20, 0xFF	; 255
    1d8c:	5f 4f       	sbci	r21, 0xFF	; 255
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
		
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){ // trigger start of SMS message
			textStart = 1;
    1d8e:	27 2f       	mov	r18, r23
    1d90:	36 2f       	mov	r19, r22
/*****************************************************************************/
void SmsHandlerClass::readSms(char *target, char *buffer){
	int textStart = 0;
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
    1d92:	e6 cf       	rjmp	.-52     	; 0x1d60 <_ZN15SmsHandlerClass7readSmsEPcS0_+0x16>
			textStart = 1;
			target[i]=buffer[u];		// copy sms msg into target
			i++;
		}
	}
	target[i]='\0';
    1d94:	fe 01       	movw	r30, r28
    1d96:	e4 0f       	add	r30, r20
    1d98:	f5 1f       	adc	r31, r21
    1d9a:	10 82       	st	Z, r1
    1d9c:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1da0:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1da4:	02 80       	ldd	r0, Z+2	; 0x02
    1da6:	f3 81       	ldd	r31, Z+3	; 0x03
    1da8:	e0 2d       	mov	r30, r0
    1daa:	40 e1       	ldi	r20, 0x10	; 16
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	6d e2       	ldi	r22, 0x2D	; 45
    1db0:	73 e0       	ldi	r23, 0x03	; 3
    1db2:	80 e8       	ldi	r24, 0x80	; 128
    1db4:	93 e0       	ldi	r25, 0x03	; 3
    1db6:	09 95       	icall
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1db8:	20 97       	sbiw	r28, 0x00	; 0
    1dba:	99 f0       	breq	.+38     	; 0x1de2 <_ZN15SmsHandlerClass7readSmsEPcS0_+0x98>
      return write((const uint8_t *)str, strlen(str));
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	01 90       	ld	r0, Z+
    1dc0:	00 20       	and	r0, r0
    1dc2:	e9 f7       	brne	.-6      	; 0x1dbe <_ZN15SmsHandlerClass7readSmsEPcS0_+0x74>
    1dc4:	31 97       	sbiw	r30, 0x01	; 1
    1dc6:	af 01       	movw	r20, r30
    1dc8:	4c 1b       	sub	r20, r28
    1dca:	5d 0b       	sbc	r21, r29
    1dcc:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1dd0:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1dd4:	02 80       	ldd	r0, Z+2	; 0x02
    1dd6:	f3 81       	ldd	r31, Z+3	; 0x03
    1dd8:	e0 2d       	mov	r30, r0
    1dda:	be 01       	movw	r22, r28
    1ddc:	80 e8       	ldi	r24, 0x80	; 128
    1dde:	93 e0       	ldi	r25, 0x03	; 3
    1de0:	09 95       	icall
    1de2:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1de6:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1dea:	02 80       	ldd	r0, Z+2	; 0x02
    1dec:	f3 81       	ldd	r31, Z+3	; 0x03
    1dee:	e0 2d       	mov	r30, r0
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	6a e1       	ldi	r22, 0x1A	; 26
    1df6:	73 e0       	ldi	r23, 0x03	; 3
    1df8:	80 e8       	ldi	r24, 0x80	; 128
    1dfa:	93 e0       	ldi	r25, 0x03	; 3
    1dfc:	09 95       	icall
	
	Serial.write("Readed SMS MSG: ");
	Serial.write(target);
	Serial.write("\n");
}
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	08 95       	ret

00001e04 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPcS0_>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void SmsHandlerClass::isolateSmsSenderPhoneNr(char* target, char *buffer){
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	ec 01       	movw	r28, r24
    1e0e:	8b 01       	movw	r16, r22
    1e10:	ca 01       	movw	r24, r20
	char *retBuf;
	int u = 0;
	retBuf = strstr(buffer,"+CMT:");		// find beginning of sms sender phone number
    1e12:	6e e3       	ldi	r22, 0x3E	; 62
    1e14:	73 e0       	ldi	r23, 0x03	; 3
    1e16:	0e 94 05 10 	call	0x200a	; 0x200a <strstr>
    1e1a:	fc 01       	movw	r30, r24
	if(retBuf != NULL){
    1e1c:	89 2b       	or	r24, r25
    1e1e:	b1 f0       	breq	.+44     	; 0x1e4c <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPcS0_+0x48>
		for(u=0; retBuf[u+7] !='\"';u++){	// fill Nr into variable until end of Nr reached
    1e20:	97 81       	ldd	r25, Z+7	; 0x07
    1e22:	92 32       	cpi	r25, 0x22	; 34
    1e24:	61 f0       	breq	.+24     	; 0x1e3e <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPcS0_+0x3a>
    1e26:	d8 01       	movw	r26, r16
    1e28:	38 96       	adiw	r30, 0x08	; 8
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
			target[u] = retBuf[u+7];
    1e2e:	9d 93       	st	X+, r25
void SmsHandlerClass::isolateSmsSenderPhoneNr(char* target, char *buffer){
	char *retBuf;
	int u = 0;
	retBuf = strstr(buffer,"+CMT:");		// find beginning of sms sender phone number
	if(retBuf != NULL){
		for(u=0; retBuf[u+7] !='\"';u++){	// fill Nr into variable until end of Nr reached
    1e30:	2f 5f       	subi	r18, 0xFF	; 255
    1e32:	3f 4f       	sbci	r19, 0xFF	; 255
    1e34:	a9 01       	movw	r20, r18
    1e36:	91 91       	ld	r25, Z+
    1e38:	92 32       	cpi	r25, 0x22	; 34
    1e3a:	c9 f7       	brne	.-14     	; 0x1e2e <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPcS0_+0x2a>
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPcS0_+0x3e>
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	50 e0       	ldi	r21, 0x00	; 0
			target[u] = retBuf[u+7];
		}
		target[u]='\0';
    1e42:	f8 01       	movw	r30, r16
    1e44:	e4 0f       	add	r30, r20
    1e46:	f5 1f       	adc	r31, r21
    1e48:	10 82       	st	Z, r1
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPcS0_+0x4c>
		}else{
		target[u]='\0';
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	10 82       	st	Z, r1
    1e50:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1e54:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1e58:	02 80       	ldd	r0, Z+2	; 0x02
    1e5a:	f3 81       	ldd	r31, Z+3	; 0x03
    1e5c:	e0 2d       	mov	r30, r0
    1e5e:	4c e0       	ldi	r20, 0x0C	; 12
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	64 e4       	ldi	r22, 0x44	; 68
    1e64:	73 e0       	ldi	r23, 0x03	; 3
    1e66:	80 e8       	ldi	r24, 0x80	; 128
    1e68:	93 e0       	ldi	r25, 0x03	; 3
    1e6a:	09 95       	icall
	}
	
	// Display SMS sender
	Serial.write("SMS sender: ");
	Serial.write(smsSenderNr);
    1e6c:	be 01       	movw	r22, r28
    1e6e:	6f 5f       	subi	r22, 0xFF	; 255
    1e70:	7e 4f       	sbci	r23, 0xFE	; 254
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1e72:	91 f0       	breq	.+36     	; 0x1e98 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPcS0_+0x94>
      return write((const uint8_t *)str, strlen(str));
    1e74:	fb 01       	movw	r30, r22
    1e76:	01 90       	ld	r0, Z+
    1e78:	00 20       	and	r0, r0
    1e7a:	e9 f7       	brne	.-6      	; 0x1e76 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPcS0_+0x72>
    1e7c:	31 97       	sbiw	r30, 0x01	; 1
    1e7e:	af 01       	movw	r20, r30
    1e80:	46 1b       	sub	r20, r22
    1e82:	57 0b       	sbc	r21, r23
    1e84:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1e88:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1e8c:	02 80       	ldd	r0, Z+2	; 0x02
    1e8e:	f3 81       	ldd	r31, Z+3	; 0x03
    1e90:	e0 2d       	mov	r30, r0
    1e92:	80 e8       	ldi	r24, 0x80	; 128
    1e94:	93 e0       	ldi	r25, 0x03	; 3
    1e96:	09 95       	icall
    1e98:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1e9c:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1ea0:	02 80       	ldd	r0, Z+2	; 0x02
    1ea2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ea4:	e0 2d       	mov	r30, r0
    1ea6:	42 e0       	ldi	r20, 0x02	; 2
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	69 e1       	ldi	r22, 0x19	; 25
    1eac:	73 e0       	ldi	r23, 0x03	; 3
    1eae:	80 e8       	ldi	r24, 0x80	; 128
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	09 95       	icall
	Serial.write("\n\n");
}
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	08 95       	ret

00001ebe <_ZN15SmsHandlerClass17handleReceivedSmsEv>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void SmsHandlerClass::handleReceivedSms(){
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	ec 01       	movw	r28, r24
	
	if(strstr(GsmCommunication->receiveBuffer,"+CMT:") != NULL){	// if SMS received
    1ec8:	fc 01       	movw	r30, r24
    1eca:	eb 5e       	subi	r30, 0xEB	; 235
    1ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ece:	00 81       	ld	r16, Z
    1ed0:	11 81       	ldd	r17, Z+1	; 0x01
    1ed2:	6e e3       	ldi	r22, 0x3E	; 62
    1ed4:	73 e0       	ldi	r23, 0x03	; 3
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	0e 94 05 10 	call	0x200a	; 0x200a <strstr>
    1edc:	89 2b       	or	r24, r25
    1ede:	f1 f1       	breq	.+124    	; 0x1f5c <_ZN15SmsHandlerClass17handleReceivedSmsEv+0x9e>
		
		isolateSmsSenderPhoneNr(smsSenderNr, GsmCommunication->receiveBuffer);
    1ee0:	a8 01       	movw	r20, r16
    1ee2:	8e 01       	movw	r16, r28
    1ee4:	0f 5f       	subi	r16, 0xFF	; 255
    1ee6:	1e 4f       	sbci	r17, 0xFE	; 254
    1ee8:	b8 01       	movw	r22, r16
    1eea:	ce 01       	movw	r24, r28
    1eec:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPcS0_>
		
		if(AuthorizationHandler->checkAuthorization(smsSenderNr) == 1){	// check if sms seder is authorized
    1ef0:	b8 01       	movw	r22, r16
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e9 5e       	subi	r30, 0xE9	; 233
    1ef6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef8:	80 81       	ld	r24, Z
    1efa:	91 81       	ldd	r25, Z+1	; 0x01
    1efc:	0e 94 cb 08 	call	0x1196	; 0x1196 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPc>
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	d9 f4       	brne	.+54     	; 0x1f3a <_ZN15SmsHandlerClass17handleReceivedSmsEv+0x7c>
    1f04:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1f08:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1f0c:	02 80       	ldd	r0, Z+2	; 0x02
    1f0e:	f3 81       	ldd	r31, Z+3	; 0x03
    1f10:	e0 2d       	mov	r30, r0
    1f12:	48 e1       	ldi	r20, 0x18	; 24
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	61 e5       	ldi	r22, 0x51	; 81
    1f18:	73 e0       	ldi	r23, 0x03	; 3
    1f1a:	80 e8       	ldi	r24, 0x80	; 128
    1f1c:	93 e0       	ldi	r25, 0x03	; 3
    1f1e:	09 95       	icall
			Serial.write("SMS sender AUTHORIZED !\n");
			
			
			readSms(smsMsg, GsmCommunication->receiveBuffer);			// read sms Msg out of the receive Buffer
    1f20:	fe 01       	movw	r30, r28
    1f22:	eb 5e       	subi	r30, 0xEB	; 235
    1f24:	fe 4f       	sbci	r31, 0xFE	; 254
    1f26:	40 81       	ld	r20, Z
    1f28:	51 81       	ldd	r21, Z+1	; 0x01
    1f2a:	be 01       	movw	r22, r28
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_ZN15SmsHandlerClass7readSmsEPcS0_>
			newSmsReceived = true;						// set flag for execute sms CMDs
    1f32:	d3 95       	inc	r29
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	88 83       	st	Y, r24
    1f38:	13 c0       	rjmp	.+38     	; 0x1f60 <_ZN15SmsHandlerClass17handleReceivedSmsEv+0xa2>
    1f3a:	e0 91 80 03 	lds	r30, 0x0380	; 0x800380 <__data_end>
    1f3e:	f0 91 81 03 	lds	r31, 0x0381	; 0x800381 <__data_end+0x1>
    1f42:	02 80       	ldd	r0, Z+2	; 0x02
    1f44:	f3 81       	ldd	r31, Z+3	; 0x03
    1f46:	e0 2d       	mov	r30, r0
    1f48:	45 e1       	ldi	r20, 0x15	; 21
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	6a e6       	ldi	r22, 0x6A	; 106
    1f4e:	73 e0       	ldi	r23, 0x03	; 3
    1f50:	80 e8       	ldi	r24, 0x80	; 128
    1f52:	93 e0       	ldi	r25, 0x03	; 3
    1f54:	09 95       	icall
			// handle sms commands
			}else{
			Serial.write("SMS sender DECLINED \n");
			newSmsReceived = false;			// set flag for execute Comands
    1f56:	d3 95       	inc	r29
    1f58:	18 82       	st	Y, r1
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <_ZN15SmsHandlerClass17handleReceivedSmsEv+0xa2>
		}
		}else{
		newSmsReceived = false;
    1f5c:	d3 95       	inc	r29
    1f5e:	18 82       	st	Y, r1
	}
}
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	08 95       	ret

00001f6a <__divmodhi4>:
    1f6a:	97 fb       	bst	r25, 7
    1f6c:	07 2e       	mov	r0, r23
    1f6e:	16 f4       	brtc	.+4      	; 0x1f74 <__divmodhi4+0xa>
    1f70:	00 94       	com	r0
    1f72:	07 d0       	rcall	.+14     	; 0x1f82 <__divmodhi4_neg1>
    1f74:	77 fd       	sbrc	r23, 7
    1f76:	09 d0       	rcall	.+18     	; 0x1f8a <__divmodhi4_neg2>
    1f78:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <__udivmodhi4>
    1f7c:	07 fc       	sbrc	r0, 7
    1f7e:	05 d0       	rcall	.+10     	; 0x1f8a <__divmodhi4_neg2>
    1f80:	3e f4       	brtc	.+14     	; 0x1f90 <__divmodhi4_exit>

00001f82 <__divmodhi4_neg1>:
    1f82:	90 95       	com	r25
    1f84:	81 95       	neg	r24
    1f86:	9f 4f       	sbci	r25, 0xFF	; 255
    1f88:	08 95       	ret

00001f8a <__divmodhi4_neg2>:
    1f8a:	70 95       	com	r23
    1f8c:	61 95       	neg	r22
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255

00001f90 <__divmodhi4_exit>:
    1f90:	08 95       	ret

00001f92 <__udivmodsi4>:
    1f92:	a1 e2       	ldi	r26, 0x21	; 33
    1f94:	1a 2e       	mov	r1, r26
    1f96:	aa 1b       	sub	r26, r26
    1f98:	bb 1b       	sub	r27, r27
    1f9a:	fd 01       	movw	r30, r26
    1f9c:	0d c0       	rjmp	.+26     	; 0x1fb8 <__udivmodsi4_ep>

00001f9e <__udivmodsi4_loop>:
    1f9e:	aa 1f       	adc	r26, r26
    1fa0:	bb 1f       	adc	r27, r27
    1fa2:	ee 1f       	adc	r30, r30
    1fa4:	ff 1f       	adc	r31, r31
    1fa6:	a2 17       	cp	r26, r18
    1fa8:	b3 07       	cpc	r27, r19
    1faa:	e4 07       	cpc	r30, r20
    1fac:	f5 07       	cpc	r31, r21
    1fae:	20 f0       	brcs	.+8      	; 0x1fb8 <__udivmodsi4_ep>
    1fb0:	a2 1b       	sub	r26, r18
    1fb2:	b3 0b       	sbc	r27, r19
    1fb4:	e4 0b       	sbc	r30, r20
    1fb6:	f5 0b       	sbc	r31, r21

00001fb8 <__udivmodsi4_ep>:
    1fb8:	66 1f       	adc	r22, r22
    1fba:	77 1f       	adc	r23, r23
    1fbc:	88 1f       	adc	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	1a 94       	dec	r1
    1fc2:	69 f7       	brne	.-38     	; 0x1f9e <__udivmodsi4_loop>
    1fc4:	60 95       	com	r22
    1fc6:	70 95       	com	r23
    1fc8:	80 95       	com	r24
    1fca:	90 95       	com	r25
    1fcc:	9b 01       	movw	r18, r22
    1fce:	ac 01       	movw	r20, r24
    1fd0:	bd 01       	movw	r22, r26
    1fd2:	cf 01       	movw	r24, r30
    1fd4:	08 95       	ret

00001fd6 <__udivmodhi4>:
    1fd6:	aa 1b       	sub	r26, r26
    1fd8:	bb 1b       	sub	r27, r27
    1fda:	51 e1       	ldi	r21, 0x11	; 17
    1fdc:	07 c0       	rjmp	.+14     	; 0x1fec <__udivmodhi4_ep>

00001fde <__udivmodhi4_loop>:
    1fde:	aa 1f       	adc	r26, r26
    1fe0:	bb 1f       	adc	r27, r27
    1fe2:	a6 17       	cp	r26, r22
    1fe4:	b7 07       	cpc	r27, r23
    1fe6:	10 f0       	brcs	.+4      	; 0x1fec <__udivmodhi4_ep>
    1fe8:	a6 1b       	sub	r26, r22
    1fea:	b7 0b       	sbc	r27, r23

00001fec <__udivmodhi4_ep>:
    1fec:	88 1f       	adc	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	5a 95       	dec	r21
    1ff2:	a9 f7       	brne	.-22     	; 0x1fde <__udivmodhi4_loop>
    1ff4:	80 95       	com	r24
    1ff6:	90 95       	com	r25
    1ff8:	bc 01       	movw	r22, r24
    1ffa:	cd 01       	movw	r24, r26
    1ffc:	08 95       	ret

00001ffe <__tablejump2__>:
    1ffe:	ee 0f       	add	r30, r30
    2000:	ff 1f       	adc	r31, r31
    2002:	05 90       	lpm	r0, Z+
    2004:	f4 91       	lpm	r31, Z
    2006:	e0 2d       	mov	r30, r0
    2008:	09 94       	ijmp

0000200a <strstr>:
    200a:	fb 01       	movw	r30, r22
    200c:	51 91       	ld	r21, Z+
    200e:	55 23       	and	r21, r21
    2010:	a9 f0       	breq	.+42     	; 0x203c <strstr+0x32>
    2012:	bf 01       	movw	r22, r30
    2014:	dc 01       	movw	r26, r24
    2016:	4d 91       	ld	r20, X+
    2018:	45 17       	cp	r20, r21
    201a:	41 11       	cpse	r20, r1
    201c:	e1 f7       	brne	.-8      	; 0x2016 <strstr+0xc>
    201e:	59 f4       	brne	.+22     	; 0x2036 <strstr+0x2c>
    2020:	cd 01       	movw	r24, r26
    2022:	01 90       	ld	r0, Z+
    2024:	00 20       	and	r0, r0
    2026:	49 f0       	breq	.+18     	; 0x203a <strstr+0x30>
    2028:	4d 91       	ld	r20, X+
    202a:	40 15       	cp	r20, r0
    202c:	41 11       	cpse	r20, r1
    202e:	c9 f3       	breq	.-14     	; 0x2022 <strstr+0x18>
    2030:	fb 01       	movw	r30, r22
    2032:	41 11       	cpse	r20, r1
    2034:	ef cf       	rjmp	.-34     	; 0x2014 <strstr+0xa>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	08 95       	ret

0000203e <sprintf>:
    203e:	ae e0       	ldi	r26, 0x0E	; 14
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e5 e2       	ldi	r30, 0x25	; 37
    2044:	f0 e1       	ldi	r31, 0x10	; 16
    2046:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__prologue_saves__+0x1c>
    204a:	0d 89       	ldd	r16, Y+21	; 0x15
    204c:	1e 89       	ldd	r17, Y+22	; 0x16
    204e:	86 e0       	ldi	r24, 0x06	; 6
    2050:	8c 83       	std	Y+4, r24	; 0x04
    2052:	1a 83       	std	Y+2, r17	; 0x02
    2054:	09 83       	std	Y+1, r16	; 0x01
    2056:	8f ef       	ldi	r24, 0xFF	; 255
    2058:	9f e7       	ldi	r25, 0x7F	; 127
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	ae 01       	movw	r20, r28
    2060:	47 5e       	subi	r20, 0xE7	; 231
    2062:	5f 4f       	sbci	r21, 0xFF	; 255
    2064:	6f 89       	ldd	r22, Y+23	; 0x17
    2066:	78 8d       	ldd	r23, Y+24	; 0x18
    2068:	ce 01       	movw	r24, r28
    206a:	01 96       	adiw	r24, 0x01	; 1
    206c:	0e 94 41 10 	call	0x2082	; 0x2082 <vfprintf>
    2070:	ef 81       	ldd	r30, Y+7	; 0x07
    2072:	f8 85       	ldd	r31, Y+8	; 0x08
    2074:	e0 0f       	add	r30, r16
    2076:	f1 1f       	adc	r31, r17
    2078:	10 82       	st	Z, r1
    207a:	2e 96       	adiw	r28, 0x0e	; 14
    207c:	e4 e0       	ldi	r30, 0x04	; 4
    207e:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__epilogue_restores__+0x1c>

00002082 <vfprintf>:
    2082:	ab e0       	ldi	r26, 0x0B	; 11
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e7 e4       	ldi	r30, 0x47	; 71
    2088:	f0 e1       	ldi	r31, 0x10	; 16
    208a:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__prologue_saves__>
    208e:	6c 01       	movw	r12, r24
    2090:	7b 01       	movw	r14, r22
    2092:	8a 01       	movw	r16, r20
    2094:	fc 01       	movw	r30, r24
    2096:	17 82       	std	Z+7, r1	; 0x07
    2098:	16 82       	std	Z+6, r1	; 0x06
    209a:	83 81       	ldd	r24, Z+3	; 0x03
    209c:	81 ff       	sbrs	r24, 1
    209e:	cc c1       	rjmp	.+920    	; 0x2438 <vfprintf+0x3b6>
    20a0:	ce 01       	movw	r24, r28
    20a2:	01 96       	adiw	r24, 0x01	; 1
    20a4:	3c 01       	movw	r6, r24
    20a6:	f6 01       	movw	r30, r12
    20a8:	93 81       	ldd	r25, Z+3	; 0x03
    20aa:	f7 01       	movw	r30, r14
    20ac:	93 fd       	sbrc	r25, 3
    20ae:	85 91       	lpm	r24, Z+
    20b0:	93 ff       	sbrs	r25, 3
    20b2:	81 91       	ld	r24, Z+
    20b4:	7f 01       	movw	r14, r30
    20b6:	88 23       	and	r24, r24
    20b8:	09 f4       	brne	.+2      	; 0x20bc <vfprintf+0x3a>
    20ba:	ba c1       	rjmp	.+884    	; 0x2430 <vfprintf+0x3ae>
    20bc:	85 32       	cpi	r24, 0x25	; 37
    20be:	39 f4       	brne	.+14     	; 0x20ce <vfprintf+0x4c>
    20c0:	93 fd       	sbrc	r25, 3
    20c2:	85 91       	lpm	r24, Z+
    20c4:	93 ff       	sbrs	r25, 3
    20c6:	81 91       	ld	r24, Z+
    20c8:	7f 01       	movw	r14, r30
    20ca:	85 32       	cpi	r24, 0x25	; 37
    20cc:	29 f4       	brne	.+10     	; 0x20d8 <vfprintf+0x56>
    20ce:	b6 01       	movw	r22, r12
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	0e 94 38 12 	call	0x2470	; 0x2470 <fputc>
    20d6:	e7 cf       	rjmp	.-50     	; 0x20a6 <vfprintf+0x24>
    20d8:	91 2c       	mov	r9, r1
    20da:	21 2c       	mov	r2, r1
    20dc:	31 2c       	mov	r3, r1
    20de:	ff e1       	ldi	r31, 0x1F	; 31
    20e0:	f3 15       	cp	r31, r3
    20e2:	d8 f0       	brcs	.+54     	; 0x211a <vfprintf+0x98>
    20e4:	8b 32       	cpi	r24, 0x2B	; 43
    20e6:	79 f0       	breq	.+30     	; 0x2106 <vfprintf+0x84>
    20e8:	38 f4       	brcc	.+14     	; 0x20f8 <vfprintf+0x76>
    20ea:	80 32       	cpi	r24, 0x20	; 32
    20ec:	79 f0       	breq	.+30     	; 0x210c <vfprintf+0x8a>
    20ee:	83 32       	cpi	r24, 0x23	; 35
    20f0:	a1 f4       	brne	.+40     	; 0x211a <vfprintf+0x98>
    20f2:	23 2d       	mov	r18, r3
    20f4:	20 61       	ori	r18, 0x10	; 16
    20f6:	1d c0       	rjmp	.+58     	; 0x2132 <vfprintf+0xb0>
    20f8:	8d 32       	cpi	r24, 0x2D	; 45
    20fa:	61 f0       	breq	.+24     	; 0x2114 <vfprintf+0x92>
    20fc:	80 33       	cpi	r24, 0x30	; 48
    20fe:	69 f4       	brne	.+26     	; 0x211a <vfprintf+0x98>
    2100:	23 2d       	mov	r18, r3
    2102:	21 60       	ori	r18, 0x01	; 1
    2104:	16 c0       	rjmp	.+44     	; 0x2132 <vfprintf+0xb0>
    2106:	83 2d       	mov	r24, r3
    2108:	82 60       	ori	r24, 0x02	; 2
    210a:	38 2e       	mov	r3, r24
    210c:	e3 2d       	mov	r30, r3
    210e:	e4 60       	ori	r30, 0x04	; 4
    2110:	3e 2e       	mov	r3, r30
    2112:	2a c0       	rjmp	.+84     	; 0x2168 <vfprintf+0xe6>
    2114:	f3 2d       	mov	r31, r3
    2116:	f8 60       	ori	r31, 0x08	; 8
    2118:	1d c0       	rjmp	.+58     	; 0x2154 <vfprintf+0xd2>
    211a:	37 fc       	sbrc	r3, 7
    211c:	2d c0       	rjmp	.+90     	; 0x2178 <vfprintf+0xf6>
    211e:	20 ed       	ldi	r18, 0xD0	; 208
    2120:	28 0f       	add	r18, r24
    2122:	2a 30       	cpi	r18, 0x0A	; 10
    2124:	40 f0       	brcs	.+16     	; 0x2136 <vfprintf+0xb4>
    2126:	8e 32       	cpi	r24, 0x2E	; 46
    2128:	b9 f4       	brne	.+46     	; 0x2158 <vfprintf+0xd6>
    212a:	36 fc       	sbrc	r3, 6
    212c:	81 c1       	rjmp	.+770    	; 0x2430 <vfprintf+0x3ae>
    212e:	23 2d       	mov	r18, r3
    2130:	20 64       	ori	r18, 0x40	; 64
    2132:	32 2e       	mov	r3, r18
    2134:	19 c0       	rjmp	.+50     	; 0x2168 <vfprintf+0xe6>
    2136:	36 fe       	sbrs	r3, 6
    2138:	06 c0       	rjmp	.+12     	; 0x2146 <vfprintf+0xc4>
    213a:	8a e0       	ldi	r24, 0x0A	; 10
    213c:	98 9e       	mul	r9, r24
    213e:	20 0d       	add	r18, r0
    2140:	11 24       	eor	r1, r1
    2142:	92 2e       	mov	r9, r18
    2144:	11 c0       	rjmp	.+34     	; 0x2168 <vfprintf+0xe6>
    2146:	ea e0       	ldi	r30, 0x0A	; 10
    2148:	2e 9e       	mul	r2, r30
    214a:	20 0d       	add	r18, r0
    214c:	11 24       	eor	r1, r1
    214e:	22 2e       	mov	r2, r18
    2150:	f3 2d       	mov	r31, r3
    2152:	f0 62       	ori	r31, 0x20	; 32
    2154:	3f 2e       	mov	r3, r31
    2156:	08 c0       	rjmp	.+16     	; 0x2168 <vfprintf+0xe6>
    2158:	8c 36       	cpi	r24, 0x6C	; 108
    215a:	21 f4       	brne	.+8      	; 0x2164 <vfprintf+0xe2>
    215c:	83 2d       	mov	r24, r3
    215e:	80 68       	ori	r24, 0x80	; 128
    2160:	38 2e       	mov	r3, r24
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <vfprintf+0xe6>
    2164:	88 36       	cpi	r24, 0x68	; 104
    2166:	41 f4       	brne	.+16     	; 0x2178 <vfprintf+0xf6>
    2168:	f7 01       	movw	r30, r14
    216a:	93 fd       	sbrc	r25, 3
    216c:	85 91       	lpm	r24, Z+
    216e:	93 ff       	sbrs	r25, 3
    2170:	81 91       	ld	r24, Z+
    2172:	7f 01       	movw	r14, r30
    2174:	81 11       	cpse	r24, r1
    2176:	b3 cf       	rjmp	.-154    	; 0x20de <vfprintf+0x5c>
    2178:	98 2f       	mov	r25, r24
    217a:	9f 7d       	andi	r25, 0xDF	; 223
    217c:	95 54       	subi	r25, 0x45	; 69
    217e:	93 30       	cpi	r25, 0x03	; 3
    2180:	28 f4       	brcc	.+10     	; 0x218c <vfprintf+0x10a>
    2182:	0c 5f       	subi	r16, 0xFC	; 252
    2184:	1f 4f       	sbci	r17, 0xFF	; 255
    2186:	9f e3       	ldi	r25, 0x3F	; 63
    2188:	99 83       	std	Y+1, r25	; 0x01
    218a:	0d c0       	rjmp	.+26     	; 0x21a6 <vfprintf+0x124>
    218c:	83 36       	cpi	r24, 0x63	; 99
    218e:	31 f0       	breq	.+12     	; 0x219c <vfprintf+0x11a>
    2190:	83 37       	cpi	r24, 0x73	; 115
    2192:	71 f0       	breq	.+28     	; 0x21b0 <vfprintf+0x12e>
    2194:	83 35       	cpi	r24, 0x53	; 83
    2196:	09 f0       	breq	.+2      	; 0x219a <vfprintf+0x118>
    2198:	59 c0       	rjmp	.+178    	; 0x224c <vfprintf+0x1ca>
    219a:	21 c0       	rjmp	.+66     	; 0x21de <vfprintf+0x15c>
    219c:	f8 01       	movw	r30, r16
    219e:	80 81       	ld	r24, Z
    21a0:	89 83       	std	Y+1, r24	; 0x01
    21a2:	0e 5f       	subi	r16, 0xFE	; 254
    21a4:	1f 4f       	sbci	r17, 0xFF	; 255
    21a6:	88 24       	eor	r8, r8
    21a8:	83 94       	inc	r8
    21aa:	91 2c       	mov	r9, r1
    21ac:	53 01       	movw	r10, r6
    21ae:	13 c0       	rjmp	.+38     	; 0x21d6 <vfprintf+0x154>
    21b0:	28 01       	movw	r4, r16
    21b2:	f2 e0       	ldi	r31, 0x02	; 2
    21b4:	4f 0e       	add	r4, r31
    21b6:	51 1c       	adc	r5, r1
    21b8:	f8 01       	movw	r30, r16
    21ba:	a0 80       	ld	r10, Z
    21bc:	b1 80       	ldd	r11, Z+1	; 0x01
    21be:	36 fe       	sbrs	r3, 6
    21c0:	03 c0       	rjmp	.+6      	; 0x21c8 <vfprintf+0x146>
    21c2:	69 2d       	mov	r22, r9
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <vfprintf+0x14a>
    21c8:	6f ef       	ldi	r22, 0xFF	; 255
    21ca:	7f ef       	ldi	r23, 0xFF	; 255
    21cc:	c5 01       	movw	r24, r10
    21ce:	0e 94 2d 12 	call	0x245a	; 0x245a <strnlen>
    21d2:	4c 01       	movw	r8, r24
    21d4:	82 01       	movw	r16, r4
    21d6:	f3 2d       	mov	r31, r3
    21d8:	ff 77       	andi	r31, 0x7F	; 127
    21da:	3f 2e       	mov	r3, r31
    21dc:	16 c0       	rjmp	.+44     	; 0x220a <vfprintf+0x188>
    21de:	28 01       	movw	r4, r16
    21e0:	22 e0       	ldi	r18, 0x02	; 2
    21e2:	42 0e       	add	r4, r18
    21e4:	51 1c       	adc	r5, r1
    21e6:	f8 01       	movw	r30, r16
    21e8:	a0 80       	ld	r10, Z
    21ea:	b1 80       	ldd	r11, Z+1	; 0x01
    21ec:	36 fe       	sbrs	r3, 6
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <vfprintf+0x174>
    21f0:	69 2d       	mov	r22, r9
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <vfprintf+0x178>
    21f6:	6f ef       	ldi	r22, 0xFF	; 255
    21f8:	7f ef       	ldi	r23, 0xFF	; 255
    21fa:	c5 01       	movw	r24, r10
    21fc:	0e 94 22 12 	call	0x2444	; 0x2444 <strnlen_P>
    2200:	4c 01       	movw	r8, r24
    2202:	f3 2d       	mov	r31, r3
    2204:	f0 68       	ori	r31, 0x80	; 128
    2206:	3f 2e       	mov	r3, r31
    2208:	82 01       	movw	r16, r4
    220a:	33 fc       	sbrc	r3, 3
    220c:	1b c0       	rjmp	.+54     	; 0x2244 <vfprintf+0x1c2>
    220e:	82 2d       	mov	r24, r2
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	88 16       	cp	r8, r24
    2214:	99 06       	cpc	r9, r25
    2216:	b0 f4       	brcc	.+44     	; 0x2244 <vfprintf+0x1c2>
    2218:	b6 01       	movw	r22, r12
    221a:	80 e2       	ldi	r24, 0x20	; 32
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 38 12 	call	0x2470	; 0x2470 <fputc>
    2222:	2a 94       	dec	r2
    2224:	f4 cf       	rjmp	.-24     	; 0x220e <vfprintf+0x18c>
    2226:	f5 01       	movw	r30, r10
    2228:	37 fc       	sbrc	r3, 7
    222a:	85 91       	lpm	r24, Z+
    222c:	37 fe       	sbrs	r3, 7
    222e:	81 91       	ld	r24, Z+
    2230:	5f 01       	movw	r10, r30
    2232:	b6 01       	movw	r22, r12
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 38 12 	call	0x2470	; 0x2470 <fputc>
    223a:	21 10       	cpse	r2, r1
    223c:	2a 94       	dec	r2
    223e:	21 e0       	ldi	r18, 0x01	; 1
    2240:	82 1a       	sub	r8, r18
    2242:	91 08       	sbc	r9, r1
    2244:	81 14       	cp	r8, r1
    2246:	91 04       	cpc	r9, r1
    2248:	71 f7       	brne	.-36     	; 0x2226 <vfprintf+0x1a4>
    224a:	e8 c0       	rjmp	.+464    	; 0x241c <vfprintf+0x39a>
    224c:	84 36       	cpi	r24, 0x64	; 100
    224e:	11 f0       	breq	.+4      	; 0x2254 <vfprintf+0x1d2>
    2250:	89 36       	cpi	r24, 0x69	; 105
    2252:	41 f5       	brne	.+80     	; 0x22a4 <vfprintf+0x222>
    2254:	f8 01       	movw	r30, r16
    2256:	37 fe       	sbrs	r3, 7
    2258:	07 c0       	rjmp	.+14     	; 0x2268 <vfprintf+0x1e6>
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	0c 5f       	subi	r16, 0xFC	; 252
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	08 c0       	rjmp	.+16     	; 0x2278 <vfprintf+0x1f6>
    2268:	60 81       	ld	r22, Z
    226a:	71 81       	ldd	r23, Z+1	; 0x01
    226c:	07 2e       	mov	r0, r23
    226e:	00 0c       	add	r0, r0
    2270:	88 0b       	sbc	r24, r24
    2272:	99 0b       	sbc	r25, r25
    2274:	0e 5f       	subi	r16, 0xFE	; 254
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	f3 2d       	mov	r31, r3
    227a:	ff 76       	andi	r31, 0x6F	; 111
    227c:	3f 2e       	mov	r3, r31
    227e:	97 ff       	sbrs	r25, 7
    2280:	09 c0       	rjmp	.+18     	; 0x2294 <vfprintf+0x212>
    2282:	90 95       	com	r25
    2284:	80 95       	com	r24
    2286:	70 95       	com	r23
    2288:	61 95       	neg	r22
    228a:	7f 4f       	sbci	r23, 0xFF	; 255
    228c:	8f 4f       	sbci	r24, 0xFF	; 255
    228e:	9f 4f       	sbci	r25, 0xFF	; 255
    2290:	f0 68       	ori	r31, 0x80	; 128
    2292:	3f 2e       	mov	r3, r31
    2294:	2a e0       	ldi	r18, 0x0A	; 10
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	a3 01       	movw	r20, r6
    229a:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__ultoa_invert>
    229e:	88 2e       	mov	r8, r24
    22a0:	86 18       	sub	r8, r6
    22a2:	45 c0       	rjmp	.+138    	; 0x232e <vfprintf+0x2ac>
    22a4:	85 37       	cpi	r24, 0x75	; 117
    22a6:	31 f4       	brne	.+12     	; 0x22b4 <vfprintf+0x232>
    22a8:	23 2d       	mov	r18, r3
    22aa:	2f 7e       	andi	r18, 0xEF	; 239
    22ac:	b2 2e       	mov	r11, r18
    22ae:	2a e0       	ldi	r18, 0x0A	; 10
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	25 c0       	rjmp	.+74     	; 0x22fe <vfprintf+0x27c>
    22b4:	93 2d       	mov	r25, r3
    22b6:	99 7f       	andi	r25, 0xF9	; 249
    22b8:	b9 2e       	mov	r11, r25
    22ba:	8f 36       	cpi	r24, 0x6F	; 111
    22bc:	c1 f0       	breq	.+48     	; 0x22ee <vfprintf+0x26c>
    22be:	18 f4       	brcc	.+6      	; 0x22c6 <vfprintf+0x244>
    22c0:	88 35       	cpi	r24, 0x58	; 88
    22c2:	79 f0       	breq	.+30     	; 0x22e2 <vfprintf+0x260>
    22c4:	b5 c0       	rjmp	.+362    	; 0x2430 <vfprintf+0x3ae>
    22c6:	80 37       	cpi	r24, 0x70	; 112
    22c8:	19 f0       	breq	.+6      	; 0x22d0 <vfprintf+0x24e>
    22ca:	88 37       	cpi	r24, 0x78	; 120
    22cc:	21 f0       	breq	.+8      	; 0x22d6 <vfprintf+0x254>
    22ce:	b0 c0       	rjmp	.+352    	; 0x2430 <vfprintf+0x3ae>
    22d0:	e9 2f       	mov	r30, r25
    22d2:	e0 61       	ori	r30, 0x10	; 16
    22d4:	be 2e       	mov	r11, r30
    22d6:	b4 fe       	sbrs	r11, 4
    22d8:	0d c0       	rjmp	.+26     	; 0x22f4 <vfprintf+0x272>
    22da:	fb 2d       	mov	r31, r11
    22dc:	f4 60       	ori	r31, 0x04	; 4
    22de:	bf 2e       	mov	r11, r31
    22e0:	09 c0       	rjmp	.+18     	; 0x22f4 <vfprintf+0x272>
    22e2:	34 fe       	sbrs	r3, 4
    22e4:	0a c0       	rjmp	.+20     	; 0x22fa <vfprintf+0x278>
    22e6:	29 2f       	mov	r18, r25
    22e8:	26 60       	ori	r18, 0x06	; 6
    22ea:	b2 2e       	mov	r11, r18
    22ec:	06 c0       	rjmp	.+12     	; 0x22fa <vfprintf+0x278>
    22ee:	28 e0       	ldi	r18, 0x08	; 8
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <vfprintf+0x27c>
    22f4:	20 e1       	ldi	r18, 0x10	; 16
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	02 c0       	rjmp	.+4      	; 0x22fe <vfprintf+0x27c>
    22fa:	20 e1       	ldi	r18, 0x10	; 16
    22fc:	32 e0       	ldi	r19, 0x02	; 2
    22fe:	f8 01       	movw	r30, r16
    2300:	b7 fe       	sbrs	r11, 7
    2302:	07 c0       	rjmp	.+14     	; 0x2312 <vfprintf+0x290>
    2304:	60 81       	ld	r22, Z
    2306:	71 81       	ldd	r23, Z+1	; 0x01
    2308:	82 81       	ldd	r24, Z+2	; 0x02
    230a:	93 81       	ldd	r25, Z+3	; 0x03
    230c:	0c 5f       	subi	r16, 0xFC	; 252
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	06 c0       	rjmp	.+12     	; 0x231e <vfprintf+0x29c>
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	0e 5f       	subi	r16, 0xFE	; 254
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	a3 01       	movw	r20, r6
    2320:	0e 94 74 12 	call	0x24e8	; 0x24e8 <__ultoa_invert>
    2324:	88 2e       	mov	r8, r24
    2326:	86 18       	sub	r8, r6
    2328:	fb 2d       	mov	r31, r11
    232a:	ff 77       	andi	r31, 0x7F	; 127
    232c:	3f 2e       	mov	r3, r31
    232e:	36 fe       	sbrs	r3, 6
    2330:	0d c0       	rjmp	.+26     	; 0x234c <vfprintf+0x2ca>
    2332:	23 2d       	mov	r18, r3
    2334:	2e 7f       	andi	r18, 0xFE	; 254
    2336:	a2 2e       	mov	r10, r18
    2338:	89 14       	cp	r8, r9
    233a:	58 f4       	brcc	.+22     	; 0x2352 <vfprintf+0x2d0>
    233c:	34 fe       	sbrs	r3, 4
    233e:	0b c0       	rjmp	.+22     	; 0x2356 <vfprintf+0x2d4>
    2340:	32 fc       	sbrc	r3, 2
    2342:	09 c0       	rjmp	.+18     	; 0x2356 <vfprintf+0x2d4>
    2344:	83 2d       	mov	r24, r3
    2346:	8e 7e       	andi	r24, 0xEE	; 238
    2348:	a8 2e       	mov	r10, r24
    234a:	05 c0       	rjmp	.+10     	; 0x2356 <vfprintf+0x2d4>
    234c:	b8 2c       	mov	r11, r8
    234e:	a3 2c       	mov	r10, r3
    2350:	03 c0       	rjmp	.+6      	; 0x2358 <vfprintf+0x2d6>
    2352:	b8 2c       	mov	r11, r8
    2354:	01 c0       	rjmp	.+2      	; 0x2358 <vfprintf+0x2d6>
    2356:	b9 2c       	mov	r11, r9
    2358:	a4 fe       	sbrs	r10, 4
    235a:	0f c0       	rjmp	.+30     	; 0x237a <vfprintf+0x2f8>
    235c:	fe 01       	movw	r30, r28
    235e:	e8 0d       	add	r30, r8
    2360:	f1 1d       	adc	r31, r1
    2362:	80 81       	ld	r24, Z
    2364:	80 33       	cpi	r24, 0x30	; 48
    2366:	21 f4       	brne	.+8      	; 0x2370 <vfprintf+0x2ee>
    2368:	9a 2d       	mov	r25, r10
    236a:	99 7e       	andi	r25, 0xE9	; 233
    236c:	a9 2e       	mov	r10, r25
    236e:	09 c0       	rjmp	.+18     	; 0x2382 <vfprintf+0x300>
    2370:	a2 fe       	sbrs	r10, 2
    2372:	06 c0       	rjmp	.+12     	; 0x2380 <vfprintf+0x2fe>
    2374:	b3 94       	inc	r11
    2376:	b3 94       	inc	r11
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <vfprintf+0x300>
    237a:	8a 2d       	mov	r24, r10
    237c:	86 78       	andi	r24, 0x86	; 134
    237e:	09 f0       	breq	.+2      	; 0x2382 <vfprintf+0x300>
    2380:	b3 94       	inc	r11
    2382:	a3 fc       	sbrc	r10, 3
    2384:	11 c0       	rjmp	.+34     	; 0x23a8 <vfprintf+0x326>
    2386:	a0 fe       	sbrs	r10, 0
    2388:	06 c0       	rjmp	.+12     	; 0x2396 <vfprintf+0x314>
    238a:	b2 14       	cp	r11, r2
    238c:	88 f4       	brcc	.+34     	; 0x23b0 <vfprintf+0x32e>
    238e:	28 0c       	add	r2, r8
    2390:	92 2c       	mov	r9, r2
    2392:	9b 18       	sub	r9, r11
    2394:	0e c0       	rjmp	.+28     	; 0x23b2 <vfprintf+0x330>
    2396:	b2 14       	cp	r11, r2
    2398:	60 f4       	brcc	.+24     	; 0x23b2 <vfprintf+0x330>
    239a:	b6 01       	movw	r22, r12
    239c:	80 e2       	ldi	r24, 0x20	; 32
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 38 12 	call	0x2470	; 0x2470 <fputc>
    23a4:	b3 94       	inc	r11
    23a6:	f7 cf       	rjmp	.-18     	; 0x2396 <vfprintf+0x314>
    23a8:	b2 14       	cp	r11, r2
    23aa:	18 f4       	brcc	.+6      	; 0x23b2 <vfprintf+0x330>
    23ac:	2b 18       	sub	r2, r11
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <vfprintf+0x332>
    23b0:	98 2c       	mov	r9, r8
    23b2:	21 2c       	mov	r2, r1
    23b4:	a4 fe       	sbrs	r10, 4
    23b6:	10 c0       	rjmp	.+32     	; 0x23d8 <vfprintf+0x356>
    23b8:	b6 01       	movw	r22, r12
    23ba:	80 e3       	ldi	r24, 0x30	; 48
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 38 12 	call	0x2470	; 0x2470 <fputc>
    23c2:	a2 fe       	sbrs	r10, 2
    23c4:	17 c0       	rjmp	.+46     	; 0x23f4 <vfprintf+0x372>
    23c6:	a1 fc       	sbrc	r10, 1
    23c8:	03 c0       	rjmp	.+6      	; 0x23d0 <vfprintf+0x34e>
    23ca:	88 e7       	ldi	r24, 0x78	; 120
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <vfprintf+0x352>
    23d0:	88 e5       	ldi	r24, 0x58	; 88
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	b6 01       	movw	r22, r12
    23d6:	0c c0       	rjmp	.+24     	; 0x23f0 <vfprintf+0x36e>
    23d8:	8a 2d       	mov	r24, r10
    23da:	86 78       	andi	r24, 0x86	; 134
    23dc:	59 f0       	breq	.+22     	; 0x23f4 <vfprintf+0x372>
    23de:	a1 fe       	sbrs	r10, 1
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <vfprintf+0x364>
    23e2:	8b e2       	ldi	r24, 0x2B	; 43
    23e4:	01 c0       	rjmp	.+2      	; 0x23e8 <vfprintf+0x366>
    23e6:	80 e2       	ldi	r24, 0x20	; 32
    23e8:	a7 fc       	sbrc	r10, 7
    23ea:	8d e2       	ldi	r24, 0x2D	; 45
    23ec:	b6 01       	movw	r22, r12
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0e 94 38 12 	call	0x2470	; 0x2470 <fputc>
    23f4:	89 14       	cp	r8, r9
    23f6:	38 f4       	brcc	.+14     	; 0x2406 <vfprintf+0x384>
    23f8:	b6 01       	movw	r22, r12
    23fa:	80 e3       	ldi	r24, 0x30	; 48
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 38 12 	call	0x2470	; 0x2470 <fputc>
    2402:	9a 94       	dec	r9
    2404:	f7 cf       	rjmp	.-18     	; 0x23f4 <vfprintf+0x372>
    2406:	8a 94       	dec	r8
    2408:	f3 01       	movw	r30, r6
    240a:	e8 0d       	add	r30, r8
    240c:	f1 1d       	adc	r31, r1
    240e:	80 81       	ld	r24, Z
    2410:	b6 01       	movw	r22, r12
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	0e 94 38 12 	call	0x2470	; 0x2470 <fputc>
    2418:	81 10       	cpse	r8, r1
    241a:	f5 cf       	rjmp	.-22     	; 0x2406 <vfprintf+0x384>
    241c:	22 20       	and	r2, r2
    241e:	09 f4       	brne	.+2      	; 0x2422 <vfprintf+0x3a0>
    2420:	42 ce       	rjmp	.-892    	; 0x20a6 <vfprintf+0x24>
    2422:	b6 01       	movw	r22, r12
    2424:	80 e2       	ldi	r24, 0x20	; 32
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	0e 94 38 12 	call	0x2470	; 0x2470 <fputc>
    242c:	2a 94       	dec	r2
    242e:	f6 cf       	rjmp	.-20     	; 0x241c <vfprintf+0x39a>
    2430:	f6 01       	movw	r30, r12
    2432:	86 81       	ldd	r24, Z+6	; 0x06
    2434:	97 81       	ldd	r25, Z+7	; 0x07
    2436:	02 c0       	rjmp	.+4      	; 0x243c <vfprintf+0x3ba>
    2438:	8f ef       	ldi	r24, 0xFF	; 255
    243a:	9f ef       	ldi	r25, 0xFF	; 255
    243c:	2b 96       	adiw	r28, 0x0b	; 11
    243e:	e2 e1       	ldi	r30, 0x12	; 18
    2440:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__epilogue_restores__>

00002444 <strnlen_P>:
    2444:	fc 01       	movw	r30, r24
    2446:	05 90       	lpm	r0, Z+
    2448:	61 50       	subi	r22, 0x01	; 1
    244a:	70 40       	sbci	r23, 0x00	; 0
    244c:	01 10       	cpse	r0, r1
    244e:	d8 f7       	brcc	.-10     	; 0x2446 <strnlen_P+0x2>
    2450:	80 95       	com	r24
    2452:	90 95       	com	r25
    2454:	8e 0f       	add	r24, r30
    2456:	9f 1f       	adc	r25, r31
    2458:	08 95       	ret

0000245a <strnlen>:
    245a:	fc 01       	movw	r30, r24
    245c:	61 50       	subi	r22, 0x01	; 1
    245e:	70 40       	sbci	r23, 0x00	; 0
    2460:	01 90       	ld	r0, Z+
    2462:	01 10       	cpse	r0, r1
    2464:	d8 f7       	brcc	.-10     	; 0x245c <strnlen+0x2>
    2466:	80 95       	com	r24
    2468:	90 95       	com	r25
    246a:	8e 0f       	add	r24, r30
    246c:	9f 1f       	adc	r25, r31
    246e:	08 95       	ret

00002470 <fputc>:
    2470:	0f 93       	push	r16
    2472:	1f 93       	push	r17
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	fb 01       	movw	r30, r22
    247a:	23 81       	ldd	r18, Z+3	; 0x03
    247c:	21 fd       	sbrc	r18, 1
    247e:	03 c0       	rjmp	.+6      	; 0x2486 <fputc+0x16>
    2480:	8f ef       	ldi	r24, 0xFF	; 255
    2482:	9f ef       	ldi	r25, 0xFF	; 255
    2484:	2c c0       	rjmp	.+88     	; 0x24de <fputc+0x6e>
    2486:	22 ff       	sbrs	r18, 2
    2488:	16 c0       	rjmp	.+44     	; 0x24b6 <fputc+0x46>
    248a:	46 81       	ldd	r20, Z+6	; 0x06
    248c:	57 81       	ldd	r21, Z+7	; 0x07
    248e:	24 81       	ldd	r18, Z+4	; 0x04
    2490:	35 81       	ldd	r19, Z+5	; 0x05
    2492:	42 17       	cp	r20, r18
    2494:	53 07       	cpc	r21, r19
    2496:	44 f4       	brge	.+16     	; 0x24a8 <fputc+0x38>
    2498:	a0 81       	ld	r26, Z
    249a:	b1 81       	ldd	r27, Z+1	; 0x01
    249c:	9d 01       	movw	r18, r26
    249e:	2f 5f       	subi	r18, 0xFF	; 255
    24a0:	3f 4f       	sbci	r19, 0xFF	; 255
    24a2:	31 83       	std	Z+1, r19	; 0x01
    24a4:	20 83       	st	Z, r18
    24a6:	8c 93       	st	X, r24
    24a8:	26 81       	ldd	r18, Z+6	; 0x06
    24aa:	37 81       	ldd	r19, Z+7	; 0x07
    24ac:	2f 5f       	subi	r18, 0xFF	; 255
    24ae:	3f 4f       	sbci	r19, 0xFF	; 255
    24b0:	37 83       	std	Z+7, r19	; 0x07
    24b2:	26 83       	std	Z+6, r18	; 0x06
    24b4:	14 c0       	rjmp	.+40     	; 0x24de <fputc+0x6e>
    24b6:	8b 01       	movw	r16, r22
    24b8:	ec 01       	movw	r28, r24
    24ba:	fb 01       	movw	r30, r22
    24bc:	00 84       	ldd	r0, Z+8	; 0x08
    24be:	f1 85       	ldd	r31, Z+9	; 0x09
    24c0:	e0 2d       	mov	r30, r0
    24c2:	09 95       	icall
    24c4:	89 2b       	or	r24, r25
    24c6:	e1 f6       	brne	.-72     	; 0x2480 <fputc+0x10>
    24c8:	d8 01       	movw	r26, r16
    24ca:	16 96       	adiw	r26, 0x06	; 6
    24cc:	8d 91       	ld	r24, X+
    24ce:	9c 91       	ld	r25, X
    24d0:	17 97       	sbiw	r26, 0x07	; 7
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	17 96       	adiw	r26, 0x07	; 7
    24d6:	9c 93       	st	X, r25
    24d8:	8e 93       	st	-X, r24
    24da:	16 97       	sbiw	r26, 0x06	; 6
    24dc:	ce 01       	movw	r24, r28
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	08 95       	ret

000024e8 <__ultoa_invert>:
    24e8:	fa 01       	movw	r30, r20
    24ea:	aa 27       	eor	r26, r26
    24ec:	28 30       	cpi	r18, 0x08	; 8
    24ee:	51 f1       	breq	.+84     	; 0x2544 <__ultoa_invert+0x5c>
    24f0:	20 31       	cpi	r18, 0x10	; 16
    24f2:	81 f1       	breq	.+96     	; 0x2554 <__ultoa_invert+0x6c>
    24f4:	e8 94       	clt
    24f6:	6f 93       	push	r22
    24f8:	6e 7f       	andi	r22, 0xFE	; 254
    24fa:	6e 5f       	subi	r22, 0xFE	; 254
    24fc:	7f 4f       	sbci	r23, 0xFF	; 255
    24fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2500:	9f 4f       	sbci	r25, 0xFF	; 255
    2502:	af 4f       	sbci	r26, 0xFF	; 255
    2504:	b1 e0       	ldi	r27, 0x01	; 1
    2506:	3e d0       	rcall	.+124    	; 0x2584 <__ultoa_invert+0x9c>
    2508:	b4 e0       	ldi	r27, 0x04	; 4
    250a:	3c d0       	rcall	.+120    	; 0x2584 <__ultoa_invert+0x9c>
    250c:	67 0f       	add	r22, r23
    250e:	78 1f       	adc	r23, r24
    2510:	89 1f       	adc	r24, r25
    2512:	9a 1f       	adc	r25, r26
    2514:	a1 1d       	adc	r26, r1
    2516:	68 0f       	add	r22, r24
    2518:	79 1f       	adc	r23, r25
    251a:	8a 1f       	adc	r24, r26
    251c:	91 1d       	adc	r25, r1
    251e:	a1 1d       	adc	r26, r1
    2520:	6a 0f       	add	r22, r26
    2522:	71 1d       	adc	r23, r1
    2524:	81 1d       	adc	r24, r1
    2526:	91 1d       	adc	r25, r1
    2528:	a1 1d       	adc	r26, r1
    252a:	20 d0       	rcall	.+64     	; 0x256c <__ultoa_invert+0x84>
    252c:	09 f4       	brne	.+2      	; 0x2530 <__ultoa_invert+0x48>
    252e:	68 94       	set
    2530:	3f 91       	pop	r19
    2532:	2a e0       	ldi	r18, 0x0A	; 10
    2534:	26 9f       	mul	r18, r22
    2536:	11 24       	eor	r1, r1
    2538:	30 19       	sub	r19, r0
    253a:	30 5d       	subi	r19, 0xD0	; 208
    253c:	31 93       	st	Z+, r19
    253e:	de f6       	brtc	.-74     	; 0x24f6 <__ultoa_invert+0xe>
    2540:	cf 01       	movw	r24, r30
    2542:	08 95       	ret
    2544:	46 2f       	mov	r20, r22
    2546:	47 70       	andi	r20, 0x07	; 7
    2548:	40 5d       	subi	r20, 0xD0	; 208
    254a:	41 93       	st	Z+, r20
    254c:	b3 e0       	ldi	r27, 0x03	; 3
    254e:	0f d0       	rcall	.+30     	; 0x256e <__ultoa_invert+0x86>
    2550:	c9 f7       	brne	.-14     	; 0x2544 <__ultoa_invert+0x5c>
    2552:	f6 cf       	rjmp	.-20     	; 0x2540 <__ultoa_invert+0x58>
    2554:	46 2f       	mov	r20, r22
    2556:	4f 70       	andi	r20, 0x0F	; 15
    2558:	40 5d       	subi	r20, 0xD0	; 208
    255a:	4a 33       	cpi	r20, 0x3A	; 58
    255c:	18 f0       	brcs	.+6      	; 0x2564 <__ultoa_invert+0x7c>
    255e:	49 5d       	subi	r20, 0xD9	; 217
    2560:	31 fd       	sbrc	r19, 1
    2562:	40 52       	subi	r20, 0x20	; 32
    2564:	41 93       	st	Z+, r20
    2566:	02 d0       	rcall	.+4      	; 0x256c <__ultoa_invert+0x84>
    2568:	a9 f7       	brne	.-22     	; 0x2554 <__ultoa_invert+0x6c>
    256a:	ea cf       	rjmp	.-44     	; 0x2540 <__ultoa_invert+0x58>
    256c:	b4 e0       	ldi	r27, 0x04	; 4
    256e:	a6 95       	lsr	r26
    2570:	97 95       	ror	r25
    2572:	87 95       	ror	r24
    2574:	77 95       	ror	r23
    2576:	67 95       	ror	r22
    2578:	ba 95       	dec	r27
    257a:	c9 f7       	brne	.-14     	; 0x256e <__ultoa_invert+0x86>
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	61 05       	cpc	r22, r1
    2580:	71 05       	cpc	r23, r1
    2582:	08 95       	ret
    2584:	9b 01       	movw	r18, r22
    2586:	ac 01       	movw	r20, r24
    2588:	0a 2e       	mov	r0, r26
    258a:	06 94       	lsr	r0
    258c:	57 95       	ror	r21
    258e:	47 95       	ror	r20
    2590:	37 95       	ror	r19
    2592:	27 95       	ror	r18
    2594:	ba 95       	dec	r27
    2596:	c9 f7       	brne	.-14     	; 0x258a <__ultoa_invert+0xa2>
    2598:	62 0f       	add	r22, r18
    259a:	73 1f       	adc	r23, r19
    259c:	84 1f       	adc	r24, r20
    259e:	95 1f       	adc	r25, r21
    25a0:	a0 1d       	adc	r26, r0
    25a2:	08 95       	ret

000025a4 <eeprom_read_byte>:
    25a4:	f9 99       	sbic	0x1f, 1	; 31
    25a6:	fe cf       	rjmp	.-4      	; 0x25a4 <eeprom_read_byte>
    25a8:	92 bd       	out	0x22, r25	; 34
    25aa:	81 bd       	out	0x21, r24	; 33
    25ac:	f8 9a       	sbi	0x1f, 0	; 31
    25ae:	99 27       	eor	r25, r25
    25b0:	80 b5       	in	r24, 0x20	; 32
    25b2:	08 95       	ret

000025b4 <eeprom_write_byte>:
    25b4:	26 2f       	mov	r18, r22

000025b6 <eeprom_write_r18>:
    25b6:	f9 99       	sbic	0x1f, 1	; 31
    25b8:	fe cf       	rjmp	.-4      	; 0x25b6 <eeprom_write_r18>
    25ba:	1f ba       	out	0x1f, r1	; 31
    25bc:	92 bd       	out	0x22, r25	; 34
    25be:	81 bd       	out	0x21, r24	; 33
    25c0:	20 bd       	out	0x20, r18	; 32
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	fa 9a       	sbi	0x1f, 2	; 31
    25c8:	f9 9a       	sbi	0x1f, 1	; 31
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	01 96       	adiw	r24, 0x01	; 1
    25ce:	08 95       	ret

000025d0 <__prologue_saves__>:
    25d0:	2f 92       	push	r2
    25d2:	3f 92       	push	r3
    25d4:	4f 92       	push	r4
    25d6:	5f 92       	push	r5
    25d8:	6f 92       	push	r6
    25da:	7f 92       	push	r7
    25dc:	8f 92       	push	r8
    25de:	9f 92       	push	r9
    25e0:	af 92       	push	r10
    25e2:	bf 92       	push	r11
    25e4:	cf 92       	push	r12
    25e6:	df 92       	push	r13
    25e8:	ef 92       	push	r14
    25ea:	ff 92       	push	r15
    25ec:	0f 93       	push	r16
    25ee:	1f 93       	push	r17
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	ca 1b       	sub	r28, r26
    25fa:	db 0b       	sbc	r29, r27
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	09 94       	ijmp

00002608 <__epilogue_restores__>:
    2608:	2a 88       	ldd	r2, Y+18	; 0x12
    260a:	39 88       	ldd	r3, Y+17	; 0x11
    260c:	48 88       	ldd	r4, Y+16	; 0x10
    260e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2610:	6e 84       	ldd	r6, Y+14	; 0x0e
    2612:	7d 84       	ldd	r7, Y+13	; 0x0d
    2614:	8c 84       	ldd	r8, Y+12	; 0x0c
    2616:	9b 84       	ldd	r9, Y+11	; 0x0b
    2618:	aa 84       	ldd	r10, Y+10	; 0x0a
    261a:	b9 84       	ldd	r11, Y+9	; 0x09
    261c:	c8 84       	ldd	r12, Y+8	; 0x08
    261e:	df 80       	ldd	r13, Y+7	; 0x07
    2620:	ee 80       	ldd	r14, Y+6	; 0x06
    2622:	fd 80       	ldd	r15, Y+5	; 0x05
    2624:	0c 81       	ldd	r16, Y+4	; 0x04
    2626:	1b 81       	ldd	r17, Y+3	; 0x03
    2628:	aa 81       	ldd	r26, Y+2	; 0x02
    262a:	b9 81       	ldd	r27, Y+1	; 0x01
    262c:	ce 0f       	add	r28, r30
    262e:	d1 1d       	adc	r29, r1
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	ed 01       	movw	r28, r26
    263c:	08 95       	ret

0000263e <_exit>:
    263e:	f8 94       	cli

00002640 <__stop_program>:
    2640:	ff cf       	rjmp	.-2      	; 0x2640 <__stop_program>
