
ArduinoLockOpener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b4  00800100  000023a8  0000243c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bb  008003b4  008003b4  000026f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a0  00000000  00000000  00002760  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000116d8  00000000  00000000  00002e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d03  00000000  00000000  000144d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000048d6  00000000  00000000  000181db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001228  00000000  00000000  0001cab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c2a  00000000  00000000  0001dcdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000659e  00000000  00000000  00021906  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000668  00000000  00000000  00027ea4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_1>
       8:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__vector_2>
       c:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_3>
      10:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_3>
      14:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_7>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_18>
      4c:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	Address 0x00000068 is out of bounds.
.word	0xffff	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	50 02       	muls	r21, r16
      c6:	c0 02       	muls	r28, r16

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	13 e0       	ldi	r17, 0x03	; 3
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e8 ea       	ldi	r30, 0xA8	; 168
      dc:	f3 e2       	ldi	r31, 0x23	; 35
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a4 3b       	cpi	r26, 0xB4	; 180
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	25 e0       	ldi	r18, 0x05	; 5
      ec:	a4 eb       	ldi	r26, 0xB4	; 180
      ee:	b3 e0       	ldi	r27, 0x03	; 3
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	af 36       	cpi	r26, 0x6F	; 111
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c4 e6       	ldi	r28, 0x64	; 100
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__tablejump2__>
     10a:	c2 36       	cpi	r28, 0x62	; 98
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 cc 02 	call	0x598	; 0x598 <main>
     114:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     11c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     11e:	91 8d       	ldd	r25, Z+25	; 0x19
     120:	22 8d       	ldd	r18, Z+26	; 0x1a
     122:	89 2f       	mov	r24, r25
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	80 5c       	subi	r24, 0xC0	; 192
     128:	9f 4f       	sbci	r25, 0xFF	; 255
     12a:	82 1b       	sub	r24, r18
     12c:	91 09       	sbc	r25, r1
}
     12e:	8f 73       	andi	r24, 0x3F	; 63
     130:	99 27       	eor	r25, r25
     132:	08 95       	ret

00000134 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     134:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     136:	91 8d       	ldd	r25, Z+25	; 0x19
     138:	82 8d       	ldd	r24, Z+26	; 0x1a
     13a:	98 17       	cp	r25, r24
     13c:	31 f0       	breq	.+12     	; 0x14a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     13e:	82 8d       	ldd	r24, Z+26	; 0x1a
     140:	e8 0f       	add	r30, r24
     142:	f1 1d       	adc	r31, r1
     144:	85 8d       	ldd	r24, Z+29	; 0x1d
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     14e:	08 95       	ret

00000150 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     150:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     152:	91 8d       	ldd	r25, Z+25	; 0x19
     154:	82 8d       	ldd	r24, Z+26	; 0x1a
     156:	98 17       	cp	r25, r24
     158:	61 f0       	breq	.+24     	; 0x172 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     15a:	82 8d       	ldd	r24, Z+26	; 0x1a
     15c:	df 01       	movw	r26, r30
     15e:	a8 0f       	add	r26, r24
     160:	b1 1d       	adc	r27, r1
     162:	5d 96       	adiw	r26, 0x1d	; 29
     164:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     166:	92 8d       	ldd	r25, Z+26	; 0x1a
     168:	9f 5f       	subi	r25, 0xFF	; 255
     16a:	9f 73       	andi	r25, 0x3F	; 63
     16c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     172:	8f ef       	ldi	r24, 0xFF	; 255
     174:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     176:	08 95       	ret

00000178 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     178:	fc 01       	movw	r30, r24
     17a:	23 8d       	ldd	r18, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     17c:	34 8d       	ldd	r19, Z+28	; 0x1c
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     17e:	23 17       	cp	r18, r19
     180:	38 f0       	brcs	.+14     	; 0x190 <_ZN14HardwareSerial17availableForWriteEv+0x18>
     182:	8f e3       	ldi	r24, 0x3F	; 63
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	82 1b       	sub	r24, r18
     188:	91 09       	sbc	r25, r1
     18a:	83 0f       	add	r24, r19
     18c:	91 1d       	adc	r25, r1
     18e:	08 95       	ret
  return tail - head - 1;
     190:	83 2f       	mov	r24, r19
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	82 1b       	sub	r24, r18
     196:	91 09       	sbc	r25, r1
     198:	01 97       	sbiw	r24, 0x01	; 1
}
     19a:	08 95       	ret

0000019c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     19c:	86 e4       	ldi	r24, 0x46	; 70
     19e:	92 e0       	ldi	r25, 0x02	; 2
     1a0:	89 2b       	or	r24, r25
     1a2:	49 f0       	breq	.+18     	; 0x1b6 <_Z14serialEventRunv+0x1a>
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	89 2b       	or	r24, r25
     1aa:	29 f0       	breq	.+10     	; 0x1b6 <_Z14serialEventRunv+0x1a>
     1ac:	0e 94 46 02 	call	0x48c	; 0x48c <_Z17Serial0_availablev>
     1b0:	81 11       	cpse	r24, r1
     1b2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     1b6:	08 95       	ret

000001b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     1b8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	df 01       	movw	r26, r30
     1be:	a8 0f       	add	r26, r24
     1c0:	b1 1d       	adc	r27, r1
     1c2:	a3 5a       	subi	r26, 0xA3	; 163
     1c4:	bf 4f       	sbci	r27, 0xFF	; 255
     1c6:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     1c8:	24 8d       	ldd	r18, Z+28	; 0x1c
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	2f 5f       	subi	r18, 0xFF	; 255
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
     1d0:	2f 73       	andi	r18, 0x3F	; 63
     1d2:	30 78       	andi	r19, 0x80	; 128
     1d4:	33 23       	and	r19, r19
     1d6:	34 f4       	brge	.+12     	; 0x1e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	31 09       	sbc	r19, r1
     1dc:	20 6c       	ori	r18, 0xC0	; 192
     1de:	3f 6f       	ori	r19, 0xFF	; 255
     1e0:	2f 5f       	subi	r18, 0xFF	; 255
     1e2:	3f 4f       	sbci	r19, 0xFF	; 255
     1e4:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     1e6:	a6 89       	ldd	r26, Z+22	; 0x16
     1e8:	b7 89       	ldd	r27, Z+23	; 0x17
     1ea:	8c 93       	st	X, r24
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     1ec:	a0 89       	ldd	r26, Z+16	; 0x10
     1ee:	b1 89       	ldd	r27, Z+17	; 0x11
     1f0:	8c 91       	ld	r24, X
     1f2:	83 70       	andi	r24, 0x03	; 3
     1f4:	80 64       	ori	r24, 0x40	; 64
     1f6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     1f8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1fa:	84 8d       	ldd	r24, Z+28	; 0x1c
     1fc:	98 13       	cpse	r25, r24
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     200:	02 88       	ldd	r0, Z+18	; 0x12
     202:	f3 89       	ldd	r31, Z+19	; 0x13
     204:	e0 2d       	mov	r30, r0
     206:	80 81       	ld	r24, Z
     208:	8f 7d       	andi	r24, 0xDF	; 223
     20a:	80 83       	st	Z, r24
     20c:	08 95       	ret

0000020e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     214:	88 8d       	ldd	r24, Y+24	; 0x18
     216:	88 23       	and	r24, r24
     218:	d9 f0       	breq	.+54     	; 0x250 <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     21a:	ea 89       	ldd	r30, Y+18	; 0x12
     21c:	fb 89       	ldd	r31, Y+19	; 0x13
     21e:	80 81       	ld	r24, Z
     220:	85 fd       	sbrc	r24, 5
     222:	05 c0       	rjmp	.+10     	; 0x22e <_ZN14HardwareSerial5flushEv+0x20>
     224:	a8 89       	ldd	r26, Y+16	; 0x10
     226:	b9 89       	ldd	r27, Y+17	; 0x11
     228:	8c 91       	ld	r24, X
     22a:	86 fd       	sbrc	r24, 6
     22c:	11 c0       	rjmp	.+34     	; 0x250 <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	07 fc       	sbrc	r0, 7
     232:	f5 cf       	rjmp	.-22     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     234:	80 81       	ld	r24, Z
     236:	85 ff       	sbrs	r24, 5
     238:	f2 cf       	rjmp	.-28     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     23a:	04 c0       	rjmp	.+8      	; 0x244 <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
     23c:	ce 01       	movw	r24, r28
     23e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     242:	eb cf       	rjmp	.-42     	; 0x21a <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     244:	a8 89       	ldd	r26, Y+16	; 0x10
     246:	b9 89       	ldd	r27, Y+17	; 0x11
     248:	8c 91       	ld	r24, X
     24a:	85 ff       	sbrs	r24, 5
     24c:	e8 cf       	rjmp	.-48     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     24e:	f6 cf       	rjmp	.-20     	; 0x23c <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	ec 01       	movw	r28, r24
  _written = true;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     264:	9b 8d       	ldd	r25, Y+27	; 0x1b
     266:	8c 8d       	ldd	r24, Y+28	; 0x1c
     268:	98 13       	cpse	r25, r24
     26a:	26 c0       	rjmp	.+76     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x62>
     26c:	e8 89       	ldd	r30, Y+16	; 0x10
     26e:	f9 89       	ldd	r31, Y+17	; 0x11
     270:	80 81       	ld	r24, Z
     272:	85 fd       	sbrc	r24, 5
     274:	32 c0       	rjmp	.+100    	; 0x2da <_ZN14HardwareSerial5writeEh+0x84>
     276:	20 c0       	rjmp	.+64     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x62>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     278:	8c 8d       	ldd	r24, Y+28	; 0x1c
     27a:	18 13       	cpse	r17, r24
     27c:	0c c0       	rjmp	.+24     	; 0x296 <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	07 fc       	sbrc	r0, 7
     282:	fa cf       	rjmp	.-12     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     284:	e8 89       	ldd	r30, Y+16	; 0x10
     286:	f9 89       	ldd	r31, Y+17	; 0x11
     288:	80 81       	ld	r24, Z
     28a:	85 ff       	sbrs	r24, 5
     28c:	f5 cf       	rjmp	.-22     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
     28e:	ce 01       	movw	r24, r28
     290:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     294:	f1 cf       	rjmp	.-30     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     296:	8b 8d       	ldd	r24, Y+27	; 0x1b
     298:	fe 01       	movw	r30, r28
     29a:	e8 0f       	add	r30, r24
     29c:	f1 1d       	adc	r31, r1
     29e:	e3 5a       	subi	r30, 0xA3	; 163
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	00 83       	st	Z, r16

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2a6:	f8 94       	cli
    _tx_buffer_head = i;
     2a8:	1b 8f       	std	Y+27, r17	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     2aa:	ea 89       	ldd	r30, Y+18	; 0x12
     2ac:	fb 89       	ldd	r31, Y+19	; 0x13
     2ae:	80 81       	ld	r24, Z
     2b0:	80 62       	ori	r24, 0x20	; 32
     2b2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2b4:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
     2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <_ZN14HardwareSerial5writeEh+0x9c>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     2b8:	2b 8d       	ldd	r18, Y+27	; 0x1b
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	2f 73       	andi	r18, 0x3F	; 63
     2c2:	30 78       	andi	r19, 0x80	; 128
     2c4:	33 23       	and	r19, r19
     2c6:	34 f4       	brge	.+12     	; 0x2d4 <_ZN14HardwareSerial5writeEh+0x7e>
     2c8:	21 50       	subi	r18, 0x01	; 1
     2ca:	31 09       	sbc	r19, r1
     2cc:	20 6c       	ori	r18, 0xC0	; 192
     2ce:	3f 6f       	ori	r19, 0xFF	; 255
     2d0:	2f 5f       	subi	r18, 0xFF	; 255
     2d2:	3f 4f       	sbci	r19, 0xFF	; 255
     2d4:	06 2f       	mov	r16, r22
     2d6:	12 2f       	mov	r17, r18
     2d8:	cf cf       	rjmp	.-98     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2dc:	f8 94       	cli
      *_udr = c;
     2de:	ee 89       	ldd	r30, Y+22	; 0x16
     2e0:	ff 89       	ldd	r31, Y+23	; 0x17
     2e2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2e4:	e8 89       	ldd	r30, Y+16	; 0x10
     2e6:	f9 89       	ldd	r31, Y+17	; 0x11
     2e8:	80 81       	ld	r24, Z
     2ea:	83 70       	andi	r24, 0x03	; 3
     2ec:	80 64       	ori	r24, 0x40	; 64
     2ee:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2f0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ec 01       	movw	r28, r24
     310:	6a 01       	movw	r12, r20
     312:	7b 01       	movw	r14, r22
     314:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     316:	e8 89       	ldd	r30, Y+16	; 0x10
     318:	f9 89       	ldd	r31, Y+17	; 0x11
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     31e:	41 15       	cp	r20, r1
     320:	51 4e       	sbci	r21, 0xE1	; 225
     322:	61 05       	cpc	r22, r1
     324:	71 05       	cpc	r23, r1
     326:	b1 f0       	breq	.+44     	; 0x354 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	79 e0       	ldi	r23, 0x09	; 9
     32c:	8d e3       	ldi	r24, 0x3D	; 61
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__udivmodsi4>
     338:	da 01       	movw	r26, r20
     33a:	c9 01       	movw	r24, r18
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	a1 09       	sbc	r26, r1
     340:	b1 09       	sbc	r27, r1
     342:	b6 95       	lsr	r27
     344:	a7 95       	ror	r26
     346:	97 95       	ror	r25
     348:	87 95       	ror	r24
     34a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     34c:	21 15       	cp	r18, r1
     34e:	80 e1       	ldi	r24, 0x10	; 16
     350:	38 07       	cpc	r19, r24
     352:	a8 f0       	brcs	.+42     	; 0x37e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     354:	e8 89       	ldd	r30, Y+16	; 0x10
     356:	f9 89       	ldd	r31, Y+17	; 0x11
     358:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     35a:	60 e8       	ldi	r22, 0x80	; 128
     35c:	74 e8       	ldi	r23, 0x84	; 132
     35e:	8e e1       	ldi	r24, 0x1E	; 30
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a7 01       	movw	r20, r14
     364:	96 01       	movw	r18, r12
     366:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__udivmodsi4>
     36a:	da 01       	movw	r26, r20
     36c:	c9 01       	movw	r24, r18
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	a1 09       	sbc	r26, r1
     372:	b1 09       	sbc	r27, r1
     374:	b6 95       	lsr	r27
     376:	a7 95       	ror	r26
     378:	97 95       	ror	r25
     37a:	87 95       	ror	r24
     37c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     37e:	ec 85       	ldd	r30, Y+12	; 0x0c
     380:	fd 85       	ldd	r31, Y+13	; 0x0d
     382:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     384:	ee 85       	ldd	r30, Y+14	; 0x0e
     386:	ff 85       	ldd	r31, Y+15	; 0x0f
     388:	20 83       	st	Z, r18

  _written = false;
     38a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     38c:	ec 89       	ldd	r30, Y+20	; 0x14
     38e:	fd 89       	ldd	r31, Y+21	; 0x15
     390:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     392:	ea 89       	ldd	r30, Y+18	; 0x12
     394:	fb 89       	ldd	r31, Y+19	; 0x13
     396:	80 81       	ld	r24, Z
     398:	80 61       	ori	r24, 0x10	; 16
     39a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     39c:	ea 89       	ldd	r30, Y+18	; 0x12
     39e:	fb 89       	ldd	r31, Y+19	; 0x13
     3a0:	80 81       	ld	r24, Z
     3a2:	88 60       	ori	r24, 0x08	; 8
     3a4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     3a6:	ea 89       	ldd	r30, Y+18	; 0x12
     3a8:	fb 89       	ldd	r31, Y+19	; 0x13
     3aa:	80 81       	ld	r24, Z
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     3b0:	ea 89       	ldd	r30, Y+18	; 0x12
     3b2:	fb 89       	ldd	r31, Y+19	; 0x13
     3b4:	80 81       	ld	r24, Z
     3b6:	8f 7d       	andi	r24, 0xDF	; 223
     3b8:	80 83       	st	Z, r24
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	08 95       	ret

000003ca <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	2f 93       	push	r18
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3e8:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <__data_end+0x10>
     3ec:	f0 91 c5 03 	lds	r31, 0x03C5	; 0x8003c5 <__data_end+0x11>
     3f0:	80 81       	ld	r24, Z
     3f2:	82 fd       	sbrc	r24, 2
     3f4:	14 c0       	rjmp	.+40     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3f6:	e4 eb       	ldi	r30, 0xB4	; 180
     3f8:	f3 e0       	ldi	r31, 0x03	; 3
     3fa:	a6 89       	ldd	r26, Z+22	; 0x16
     3fc:	b7 89       	ldd	r27, Z+23	; 0x17
     3fe:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     400:	81 8d       	ldd	r24, Z+25	; 0x19
     402:	8f 5f       	subi	r24, 0xFF	; 255
     404:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     406:	92 8d       	ldd	r25, Z+26	; 0x1a
     408:	89 17       	cp	r24, r25
     40a:	71 f0       	breq	.+28     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
      _rx_buffer[_rx_buffer_head] = c;
     40c:	df 01       	movw	r26, r30
     40e:	e1 8d       	ldd	r30, Z+25	; 0x19
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	ec 54       	subi	r30, 0x4C	; 76
     414:	fc 4f       	sbci	r31, 0xFC	; 252
     416:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     418:	59 96       	adiw	r26, 0x19	; 25
     41a:	8c 93       	st	X, r24
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     41e:	e0 91 ca 03 	lds	r30, 0x03CA	; 0x8003ca <__data_end+0x16>
     422:	f0 91 cb 03 	lds	r31, 0x03CB	; 0x8003cb <__data_end+0x17>
     426:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	2f 93       	push	r18
     44c:	3f 93       	push	r19
     44e:	4f 93       	push	r20
     450:	5f 93       	push	r21
     452:	6f 93       	push	r22
     454:	7f 93       	push	r23
     456:	8f 93       	push	r24
     458:	9f 93       	push	r25
     45a:	af 93       	push	r26
     45c:	bf 93       	push	r27
     45e:	ef 93       	push	r30
     460:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     462:	84 eb       	ldi	r24, 0xB4	; 180
     464:	93 e0       	ldi	r25, 0x03	; 3
     466:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	bf 91       	pop	r27
     470:	af 91       	pop	r26
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	7f 91       	pop	r23
     478:	6f 91       	pop	r22
     47a:	5f 91       	pop	r21
     47c:	4f 91       	pop	r20
     47e:	3f 91       	pop	r19
     480:	2f 91       	pop	r18
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     48c:	84 eb       	ldi	r24, 0xB4	; 180
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN14HardwareSerial9availableEv>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	89 2b       	or	r24, r25
     498:	09 f4       	brne	.+2      	; 0x49c <_Z17Serial0_availablev+0x10>
     49a:	20 e0       	ldi	r18, 0x00	; 0
}
     49c:	82 2f       	mov	r24, r18
     49e:	08 95       	ret

000004a0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     4a0:	e4 eb       	ldi	r30, 0xB4	; 180
     4a2:	f3 e0       	ldi	r31, 0x03	; 3
     4a4:	13 82       	std	Z+3, r1	; 0x03
     4a6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     4a8:	88 ee       	ldi	r24, 0xE8	; 232
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	a0 e0       	ldi	r26, 0x00	; 0
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	84 83       	std	Z+4, r24	; 0x04
     4b2:	95 83       	std	Z+5, r25	; 0x05
     4b4:	a6 83       	std	Z+6, r26	; 0x06
     4b6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     4b8:	8f e0       	ldi	r24, 0x0F	; 15
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	85 ec       	ldi	r24, 0xC5	; 197
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	95 87       	std	Z+13, r25	; 0x0d
     4c6:	84 87       	std	Z+12, r24	; 0x0c
     4c8:	84 ec       	ldi	r24, 0xC4	; 196
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	97 87       	std	Z+15, r25	; 0x0f
     4ce:	86 87       	std	Z+14, r24	; 0x0e
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	91 8b       	std	Z+17, r25	; 0x11
     4d6:	80 8b       	std	Z+16, r24	; 0x10
     4d8:	81 ec       	ldi	r24, 0xC1	; 193
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	93 8b       	std	Z+19, r25	; 0x13
     4de:	82 8b       	std	Z+18, r24	; 0x12
     4e0:	82 ec       	ldi	r24, 0xC2	; 194
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	95 8b       	std	Z+21, r25	; 0x15
     4e6:	84 8b       	std	Z+20, r24	; 0x14
     4e8:	86 ec       	ldi	r24, 0xC6	; 198
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	97 8b       	std	Z+23, r25	; 0x17
     4ee:	86 8b       	std	Z+22, r24	; 0x16
     4f0:	11 8e       	std	Z+25, r1	; 0x19
     4f2:	12 8e       	std	Z+26, r1	; 0x1a
     4f4:	13 8e       	std	Z+27, r1	; 0x1b
     4f6:	14 8e       	std	Z+28, r1	; 0x1c
     4f8:	08 95       	ret

000004fa <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     4fa:	08 95       	ret

000004fc <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
     4fc:	8f 92       	push	r8
     4fe:	9f 92       	push	r9
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	6c 01       	movw	r12, r24
     516:	7b 01       	movw	r14, r22
     518:	4c 01       	movw	r8, r24
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	88 0e       	add	r8, r24
     51e:	91 1c       	adc	r9, r1
     520:	56 01       	movw	r10, r12
     522:	e5 e0       	ldi	r30, 0x05	; 5
     524:	ae 0e       	add	r10, r30
     526:	b1 1c       	adc	r11, r1
     528:	00 e0       	ldi	r16, 0x00	; 0
     52a:	10 e0       	ldi	r17, 0x00	; 0
     52c:	f4 01       	movw	r30, r8
     52e:	61 91       	ld	r22, Z+
     530:	4f 01       	movw	r8, r30
     532:	4a e0       	ldi	r20, 0x0A	; 10
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	c7 01       	movw	r24, r14
     538:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN5Print5printEhi>
     53c:	ec 01       	movw	r28, r24
     53e:	6e e2       	ldi	r22, 0x2E	; 46
     540:	c7 01       	movw	r24, r14
     542:	0e 94 21 03 	call	0x642	; 0x642 <_ZN5Print5printEc>
     546:	8c 0f       	add	r24, r28
     548:	9d 1f       	adc	r25, r29
     54a:	08 0f       	add	r16, r24
     54c:	19 1f       	adc	r17, r25
     54e:	8a 14       	cp	r8, r10
     550:	9b 04       	cpc	r9, r11
     552:	61 f7       	brne	.-40     	; 0x52c <_ZNK9IPAddress7printToER5Print+0x30>
     554:	4a e0       	ldi	r20, 0x0A	; 10
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	f6 01       	movw	r30, r12
     55a:	65 81       	ldd	r22, Z+5	; 0x05
     55c:	c7 01       	movw	r24, r14
     55e:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN5Print5printEhi>
     562:	80 0f       	add	r24, r16
     564:	91 1f       	adc	r25, r17
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	9f 90       	pop	r9
     57c:	8f 90       	pop	r8
     57e:	08 95       	ret

00000580 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     580:	e1 e5       	ldi	r30, 0x51	; 81
     582:	f4 e0       	ldi	r31, 0x04	; 4
     584:	81 e2       	ldi	r24, 0x21	; 33
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	91 83       	std	Z+1, r25	; 0x01
     58a:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     58c:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     58e:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     590:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     592:	15 82       	std	Z+5, r1	; 0x05
     594:	08 95       	ret

00000596 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     596:	08 95       	ret

00000598 <main>:

int main(void)
{
	init();
     598:	0e 94 54 05 	call	0xaa8	; 0xaa8 <init>
	initVariant();
     59c:	0e 94 cb 02 	call	0x596	; 0x596 <initVariant>
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
		if (serialEventRun) serialEventRun();
     5a0:	ce ec       	ldi	r28, 0xCE	; 206
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
	USBDevice.attach();
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
     5a4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <main_ArduinoLockOpener>
		if (serialEventRun) serialEventRun();
     5a8:	20 97       	sbiw	r28, 0x00	; 0
     5aa:	e1 f3       	breq	.-8      	; 0x5a4 <main+0xc>
     5ac:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z14serialEventRunv>
     5b0:	f9 cf       	rjmp	.-14     	; 0x5a4 <main+0xc>

000005b2 <_Znwj>:
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
     5b2:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <malloc>
}
     5b6:	08 95       	ret

000005b8 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	41 15       	cp	r20, r1
     5ca:	51 05       	cpc	r21, r1
     5cc:	c1 f0       	breq	.+48     	; 0x5fe <_ZN5Print5writeEPKhj+0x46>
     5ce:	6a 01       	movw	r12, r20
     5d0:	8c 01       	movw	r16, r24
     5d2:	e6 2e       	mov	r14, r22
     5d4:	f7 2e       	mov	r15, r23
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
     5da:	d7 01       	movw	r26, r14
     5dc:	6d 91       	ld	r22, X+
     5de:	7d 01       	movw	r14, r26
     5e0:	d8 01       	movw	r26, r16
     5e2:	ed 91       	ld	r30, X+
     5e4:	fc 91       	ld	r31, X
     5e6:	01 90       	ld	r0, Z+
     5e8:	f0 81       	ld	r31, Z
     5ea:	e0 2d       	mov	r30, r0
     5ec:	c8 01       	movw	r24, r16
     5ee:	09 95       	icall
     5f0:	89 2b       	or	r24, r25
     5f2:	39 f0       	breq	.+14     	; 0x602 <_ZN5Print5writeEPKhj+0x4a>
     5f4:	21 96       	adiw	r28, 0x01	; 1
     5f6:	cc 16       	cp	r12, r28
     5f8:	dd 06       	cpc	r13, r29
     5fa:	79 f7       	brne	.-34     	; 0x5da <_ZN5Print5writeEPKhj+0x22>
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <_ZN5Print5writeEPKhj+0x4a>
     5fe:	c0 e0       	ldi	r28, 0x00	; 0
     600:	d0 e0       	ldi	r29, 0x00	; 0
     602:	ce 01       	movw	r24, r28
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	08 95       	ret

00000616 <_ZN5Print5printEPKc>:
     616:	61 15       	cp	r22, r1
     618:	71 05       	cpc	r23, r1
     61a:	81 f0       	breq	.+32     	; 0x63c <_ZN5Print5printEPKc+0x26>
     61c:	fb 01       	movw	r30, r22
     61e:	01 90       	ld	r0, Z+
     620:	00 20       	and	r0, r0
     622:	e9 f7       	brne	.-6      	; 0x61e <_ZN5Print5printEPKc+0x8>
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	af 01       	movw	r20, r30
     628:	46 1b       	sub	r20, r22
     62a:	57 0b       	sbc	r21, r23
     62c:	dc 01       	movw	r26, r24
     62e:	ed 91       	ld	r30, X+
     630:	fc 91       	ld	r31, X
     632:	02 80       	ldd	r0, Z+2	; 0x02
     634:	f3 81       	ldd	r31, Z+3	; 0x03
     636:	e0 2d       	mov	r30, r0
     638:	09 95       	icall
     63a:	08 95       	ret
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	08 95       	ret

00000642 <_ZN5Print5printEc>:
     642:	dc 01       	movw	r26, r24
     644:	ed 91       	ld	r30, X+
     646:	fc 91       	ld	r31, X
     648:	01 90       	ld	r0, Z+
     64a:	f0 81       	ld	r31, Z
     64c:	e0 2d       	mov	r30, r0
     64e:	09 95       	icall
     650:	08 95       	ret

00000652 <_ZN5Print7printlnEv>:
     652:	dc 01       	movw	r26, r24
     654:	ed 91       	ld	r30, X+
     656:	fc 91       	ld	r31, X
     658:	02 80       	ldd	r0, Z+2	; 0x02
     65a:	f3 81       	ldd	r31, Z+3	; 0x03
     65c:	e0 2d       	mov	r30, r0
     65e:	42 e0       	ldi	r20, 0x02	; 2
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	63 e2       	ldi	r22, 0x23	; 35
     664:	71 e0       	ldi	r23, 0x01	; 1
     666:	09 95       	icall
     668:	08 95       	ret

0000066a <_ZN5Print7printlnEPKc>:
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ec 01       	movw	r28, r24
     674:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEPKc>
     678:	8c 01       	movw	r16, r24
     67a:	ce 01       	movw	r24, r28
     67c:	0e 94 29 03 	call	0x652	; 0x652 <_ZN5Print7printlnEv>
     680:	80 0f       	add	r24, r16
     682:	91 1f       	adc	r25, r17
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	08 95       	ret

0000068e <_ZN5Print11printNumberEmh>:
     68e:	8f 92       	push	r8
     690:	9f 92       	push	r9
     692:	af 92       	push	r10
     694:	bf 92       	push	r11
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	a1 97       	sbiw	r28, 0x21	; 33
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	7c 01       	movw	r14, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	ba 01       	movw	r22, r20
     6b8:	19 a2       	std	Y+33, r1	; 0x21
     6ba:	22 30       	cpi	r18, 0x02	; 2
     6bc:	08 f4       	brcc	.+2      	; 0x6c0 <_ZN5Print11printNumberEmh+0x32>
     6be:	2a e0       	ldi	r18, 0x0A	; 10
     6c0:	8e 01       	movw	r16, r28
     6c2:	0f 5d       	subi	r16, 0xDF	; 223
     6c4:	1f 4f       	sbci	r17, 0xFF	; 255
     6c6:	82 2e       	mov	r8, r18
     6c8:	91 2c       	mov	r9, r1
     6ca:	a1 2c       	mov	r10, r1
     6cc:	b1 2c       	mov	r11, r1
     6ce:	a5 01       	movw	r20, r10
     6d0:	94 01       	movw	r18, r8
     6d2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__udivmodsi4>
     6d6:	e6 2f       	mov	r30, r22
     6d8:	62 2f       	mov	r22, r18
     6da:	73 2f       	mov	r23, r19
     6dc:	84 2f       	mov	r24, r20
     6de:	95 2f       	mov	r25, r21
     6e0:	01 50       	subi	r16, 0x01	; 1
     6e2:	11 09       	sbc	r17, r1
     6e4:	ea 30       	cpi	r30, 0x0A	; 10
     6e6:	10 f4       	brcc	.+4      	; 0x6ec <_ZN5Print11printNumberEmh+0x5e>
     6e8:	e0 5d       	subi	r30, 0xD0	; 208
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <_ZN5Print11printNumberEmh+0x60>
     6ec:	e9 5c       	subi	r30, 0xC9	; 201
     6ee:	d8 01       	movw	r26, r16
     6f0:	ec 93       	st	X, r30
     6f2:	61 15       	cp	r22, r1
     6f4:	71 05       	cpc	r23, r1
     6f6:	81 05       	cpc	r24, r1
     6f8:	91 05       	cpc	r25, r1
     6fa:	49 f7       	brne	.-46     	; 0x6ce <_ZN5Print11printNumberEmh+0x40>
     6fc:	01 15       	cp	r16, r1
     6fe:	11 05       	cpc	r17, r1
     700:	91 f0       	breq	.+36     	; 0x726 <_ZN5Print11printNumberEmh+0x98>
     702:	f8 01       	movw	r30, r16
     704:	01 90       	ld	r0, Z+
     706:	00 20       	and	r0, r0
     708:	e9 f7       	brne	.-6      	; 0x704 <_ZN5Print11printNumberEmh+0x76>
     70a:	31 97       	sbiw	r30, 0x01	; 1
     70c:	af 01       	movw	r20, r30
     70e:	40 1b       	sub	r20, r16
     710:	51 0b       	sbc	r21, r17
     712:	d7 01       	movw	r26, r14
     714:	ed 91       	ld	r30, X+
     716:	fc 91       	ld	r31, X
     718:	02 80       	ldd	r0, Z+2	; 0x02
     71a:	f3 81       	ldd	r31, Z+3	; 0x03
     71c:	e0 2d       	mov	r30, r0
     71e:	b8 01       	movw	r22, r16
     720:	c7 01       	movw	r24, r14
     722:	09 95       	icall
     724:	02 c0       	rjmp	.+4      	; 0x72a <_ZN5Print11printNumberEmh+0x9c>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	a1 96       	adiw	r28, 0x21	; 33
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	bf 90       	pop	r11
     744:	af 90       	pop	r10
     746:	9f 90       	pop	r9
     748:	8f 90       	pop	r8
     74a:	08 95       	ret

0000074c <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     74c:	21 15       	cp	r18, r1
     74e:	31 05       	cpc	r19, r1
     750:	49 f4       	brne	.+18     	; 0x764 <_ZN5Print5printEmi+0x18>
     752:	dc 01       	movw	r26, r24
     754:	ed 91       	ld	r30, X+
     756:	fc 91       	ld	r31, X
     758:	01 90       	ld	r0, Z+
     75a:	f0 81       	ld	r31, Z
     75c:	e0 2d       	mov	r30, r0
     75e:	64 2f       	mov	r22, r20
     760:	09 95       	icall
     762:	08 95       	ret
  else return printNumber(n, base);
     764:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN5Print11printNumberEmh>
}
     768:	08 95       	ret

0000076a <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     76a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     76c:	46 2f       	mov	r20, r22
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN5Print5printEmi>
}
     778:	08 95       	ret

0000077a <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	39 f0       	breq	.+14     	; 0x78c <_Z12disableTimerh+0x12>
     77e:	18 f0       	brcs	.+6      	; 0x786 <_Z12disableTimerh+0xc>
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	51 f0       	breq	.+20     	; 0x798 <_Z12disableTimerh+0x1e>
     784:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     786:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     78a:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     78c:	ef e6       	ldi	r30, 0x6F	; 111
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	8d 7f       	andi	r24, 0xFD	; 253
     794:	80 83       	st	Z, r24
      break;
     796:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     798:	e0 e7       	ldi	r30, 0x70	; 112
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8d 7f       	andi	r24, 0xFD	; 253
     7a0:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     7a8:	e1 eb       	ldi	r30, 0xB1	; 177
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	88 7f       	andi	r24, 0xF8	; 248
     7b0:	84 60       	ori	r24, 0x04	; 4
     7b2:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     7b4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     7b8:	08 95       	ret

000007ba <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7ba:	cf 93       	push	r28
     7bc:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL9tone_pins>
     7c2:	c8 13       	cpse	r28, r24
     7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7c6:	e8 e6       	ldi	r30, 0x68	; 104
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     7cc:	9f ef       	ldi	r25, 0xFF	; 255
     7ce:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_ZL9tone_pins>
      break;
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
     7d6:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	8c 2f       	mov	r24, r28
     7de:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
}
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7e6:	1f 92       	push	r1
     7e8:	0f 92       	push	r0
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	0f 92       	push	r0
     7ee:	11 24       	eor	r1, r1
     7f0:	2f 93       	push	r18
     7f2:	3f 93       	push	r19
     7f4:	4f 93       	push	r20
     7f6:	5f 93       	push	r21
     7f8:	6f 93       	push	r22
     7fa:	7f 93       	push	r23
     7fc:	8f 93       	push	r24
     7fe:	9f 93       	push	r25
     800:	af 93       	push	r26
     802:	bf 93       	push	r27
     804:	ef 93       	push	r30
     806:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     808:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <timer2_toggle_count>
     80c:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <timer2_toggle_count+0x1>
     810:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <timer2_toggle_count+0x2>
     814:	b0 91 5d 04 	lds	r27, 0x045D	; 0x80045d <timer2_toggle_count+0x3>
     818:	89 2b       	or	r24, r25
     81a:	8a 2b       	or	r24, r26
     81c:	8b 2b       	or	r24, r27
     81e:	51 f1       	breq	.+84     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     820:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <timer2_pin_mask>
     824:	e0 91 58 04 	lds	r30, 0x0458	; 0x800458 <timer2_pin_port>
     828:	f0 91 59 04 	lds	r31, 0x0459	; 0x800459 <timer2_pin_port+0x1>
     82c:	80 81       	ld	r24, Z
     82e:	89 27       	eor	r24, r25
     830:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     832:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <timer2_toggle_count>
     836:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <timer2_toggle_count+0x1>
     83a:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <timer2_toggle_count+0x2>
     83e:	b0 91 5d 04 	lds	r27, 0x045D	; 0x80045d <timer2_toggle_count+0x3>
     842:	18 16       	cp	r1, r24
     844:	19 06       	cpc	r1, r25
     846:	1a 06       	cpc	r1, r26
     848:	1b 06       	cpc	r1, r27
     84a:	c4 f4       	brge	.+48     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
      timer2_toggle_count--;
     84c:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <timer2_toggle_count>
     850:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <timer2_toggle_count+0x1>
     854:	a0 91 5c 04 	lds	r26, 0x045C	; 0x80045c <timer2_toggle_count+0x2>
     858:	b0 91 5d 04 	lds	r27, 0x045D	; 0x80045d <timer2_toggle_count+0x3>
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	a1 09       	sbc	r26, r1
     860:	b1 09       	sbc	r27, r1
     862:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <timer2_toggle_count>
     866:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <timer2_toggle_count+0x1>
     86a:	a0 93 5c 04 	sts	0x045C, r26	; 0x80045c <timer2_toggle_count+0x2>
     86e:	b0 93 5d 04 	sts	0x045D, r27	; 0x80045d <timer2_toggle_count+0x3>
     872:	04 c0       	rjmp	.+8      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     874:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL9tone_pins>
     878:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     87c:	ff 91       	pop	r31
     87e:	ef 91       	pop	r30
     880:	bf 91       	pop	r27
     882:	af 91       	pop	r26
     884:	9f 91       	pop	r25
     886:	8f 91       	pop	r24
     888:	7f 91       	pop	r23
     88a:	6f 91       	pop	r22
     88c:	5f 91       	pop	r21
     88e:	4f 91       	pop	r20
     890:	3f 91       	pop	r19
     892:	2f 91       	pop	r18
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	0f 90       	pop	r0
     89a:	1f 90       	pop	r1
     89c:	18 95       	reti

0000089e <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     89e:	08 95       	ret

000008a0 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
     8c2:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <intFunc>
     8c6:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <intFunc+0x1>
     8ca:	09 95       	icall
     8cc:	ff 91       	pop	r31
     8ce:	ef 91       	pop	r30
     8d0:	bf 91       	pop	r27
     8d2:	af 91       	pop	r26
     8d4:	9f 91       	pop	r25
     8d6:	8f 91       	pop	r24
     8d8:	7f 91       	pop	r23
     8da:	6f 91       	pop	r22
     8dc:	5f 91       	pop	r21
     8de:	4f 91       	pop	r20
     8e0:	3f 91       	pop	r19
     8e2:	2f 91       	pop	r18
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     8ee:	1f 92       	push	r1
     8f0:	0f 92       	push	r0
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	0f 92       	push	r0
     8f6:	11 24       	eor	r1, r1
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
     910:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <intFunc+0x2>
     914:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <intFunc+0x3>
     918:	09 95       	icall
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	bf 91       	pop	r27
     920:	af 91       	pop	r26
     922:	9f 91       	pop	r25
     924:	8f 91       	pop	r24
     926:	7f 91       	pop	r23
     928:	6f 91       	pop	r22
     92a:	5f 91       	pop	r21
     92c:	4f 91       	pop	r20
     92e:	3f 91       	pop	r19
     930:	2f 91       	pop	r18
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     93c:	1f 92       	push	r1
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <timer0_millis>
     956:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <timer0_millis+0x1>
     95a:	a0 91 61 04 	lds	r26, 0x0461	; 0x800461 <timer0_millis+0x2>
     95e:	b0 91 62 04 	lds	r27, 0x0462	; 0x800462 <timer0_millis+0x3>
     962:	30 91 5e 04 	lds	r19, 0x045E	; 0x80045e <timer0_fract>
     966:	23 e0       	ldi	r18, 0x03	; 3
     968:	23 0f       	add	r18, r19
     96a:	2d 37       	cpi	r18, 0x7D	; 125
     96c:	20 f4       	brcc	.+8      	; 0x976 <__vector_16+0x3a>
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	a1 1d       	adc	r26, r1
     972:	b1 1d       	adc	r27, r1
     974:	05 c0       	rjmp	.+10     	; 0x980 <__vector_16+0x44>
     976:	26 e8       	ldi	r18, 0x86	; 134
     978:	23 0f       	add	r18, r19
     97a:	02 96       	adiw	r24, 0x02	; 2
     97c:	a1 1d       	adc	r26, r1
     97e:	b1 1d       	adc	r27, r1
     980:	20 93 5e 04 	sts	0x045E, r18	; 0x80045e <timer0_fract>
     984:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <timer0_millis>
     988:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <timer0_millis+0x1>
     98c:	a0 93 61 04 	sts	0x0461, r26	; 0x800461 <timer0_millis+0x2>
     990:	b0 93 62 04 	sts	0x0462, r27	; 0x800462 <timer0_millis+0x3>
     994:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <timer0_overflow_count>
     998:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <timer0_overflow_count+0x1>
     99c:	a0 91 65 04 	lds	r26, 0x0465	; 0x800465 <timer0_overflow_count+0x2>
     9a0:	b0 91 66 04 	lds	r27, 0x0466	; 0x800466 <timer0_overflow_count+0x3>
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	a1 1d       	adc	r26, r1
     9a8:	b1 1d       	adc	r27, r1
     9aa:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <timer0_overflow_count>
     9ae:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <timer0_overflow_count+0x1>
     9b2:	a0 93 65 04 	sts	0x0465, r26	; 0x800465 <timer0_overflow_count+0x2>
     9b6:	b0 93 66 04 	sts	0x0466, r27	; 0x800466 <timer0_overflow_count+0x3>
     9ba:	bf 91       	pop	r27
     9bc:	af 91       	pop	r26
     9be:	9f 91       	pop	r25
     9c0:	8f 91       	pop	r24
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <micros>:
     9d0:	3f b7       	in	r19, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <timer0_overflow_count>
     9d8:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <timer0_overflow_count+0x1>
     9dc:	a0 91 65 04 	lds	r26, 0x0465	; 0x800465 <timer0_overflow_count+0x2>
     9e0:	b0 91 66 04 	lds	r27, 0x0466	; 0x800466 <timer0_overflow_count+0x3>
     9e4:	26 b5       	in	r18, 0x26	; 38
     9e6:	a8 9b       	sbis	0x15, 0	; 21
     9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <micros+0x24>
     9ea:	2f 3f       	cpi	r18, 0xFF	; 255
     9ec:	19 f0       	breq	.+6      	; 0x9f4 <micros+0x24>
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	a1 1d       	adc	r26, r1
     9f2:	b1 1d       	adc	r27, r1
     9f4:	3f bf       	out	0x3f, r19	; 63
     9f6:	ba 2f       	mov	r27, r26
     9f8:	a9 2f       	mov	r26, r25
     9fa:	98 2f       	mov	r25, r24
     9fc:	88 27       	eor	r24, r24
     9fe:	82 0f       	add	r24, r18
     a00:	91 1d       	adc	r25, r1
     a02:	a1 1d       	adc	r26, r1
     a04:	b1 1d       	adc	r27, r1
     a06:	bc 01       	movw	r22, r24
     a08:	cd 01       	movw	r24, r26
     a0a:	66 0f       	add	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	88 1f       	adc	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	66 0f       	add	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	88 1f       	adc	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	08 95       	ret

00000a1c <delay>:
     a1c:	8f 92       	push	r8
     a1e:	9f 92       	push	r9
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	6b 01       	movw	r12, r22
     a2e:	7c 01       	movw	r14, r24
     a30:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <micros>
     a34:	4b 01       	movw	r8, r22
     a36:	5c 01       	movw	r10, r24
     a38:	c1 14       	cp	r12, r1
     a3a:	d1 04       	cpc	r13, r1
     a3c:	e1 04       	cpc	r14, r1
     a3e:	f1 04       	cpc	r15, r1
     a40:	39 f5       	brne	.+78     	; 0xa90 <delay+0x74>
     a42:	29 c0       	rjmp	.+82     	; 0xa96 <delay+0x7a>
     a44:	0e 94 7d 02 	call	0x4fa	; 0x4fa <yield>
     a48:	10 c0       	rjmp	.+32     	; 0xa6a <delay+0x4e>
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	c2 1a       	sub	r12, r18
     a4e:	d1 08       	sbc	r13, r1
     a50:	e1 08       	sbc	r14, r1
     a52:	f1 08       	sbc	r15, r1
     a54:	88 ee       	ldi	r24, 0xE8	; 232
     a56:	88 0e       	add	r8, r24
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	98 1e       	adc	r9, r24
     a5c:	a1 1c       	adc	r10, r1
     a5e:	b1 1c       	adc	r11, r1
     a60:	c1 14       	cp	r12, r1
     a62:	d1 04       	cpc	r13, r1
     a64:	e1 04       	cpc	r14, r1
     a66:	f1 04       	cpc	r15, r1
     a68:	b1 f0       	breq	.+44     	; 0xa96 <delay+0x7a>
     a6a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <micros>
     a6e:	dc 01       	movw	r26, r24
     a70:	cb 01       	movw	r24, r22
     a72:	88 19       	sub	r24, r8
     a74:	99 09       	sbc	r25, r9
     a76:	aa 09       	sbc	r26, r10
     a78:	bb 09       	sbc	r27, r11
     a7a:	88 3e       	cpi	r24, 0xE8	; 232
     a7c:	93 40       	sbci	r25, 0x03	; 3
     a7e:	a1 05       	cpc	r26, r1
     a80:	b1 05       	cpc	r27, r1
     a82:	18 f7       	brcc	.-58     	; 0xa4a <delay+0x2e>
     a84:	c1 14       	cp	r12, r1
     a86:	d1 04       	cpc	r13, r1
     a88:	e1 04       	cpc	r14, r1
     a8a:	f1 04       	cpc	r15, r1
     a8c:	d9 f6       	brne	.-74     	; 0xa44 <delay+0x28>
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <delay+0x7a>
     a90:	0e 94 7d 02 	call	0x4fa	; 0x4fa <yield>
     a94:	ea cf       	rjmp	.-44     	; 0xa6a <delay+0x4e>
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	bf 90       	pop	r11
     aa0:	af 90       	pop	r10
     aa2:	9f 90       	pop	r9
     aa4:	8f 90       	pop	r8
     aa6:	08 95       	ret

00000aa8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     aa8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     aaa:	84 b5       	in	r24, 0x24	; 36
     aac:	82 60       	ori	r24, 0x02	; 2
     aae:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ab0:	84 b5       	in	r24, 0x24	; 36
     ab2:	81 60       	ori	r24, 0x01	; 1
     ab4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ab6:	85 b5       	in	r24, 0x25	; 37
     ab8:	82 60       	ori	r24, 0x02	; 2
     aba:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     abc:	85 b5       	in	r24, 0x25	; 37
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ac2:	ee e6       	ldi	r30, 0x6E	; 110
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	81 60       	ori	r24, 0x01	; 1
     aca:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     acc:	e1 e8       	ldi	r30, 0x81	; 129
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ad2:	80 81       	ld	r24, Z
     ad4:	82 60       	ori	r24, 0x02	; 2
     ad6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ad8:	80 81       	ld	r24, Z
     ada:	81 60       	ori	r24, 0x01	; 1
     adc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ade:	e0 e8       	ldi	r30, 0x80	; 128
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	81 60       	ori	r24, 0x01	; 1
     ae6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ae8:	e1 eb       	ldi	r30, 0xB1	; 177
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	84 60       	ori	r24, 0x04	; 4
     af0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     af2:	e0 eb       	ldi	r30, 0xB0	; 176
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	81 60       	ori	r24, 0x01	; 1
     afa:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     afc:	ea e7       	ldi	r30, 0x7A	; 122
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	84 60       	ori	r24, 0x04	; 4
     b04:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     b06:	80 81       	ld	r24, Z
     b08:	82 60       	ori	r24, 0x02	; 2
     b0a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     b0c:	80 81       	ld	r24, Z
     b0e:	81 60       	ori	r24, 0x01	; 1
     b10:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b12:	80 81       	ld	r24, Z
     b14:	80 68       	ori	r24, 0x80	; 128
     b16:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b18:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     b1c:	08 95       	ret

00000b1e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b1e:	83 30       	cpi	r24, 0x03	; 3
     b20:	69 f0       	breq	.+26     	; 0xb3c <turnOffPWM+0x1e>
     b22:	28 f4       	brcc	.+10     	; 0xb2e <turnOffPWM+0x10>
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	b1 f0       	breq	.+44     	; 0xb54 <turnOffPWM+0x36>
     b28:	82 30       	cpi	r24, 0x02	; 2
     b2a:	c1 f0       	breq	.+48     	; 0xb5c <turnOffPWM+0x3e>
     b2c:	08 95       	ret
     b2e:	87 30       	cpi	r24, 0x07	; 7
     b30:	c9 f0       	breq	.+50     	; 0xb64 <turnOffPWM+0x46>
     b32:	88 30       	cpi	r24, 0x08	; 8
     b34:	e9 f0       	breq	.+58     	; 0xb70 <turnOffPWM+0x52>
     b36:	84 30       	cpi	r24, 0x04	; 4
     b38:	01 f5       	brne	.+64     	; 0xb7a <turnOffPWM+0x5c>
     b3a:	06 c0       	rjmp	.+12     	; 0xb48 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b3c:	e0 e8       	ldi	r30, 0x80	; 128
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	8f 77       	andi	r24, 0x7F	; 127
     b44:	80 83       	st	Z, r24
     b46:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b48:	e0 e8       	ldi	r30, 0x80	; 128
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	8f 7d       	andi	r24, 0xDF	; 223
     b50:	80 83       	st	Z, r24
     b52:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b54:	84 b5       	in	r24, 0x24	; 36
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	84 bd       	out	0x24, r24	; 36
     b5a:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b5c:	84 b5       	in	r24, 0x24	; 36
     b5e:	8f 7d       	andi	r24, 0xDF	; 223
     b60:	84 bd       	out	0x24, r24	; 36
     b62:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b64:	e0 eb       	ldi	r30, 0xB0	; 176
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	80 83       	st	Z, r24
     b6e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b70:	e0 eb       	ldi	r30, 0xB0	; 176
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8f 7d       	andi	r24, 0xDF	; 223
     b78:	80 83       	st	Z, r24
     b7a:	08 95       	ret

00000b7c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	fc 01       	movw	r30, r24
     b84:	e3 58       	subi	r30, 0x83	; 131
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b8a:	fc 01       	movw	r30, r24
     b8c:	ef 56       	subi	r30, 0x6F	; 111
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b92:	88 23       	and	r24, r24
     b94:	79 f1       	breq	.+94     	; 0xbf4 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	fc 01       	movw	r30, r24
     b9e:	e7 54       	subi	r30, 0x47	; 71
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	a5 91       	lpm	r26, Z+
     ba4:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     ba6:	fc 01       	movw	r30, r24
     ba8:	e1 55       	subi	r30, 0x51	; 81
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	c5 91       	lpm	r28, Z+
     bae:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     bb0:	61 11       	cpse	r22, r1
     bb2:	0c c0       	rjmp	.+24     	; 0xbcc <pinMode+0x50>
		uint8_t oldSREG = SREG;
     bb4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bb6:	f8 94       	cli
		*reg &= ~bit;
     bb8:	8c 91       	ld	r24, X
     bba:	e2 2f       	mov	r30, r18
     bbc:	e0 95       	com	r30
     bbe:	8e 23       	and	r24, r30
     bc0:	8c 93       	st	X, r24
		*out &= ~bit;
     bc2:	28 81       	ld	r18, Y
     bc4:	e2 23       	and	r30, r18
     bc6:	e8 83       	st	Y, r30
		SREG = oldSREG;
     bc8:	9f bf       	out	0x3f, r25	; 63
     bca:	14 c0       	rjmp	.+40     	; 0xbf4 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     bcc:	62 30       	cpi	r22, 0x02	; 2
     bce:	61 f4       	brne	.+24     	; 0xbe8 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     bd0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bd2:	f8 94       	cli
		*reg &= ~bit;
     bd4:	8c 91       	ld	r24, X
     bd6:	32 2f       	mov	r19, r18
     bd8:	30 95       	com	r19
     bda:	83 23       	and	r24, r19
     bdc:	8c 93       	st	X, r24
		*out |= bit;
     bde:	e8 81       	ld	r30, Y
     be0:	e2 2b       	or	r30, r18
     be2:	e8 83       	st	Y, r30
		SREG = oldSREG;
     be4:	9f bf       	out	0x3f, r25	; 63
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     be8:	8f b7       	in	r24, 0x3f	; 63
                cli();
     bea:	f8 94       	cli
		*reg |= bit;
     bec:	ec 91       	ld	r30, X
     bee:	e2 2b       	or	r30, r18
     bf0:	ec 93       	st	X, r30
		SREG = oldSREG;
     bf2:	8f bf       	out	0x3f, r24	; 63
	}
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	f9 01       	movw	r30, r18
     c06:	e7 59       	subi	r30, 0x97	; 151
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c0c:	f9 01       	movw	r30, r18
     c0e:	e3 58       	subi	r30, 0x83	; 131
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     c14:	f9 01       	movw	r30, r18
     c16:	ef 56       	subi	r30, 0x6F	; 111
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c1c:	cc 23       	and	r28, r28
     c1e:	d1 f0       	breq	.+52     	; 0xc54 <digitalWrite+0x5a>
     c20:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c22:	81 11       	cpse	r24, r1
     c24:	0e 94 8f 05 	call	0xb1e	; 0xb1e <turnOffPWM>

	out = portOutputRegister(port);
     c28:	ec 2f       	mov	r30, r28
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	e1 55       	subi	r30, 0x51	; 81
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	a5 91       	lpm	r26, Z+
     c36:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c38:	8f b7       	in	r24, 0x3f	; 63
	cli();
     c3a:	f8 94       	cli

	if (val == LOW) {
     c3c:	d1 11       	cpse	r29, r1
     c3e:	06 c0       	rjmp	.+12     	; 0xc4c <digitalWrite+0x52>
		*out &= ~bit;
     c40:	9c 91       	ld	r25, X
     c42:	e1 2f       	mov	r30, r17
     c44:	e0 95       	com	r30
     c46:	e9 23       	and	r30, r25
     c48:	ec 93       	st	X, r30
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <digitalWrite+0x58>
	} else {
		*out |= bit;
     c4c:	ec 91       	ld	r30, X
     c4e:	e1 2b       	or	r30, r17
     c50:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     c52:	8f bf       	out	0x3f, r24	; 63
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	08 95       	ret

00000c5c <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     c5c:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
     c60:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
     c64:	28 17       	cp	r18, r24
     c66:	39 07       	cpc	r19, r25
     c68:	99 f4       	brne	.+38     	; 0xc90 <_ZN14SoftwareSerial4readEv+0x34>
     c6a:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <_ZN14SoftwareSerial20_receive_buffer_headE>
     c6e:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     c72:	98 17       	cp	r25, r24
     c74:	81 f0       	breq	.+32     	; 0xc96 <_ZN14SoftwareSerial4readEv+0x3a>
     c76:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <_ZN14SoftwareSerial20_receive_buffer_headE>
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	e7 59       	subi	r30, 0x97	; 151
     c7e:	fb 4f       	sbci	r31, 0xFB	; 251
     c80:	80 81       	ld	r24, Z
     c82:	20 91 67 04 	lds	r18, 0x0467	; 0x800467 <_ZN14SoftwareSerial20_receive_buffer_headE>
     c86:	2f 5f       	subi	r18, 0xFF	; 255
     c88:	20 93 67 04 	sts	0x0467, r18	; 0x800467 <_ZN14SoftwareSerial20_receive_buffer_headE>
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	08 95       	ret
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	9f ef       	ldi	r25, 0xFF	; 255
     c94:	08 95       	ret
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	9f ef       	ldi	r25, 0xFF	; 255
     c9a:	08 95       	ret

00000c9c <_ZN14SoftwareSerial9availableEv>:
     c9c:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
     ca0:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
     ca4:	28 17       	cp	r18, r24
     ca6:	39 07       	cpc	r19, r25
     ca8:	99 f4       	brne	.+38     	; 0xcd0 <_ZN14SoftwareSerial9availableEv+0x34>
     caa:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     cae:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <_ZN14SoftwareSerial20_receive_buffer_headE>
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	33 95       	inc	r19
     cb6:	28 1b       	sub	r18, r24
     cb8:	31 09       	sbc	r19, r1
     cba:	30 78       	andi	r19, 0x80	; 128
     cbc:	33 23       	and	r19, r19
     cbe:	2c f4       	brge	.+10     	; 0xcca <_ZN14SoftwareSerial9availableEv+0x2e>
     cc0:	21 50       	subi	r18, 0x01	; 1
     cc2:	31 09       	sbc	r19, r1
     cc4:	3f 6f       	ori	r19, 0xFF	; 255
     cc6:	2f 5f       	subi	r18, 0xFF	; 255
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	82 2f       	mov	r24, r18
     ccc:	93 2f       	mov	r25, r19
     cce:	08 95       	ret
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	08 95       	ret

00000cd6 <_ZN14SoftwareSerial5writeEh>:
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	ec 01       	movw	r28, r24
     cde:	4c 8d       	ldd	r20, Y+28	; 0x1c
     ce0:	5d 8d       	ldd	r21, Y+29	; 0x1d
     ce2:	41 15       	cp	r20, r1
     ce4:	51 05       	cpc	r21, r1
     ce6:	29 f4       	brne	.+10     	; 0xcf2 <_ZN14SoftwareSerial5writeEh+0x1c>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	9b 83       	std	Y+3, r25	; 0x03
     cee:	8a 83       	std	Y+2, r24	; 0x02
     cf0:	38 c0       	rjmp	.+112    	; 0xd62 <_ZN14SoftwareSerial5writeEh+0x8c>
     cf2:	a9 89       	ldd	r26, Y+17	; 0x11
     cf4:	ba 89       	ldd	r27, Y+18	; 0x12
     cf6:	88 89       	ldd	r24, Y+16	; 0x10
     cf8:	38 2f       	mov	r19, r24
     cfa:	30 95       	com	r19
     cfc:	1f b7       	in	r17, 0x3f	; 63
     cfe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d00:	79 2f       	mov	r23, r25
     d02:	72 70       	andi	r23, 0x02	; 2
     d04:	91 fd       	sbrc	r25, 1
     d06:	60 95       	com	r22
     d08:	f8 94       	cli
     d0a:	77 23       	and	r23, r23
     d0c:	21 f0       	breq	.+8      	; 0xd16 <_ZN14SoftwareSerial5writeEh+0x40>
     d0e:	9c 91       	ld	r25, X
     d10:	98 2b       	or	r25, r24
     d12:	9c 93       	st	X, r25
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <_ZN14SoftwareSerial5writeEh+0x46>
     d16:	9c 91       	ld	r25, X
     d18:	93 23       	and	r25, r19
     d1a:	9c 93       	st	X, r25
     d1c:	fa 01       	movw	r30, r20
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <_ZN14SoftwareSerial5writeEh+0x48>
     d22:	98 e0       	ldi	r25, 0x08	; 8
     d24:	60 ff       	sbrs	r22, 0
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <_ZN14SoftwareSerial5writeEh+0x5a>
     d28:	2c 91       	ld	r18, X
     d2a:	28 2b       	or	r18, r24
     d2c:	2c 93       	st	X, r18
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <_ZN14SoftwareSerial5writeEh+0x60>
     d30:	2c 91       	ld	r18, X
     d32:	23 23       	and	r18, r19
     d34:	2c 93       	st	X, r18
     d36:	fa 01       	movw	r30, r20
     d38:	31 97       	sbiw	r30, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <_ZN14SoftwareSerial5writeEh+0x62>
     d3c:	66 95       	lsr	r22
     d3e:	91 50       	subi	r25, 0x01	; 1
     d40:	89 f7       	brne	.-30     	; 0xd24 <_ZN14SoftwareSerial5writeEh+0x4e>
     d42:	77 23       	and	r23, r23
     d44:	21 f0       	breq	.+8      	; 0xd4e <_ZN14SoftwareSerial5writeEh+0x78>
     d46:	8c 91       	ld	r24, X
     d48:	38 23       	and	r19, r24
     d4a:	3c 93       	st	X, r19
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <_ZN14SoftwareSerial5writeEh+0x7e>
     d4e:	9c 91       	ld	r25, X
     d50:	89 2b       	or	r24, r25
     d52:	8c 93       	st	X, r24
     d54:	1f bf       	out	0x3f, r17	; 63
     d56:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d58:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <_ZN14SoftwareSerial5writeEh+0x84>
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	ca 01       	movw	r24, r20
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	08 95       	ret

00000d6c <_ZN14SoftwareSerial5flushEv>:
     d6c:	08 95       	ret

00000d6e <_ZN14SoftwareSerial4peekEv>:
     d6e:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
     d72:	30 91 6a 05 	lds	r19, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
     d76:	28 17       	cp	r18, r24
     d78:	39 07       	cpc	r19, r25
     d7a:	71 f4       	brne	.+28     	; 0xd98 <_ZN14SoftwareSerial4peekEv+0x2a>
     d7c:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <_ZN14SoftwareSerial20_receive_buffer_headE>
     d80:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d84:	98 17       	cp	r25, r24
     d86:	59 f0       	breq	.+22     	; 0xd9e <_ZN14SoftwareSerial4peekEv+0x30>
     d88:	e0 91 67 04 	lds	r30, 0x0467	; 0x800467 <_ZN14SoftwareSerial20_receive_buffer_headE>
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	e7 59       	subi	r30, 0x97	; 151
     d90:	fb 4f       	sbci	r31, 0xFB	; 251
     d92:	80 81       	ld	r24, Z
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	08 95       	ret
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
     d9c:	08 95       	ret
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	9f ef       	ldi	r25, 0xFF	; 255
     da2:	08 95       	ret

00000da4 <_ZN14SoftwareSerial13stopListeningEv>:
     da4:	e0 91 69 05 	lds	r30, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
     da8:	f0 91 6a 05 	lds	r31, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
     dac:	e8 17       	cp	r30, r24
     dae:	f9 07       	cpc	r31, r25
     db0:	69 f4       	brne	.+26     	; 0xdcc <_ZN14SoftwareSerial13stopListeningEv+0x28>
     db2:	a3 89       	ldd	r26, Z+19	; 0x13
     db4:	b4 89       	ldd	r27, Z+20	; 0x14
     db6:	9c 91       	ld	r25, X
     db8:	85 89       	ldd	r24, Z+21	; 0x15
     dba:	80 95       	com	r24
     dbc:	89 23       	and	r24, r25
     dbe:	8c 93       	st	X, r24
     dc0:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
     dc4:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	08 95       	ret
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	08 95       	ret

00000dd0 <_ZN14SoftwareSerial6listenEv>:
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	ec 01       	movw	r28, r24
     dd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     dda:	89 2b       	or	r24, r25
     ddc:	f1 f0       	breq	.+60     	; 0xe1a <_ZN14SoftwareSerial6listenEv+0x4a>
     dde:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
     de2:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
     de6:	c8 17       	cp	r28, r24
     de8:	d9 07       	cpc	r29, r25
     dea:	c9 f0       	breq	.+50     	; 0xe1e <_ZN14SoftwareSerial6listenEv+0x4e>
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	11 f0       	breq	.+4      	; 0xdf4 <_ZN14SoftwareSerial6listenEv+0x24>
     df0:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN14SoftwareSerial13stopListeningEv>
     df4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     df6:	8e 7f       	andi	r24, 0xFE	; 254
     df8:	8e 8f       	std	Y+30, r24	; 0x1e
     dfa:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     dfe:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <_ZN14SoftwareSerial20_receive_buffer_headE>
     e02:	d0 93 6a 05 	sts	0x056A, r29	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
     e06:	c0 93 69 05 	sts	0x0569, r28	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
     e0a:	eb 89       	ldd	r30, Y+19	; 0x13
     e0c:	fc 89       	ldd	r31, Y+20	; 0x14
     e0e:	90 81       	ld	r25, Z
     e10:	8d 89       	ldd	r24, Y+21	; 0x15
     e12:	89 2b       	or	r24, r25
     e14:	80 83       	st	Z, r24
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <_ZN14SoftwareSerial6listenEv+0x50>
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <_ZN14SoftwareSerial6listenEv+0x50>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <__vector_3>:
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
     e4c:	a0 91 69 05 	lds	r26, 0x0569	; 0x800569 <_ZN14SoftwareSerial13active_objectE>
     e50:	b0 91 6a 05 	lds	r27, 0x056A	; 0x80056a <_ZN14SoftwareSerial13active_objectE+0x1>
     e54:	10 97       	sbiw	r26, 0x00	; 0
     e56:	09 f4       	brne	.+2      	; 0xe5a <__vector_3+0x34>
     e58:	78 c0       	rjmp	.+240    	; 0xf4a <__vector_3+0x124>
     e5a:	5e 96       	adiw	r26, 0x1e	; 30
     e5c:	8c 91       	ld	r24, X
     e5e:	5e 97       	sbiw	r26, 0x1e	; 30
     e60:	81 ff       	sbrs	r24, 1
     e62:	0d c0       	rjmp	.+26     	; 0xe7e <__vector_3+0x58>
     e64:	1e 96       	adiw	r26, 0x0e	; 14
     e66:	ed 91       	ld	r30, X+
     e68:	fc 91       	ld	r31, X
     e6a:	1f 97       	sbiw	r26, 0x0f	; 15
     e6c:	90 81       	ld	r25, Z
     e6e:	1d 96       	adiw	r26, 0x0d	; 13
     e70:	8c 91       	ld	r24, X
     e72:	1d 97       	sbiw	r26, 0x0d	; 13
     e74:	98 23       	and	r25, r24
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	71 f4       	brne	.+28     	; 0xe96 <__vector_3+0x70>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0c c0       	rjmp	.+24     	; 0xe96 <__vector_3+0x70>
     e7e:	1e 96       	adiw	r26, 0x0e	; 14
     e80:	ed 91       	ld	r30, X+
     e82:	fc 91       	ld	r31, X
     e84:	1f 97       	sbiw	r26, 0x0f	; 15
     e86:	90 81       	ld	r25, Z
     e88:	1d 96       	adiw	r26, 0x0d	; 13
     e8a:	8c 91       	ld	r24, X
     e8c:	1d 97       	sbiw	r26, 0x0d	; 13
     e8e:	98 23       	and	r25, r24
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	09 f0       	breq	.+2      	; 0xe96 <__vector_3+0x70>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	88 23       	and	r24, r24
     e98:	09 f4       	brne	.+2      	; 0xe9c <__vector_3+0x76>
     e9a:	57 c0       	rjmp	.+174    	; 0xf4a <__vector_3+0x124>
     e9c:	53 96       	adiw	r26, 0x13	; 19
     e9e:	ed 91       	ld	r30, X+
     ea0:	fc 91       	ld	r31, X
     ea2:	54 97       	sbiw	r26, 0x14	; 20
     ea4:	90 81       	ld	r25, Z
     ea6:	55 96       	adiw	r26, 0x15	; 21
     ea8:	8c 91       	ld	r24, X
     eaa:	55 97       	sbiw	r26, 0x15	; 21
     eac:	80 95       	com	r24
     eae:	89 23       	and	r24, r25
     eb0:	80 83       	st	Z, r24
     eb2:	56 96       	adiw	r26, 0x16	; 22
     eb4:	8d 91       	ld	r24, X+
     eb6:	9c 91       	ld	r25, X
     eb8:	57 97       	sbiw	r26, 0x17	; 23
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <__vector_3+0x94>
     ebe:	58 96       	adiw	r26, 0x18	; 24
     ec0:	6d 91       	ld	r22, X+
     ec2:	7c 91       	ld	r23, X
     ec4:	59 97       	sbiw	r26, 0x19	; 25
     ec6:	1e 96       	adiw	r26, 0x0e	; 14
     ec8:	cd 91       	ld	r28, X+
     eca:	dc 91       	ld	r29, X
     ecc:	1f 97       	sbiw	r26, 0x0f	; 15
     ece:	1d 96       	adiw	r26, 0x0d	; 13
     ed0:	5c 91       	ld	r21, X
     ed2:	1d 97       	sbiw	r26, 0x0d	; 13
     ed4:	38 e0       	ldi	r19, 0x08	; 8
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	fb 01       	movw	r30, r22
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	f1 f7       	brne	.-4      	; 0xeda <__vector_3+0xb4>
     ede:	84 2f       	mov	r24, r20
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	95 95       	asr	r25
     ee4:	87 95       	ror	r24
     ee6:	48 2f       	mov	r20, r24
     ee8:	28 81       	ld	r18, Y
     eea:	25 23       	and	r18, r21
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_3+0xca>
     eee:	40 68       	ori	r20, 0x80	; 128
     ef0:	31 50       	subi	r19, 0x01	; 1
     ef2:	91 f7       	brne	.-28     	; 0xed8 <__vector_3+0xb2>
     ef4:	5e 96       	adiw	r26, 0x1e	; 30
     ef6:	8c 91       	ld	r24, X
     ef8:	5e 97       	sbiw	r26, 0x1e	; 30
     efa:	81 fd       	sbrc	r24, 1
     efc:	40 95       	com	r20
     efe:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f02:	8f 5f       	subi	r24, 0xFF	; 255
     f04:	20 91 67 04 	lds	r18, 0x0467	; 0x800467 <_ZN14SoftwareSerial20_receive_buffer_headE>
     f08:	28 17       	cp	r18, r24
     f0a:	49 f0       	breq	.+18     	; 0xf1e <__vector_3+0xf8>
     f0c:	e0 91 68 04 	lds	r30, 0x0468	; 0x800468 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	e7 59       	subi	r30, 0x97	; 151
     f14:	fb 4f       	sbci	r31, 0xFB	; 251
     f16:	40 83       	st	Z, r20
     f18:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <__vector_3+0x106>
     f1e:	5e 96       	adiw	r26, 0x1e	; 30
     f20:	8c 91       	ld	r24, X
     f22:	5e 97       	sbiw	r26, 0x1e	; 30
     f24:	81 60       	ori	r24, 0x01	; 1
     f26:	5e 96       	adiw	r26, 0x1e	; 30
     f28:	8c 93       	st	X, r24
     f2a:	5e 97       	sbiw	r26, 0x1e	; 30
     f2c:	5a 96       	adiw	r26, 0x1a	; 26
     f2e:	8d 91       	ld	r24, X+
     f30:	9c 91       	ld	r25, X
     f32:	5b 97       	sbiw	r26, 0x1b	; 27
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <__vector_3+0x10e>
     f38:	53 96       	adiw	r26, 0x13	; 19
     f3a:	ed 91       	ld	r30, X+
     f3c:	fc 91       	ld	r31, X
     f3e:	54 97       	sbiw	r26, 0x14	; 20
     f40:	90 81       	ld	r25, Z
     f42:	55 96       	adiw	r26, 0x15	; 21
     f44:	8c 91       	ld	r24, X
     f46:	89 2b       	or	r24, r25
     f48:	80 83       	st	Z, r24
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <_ZN14SoftwareSerial5setTXEh>:
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	16 2f       	mov	r17, r22
     f7a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f7c:	66 95       	lsr	r22
     f7e:	61 70       	andi	r22, 0x01	; 1
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	68 27       	eor	r22, r24
     f84:	81 2f       	mov	r24, r17
     f86:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	81 2f       	mov	r24, r17
     f8e:	0e 94 be 05 	call	0xb7c	; 0xb7c <pinMode>
     f92:	81 2f       	mov	r24, r17
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	fc 01       	movw	r30, r24
     f98:	e3 58       	subi	r30, 0x83	; 131
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	e4 91       	lpm	r30, Z
     f9e:	e8 8b       	std	Y+16, r30	; 0x10
     fa0:	fc 01       	movw	r30, r24
     fa2:	ef 56       	subi	r30, 0x6F	; 111
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	e4 91       	lpm	r30, Z
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	e1 55       	subi	r30, 0x51	; 81
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	85 91       	lpm	r24, Z+
     fb4:	94 91       	lpm	r25, Z
     fb6:	9a 8b       	std	Y+18, r25	; 0x12
     fb8:	89 8b       	std	Y+17, r24	; 0x11
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	08 95       	ret

00000fc2 <_ZN14SoftwareSerial5setRXEh>:
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	ec 01       	movw	r28, r24
     fca:	16 2f       	mov	r17, r22
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	81 2f       	mov	r24, r17
     fd0:	0e 94 be 05 	call	0xb7c	; 0xb7c <pinMode>
     fd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd6:	81 fd       	sbrc	r24, 1
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <_ZN14SoftwareSerial5setRXEh+0x20>
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	81 2f       	mov	r24, r17
     fde:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
     fe2:	1c 87       	std	Y+12, r17	; 0x0c
     fe4:	61 2f       	mov	r22, r17
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	fb 01       	movw	r30, r22
     fea:	e3 58       	subi	r30, 0x83	; 131
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	e4 91       	lpm	r30, Z
     ff0:	ed 87       	std	Y+13, r30	; 0x0d
     ff2:	fb 01       	movw	r30, r22
     ff4:	ef 56       	subi	r30, 0x6F	; 111
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	e4 91       	lpm	r30, Z
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	eb 55       	subi	r30, 0x5B	; 91
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	85 91       	lpm	r24, Z+
    1006:	94 91       	lpm	r25, Z
    1008:	9f 87       	std	Y+15, r25	; 0x0f
    100a:	8e 87       	std	Y+14, r24	; 0x0e
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	08 95       	ret

00001014 <_ZN14SoftwareSerialC1Ehhb>:
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	ec 01       	movw	r28, r24
    101c:	16 2f       	mov	r17, r22
    101e:	1b 82       	std	Y+3, r1	; 0x03
    1020:	1a 82       	std	Y+2, r1	; 0x02
    1022:	88 ee       	ldi	r24, 0xE8	; 232
    1024:	93 e0       	ldi	r25, 0x03	; 3
    1026:	a0 e0       	ldi	r26, 0x00	; 0
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	8c 83       	std	Y+4, r24	; 0x04
    102c:	9d 83       	std	Y+5, r25	; 0x05
    102e:	ae 83       	std	Y+6, r26	; 0x06
    1030:	bf 83       	std	Y+7, r27	; 0x07
    1032:	86 e3       	ldi	r24, 0x36	; 54
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	99 83       	std	Y+1, r25	; 0x01
    1038:	88 83       	st	Y, r24
    103a:	1f 8a       	std	Y+23, r1	; 0x17
    103c:	1e 8a       	std	Y+22, r1	; 0x16
    103e:	19 8e       	std	Y+25, r1	; 0x19
    1040:	18 8e       	std	Y+24, r1	; 0x18
    1042:	1b 8e       	std	Y+27, r1	; 0x1b
    1044:	1a 8e       	std	Y+26, r1	; 0x1a
    1046:	1d 8e       	std	Y+29, r1	; 0x1d
    1048:	1c 8e       	std	Y+28, r1	; 0x1c
    104a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    104c:	8e 7f       	andi	r24, 0xFE	; 254
    104e:	20 fb       	bst	r18, 0
    1050:	81 f9       	bld	r24, 1
    1052:	8e 8f       	std	Y+30, r24	; 0x1e
    1054:	64 2f       	mov	r22, r20
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 b8 07 	call	0xf70	; 0xf70 <_ZN14SoftwareSerial5setTXEh>
    105c:	61 2f       	mov	r22, r17
    105e:	ce 01       	movw	r24, r28
    1060:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN14SoftwareSerial5setRXEh>
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	08 95       	ret

0000106c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	ec 01       	movw	r28, r24
    1072:	9a 01       	movw	r18, r20
    1074:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    1076:	1b 8e       	std	Y+27, r1	; 0x1b
    1078:	1a 8e       	std	Y+26, r1	; 0x1a
    107a:	19 8e       	std	Y+25, r1	; 0x19
    107c:	18 8e       	std	Y+24, r1	; 0x18
    107e:	1f 8a       	std	Y+23, r1	; 0x17
    1080:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	79 e0       	ldi	r23, 0x09	; 9
    1086:	8d e3       	ldi	r24, 0x3D	; 61
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__udivmodsi4>
    108e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1090:	24 30       	cpi	r18, 0x04	; 4
    1092:	31 05       	cpc	r19, r1
    1094:	18 f0       	brcs	.+6      	; 0x109c <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    1096:	c9 01       	movw	r24, r18
    1098:	03 97       	sbiw	r24, 0x03	; 3
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    10a0:	9d 8f       	std	Y+29, r25	; 0x1d
    10a2:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    10a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10a6:	86 31       	cpi	r24, 0x16	; 22
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <_ZN14SoftwareSerial5beginEl+0x40>
    10aa:	41 c0       	rjmp	.+130    	; 0x112e <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    10ac:	b9 01       	movw	r22, r18
    10ae:	76 95       	lsr	r23
    10b0:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    10b2:	64 31       	cpi	r22, 0x14	; 20
    10b4:	71 05       	cpc	r23, r1
    10b6:	18 f0       	brcs	.+6      	; 0x10be <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
    10b8:	63 51       	subi	r22, 0x13	; 19
    10ba:	71 09       	sbc	r23, r1
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    10c2:	7f 8b       	std	Y+23, r23	; 0x17
    10c4:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    10c6:	36 97       	sbiw	r30, 0x06	; 6
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
    10ca:	b9 01       	movw	r22, r18
    10cc:	65 50       	subi	r22, 0x05	; 5
    10ce:	71 09       	sbc	r23, r1
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    10d6:	79 8f       	std	Y+25, r23	; 0x19
    10d8:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    10da:	b9 01       	movw	r22, r18
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	26 0f       	add	r18, r22
    10e2:	37 1f       	adc	r19, r23
    10e4:	36 95       	lsr	r19
    10e6:	27 95       	ror	r18
    10e8:	36 95       	lsr	r19
    10ea:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    10ec:	2d 30       	cpi	r18, 0x0D	; 13
    10ee:	31 05       	cpc	r19, r1
    10f0:	10 f1       	brcs	.+68     	; 0x1136 <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
    10f2:	2c 50       	subi	r18, 0x0C	; 12
    10f4:	31 09       	sbc	r19, r1
    10f6:	21 c0       	rjmp	.+66     	; 0x113a <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    10f8:	21 e0       	ldi	r18, 0x01	; 1
    10fa:	8e 30       	cpi	r24, 0x0E	; 14
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <_ZN14SoftwareSerial5beginEl+0x94>
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <_ZN14SoftwareSerial5beginEl+0x9a>
    1104:	88 0f       	add	r24, r24
    1106:	2a 95       	dec	r18
    1108:	ea f7       	brpl	.-6      	; 0x1104 <_ZN14SoftwareSerial5beginEl+0x98>
    110a:	98 2b       	or	r25, r24
    110c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1110:	9c 85       	ldd	r25, Y+12	; 0x0c
    1112:	98 30       	cpi	r25, 0x08	; 8
    1114:	d0 f0       	brcs	.+52     	; 0x114a <_ZN14SoftwareSerial5beginEl+0xde>
    1116:	9e 30       	cpi	r25, 0x0E	; 14
    1118:	10 f1       	brcs	.+68     	; 0x115e <_ZN14SoftwareSerial5beginEl+0xf2>
    111a:	96 31       	cpi	r25, 0x16	; 22
    111c:	58 f1       	brcs	.+86     	; 0x1174 <_ZN14SoftwareSerial5beginEl+0x108>
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	2a c0       	rjmp	.+84     	; 0x1178 <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1124:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1126:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1128:	9d 8d       	ldd	r25, Y+29	; 0x1d
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN14SoftwareSerial6listenEv>
}
    1134:	2a c0       	rjmp	.+84     	; 0x118a <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    113a:	3b 8f       	std	Y+27, r19	; 0x1b
    113c:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    113e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	c8 f6       	brcc	.-78     	; 0x10f8 <_ZN14SoftwareSerial5beginEl+0x8c>
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	e0 cf       	rjmp	.-64     	; 0x110a <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    114a:	2d e6       	ldi	r18, 0x6D	; 109
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3c 8b       	std	Y+20, r19	; 0x14
    1150:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <_ZN14SoftwareSerial5beginEl+0xec>
    1156:	88 0f       	add	r24, r24
    1158:	9a 95       	dec	r25
    115a:	ea f7       	brpl	.-6      	; 0x1156 <_ZN14SoftwareSerial5beginEl+0xea>
    115c:	e3 cf       	rjmp	.-58     	; 0x1124 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    115e:	2b e6       	ldi	r18, 0x6B	; 107
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3c 8b       	std	Y+20, r19	; 0x14
    1164:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1166:	98 50       	subi	r25, 0x08	; 8
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	01 c0       	rjmp	.+2      	; 0x116e <_ZN14SoftwareSerial5beginEl+0x102>
    116c:	88 0f       	add	r24, r24
    116e:	9a 95       	dec	r25
    1170:	ea f7       	brpl	.-6      	; 0x116c <_ZN14SoftwareSerial5beginEl+0x100>
    1172:	d8 cf       	rjmp	.-80     	; 0x1124 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1174:	2c e6       	ldi	r18, 0x6C	; 108
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3c 8b       	std	Y+20, r19	; 0x14
    117a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    117c:	9e 50       	subi	r25, 0x0E	; 14
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <_ZN14SoftwareSerial5beginEl+0x118>
    1182:	88 0f       	add	r24, r24
    1184:	9a 95       	dec	r25
    1186:	ea f7       	brpl	.-6      	; 0x1182 <_ZN14SoftwareSerial5beginEl+0x116>
    1188:	cd cf       	rjmp	.-102    	; 0x1124 <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <_ZN25AuthorizationHandlerClassC1EP21GsmCommunicationClass>:
{
	GsmCommunication = NewCommunication;
} //AuthorizationHandlerClass

// default destructor
AuthorizationHandlerClass::~AuthorizationHandlerClass()
    1190:	fc 01       	movw	r30, r24
    1192:	71 83       	std	Z+1, r23	; 0x01
    1194:	60 83       	st	Z, r22
    1196:	08 95       	ret

00001198 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_>:
			Serial.write("Number DECLINED \n\n");
		}
	}
}

int AuthorizationHandlerClass::checkAuthorization(char *nrToCheck, ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass *ContactDirectoryPermanent){
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	7b 01       	movw	r14, r22
    11aa:	ea 01       	movw	r28, r20
    11ac:	89 01       	movw	r16, r18
	
	ContactDirectoryTemporary->showContactList();	// for debug
    11ae:	ca 01       	movw	r24, r20
    11b0:	0e 94 2d 0b 	call	0x165a	; 0x165a <_ZN21ContactDirectoryClass15showContactListEv>
	ContactDirectoryPermanent->showContactList();
    11b4:	c8 01       	movw	r24, r16
    11b6:	0e 94 2d 0b 	call	0x165a	; 0x165a <_ZN21ContactDirectoryClass15showContactListEv>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    11ba:	0f 2e       	mov	r0, r31
    11bc:	f4 eb       	ldi	r31, 0xB4	; 180
    11be:	cf 2e       	mov	r12, r31
    11c0:	f3 e0       	ldi	r31, 0x03	; 3
    11c2:	df 2e       	mov	r13, r31
    11c4:	f0 2d       	mov	r31, r0
    11c6:	d6 01       	movw	r26, r12
    11c8:	ed 91       	ld	r30, X+
    11ca:	fc 91       	ld	r31, X
    11cc:	02 80       	ldd	r0, Z+2	; 0x02
    11ce:	f3 81       	ldd	r31, Z+3	; 0x03
    11d0:	e0 2d       	mov	r30, r0
    11d2:	43 e1       	ldi	r20, 0x13	; 19
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	64 e4       	ldi	r22, 0x44	; 68
    11d8:	71 e0       	ldi	r23, 0x01	; 1
    11da:	c6 01       	movw	r24, r12
    11dc:	09 95       	icall
	
	char displayString[100] = {0};
	
	Serial.write("CheckAuthorization\n");
	
	ContactClass *currentContact = ContactDirectoryTemporary->head;
    11de:	09 90       	ld	r0, Y+
    11e0:	d8 81       	ld	r29, Y
    11e2:	c0 2d       	mov	r28, r0
    11e4:	d6 01       	movw	r26, r12
    11e6:	ed 91       	ld	r30, X+
    11e8:	fc 91       	ld	r31, X
    11ea:	02 80       	ldd	r0, Z+2	; 0x02
    11ec:	f3 81       	ldd	r31, Z+3	; 0x03
    11ee:	e0 2d       	mov	r30, r0
    11f0:	4b e1       	ldi	r20, 0x1B	; 27
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	68 e5       	ldi	r22, 0x58	; 88
    11f6:	71 e0       	ldi	r23, 0x01	; 1
    11f8:	c6 01       	movw	r24, r12
    11fa:	09 95       	icall
    11fc:	62 e0       	ldi	r22, 0x02	; 2
    11fe:	70 e0       	ldi	r23, 0x00	; 0
	int numberOfMatchingDigits = 0;
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
	
	// check temporary numbers
	Serial.write("phone numbers in Contacts:\n");
	for(int v=0; v<2; v++){					// check Permanent and Temporary
		while(currentContact != NULL){		// until end of list reached
    1204:	20 97       	sbiw	r28, 0x00	; 0
    1206:	01 f1       	breq	.+64     	; 0x1248 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_+0xb0>
			for(int u=0; nrToCheck[u] != '\0'; u++){
    1208:	f7 01       	movw	r30, r14
    120a:	40 81       	ld	r20, Z
    120c:	54 2f       	mov	r21, r20
    120e:	44 23       	and	r20, r20
    1210:	a1 f0       	breq	.+40     	; 0x123a <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_+0xa2>
    1212:	d7 01       	movw	r26, r14
    1214:	11 96       	adiw	r26, 0x01	; 1
    1216:	85 2f       	mov	r24, r21
				if(nrToCheck[u] == currentContact->phoneNumber[numberOfMatchingDigits]){ // compare the single digits
    1218:	fe 01       	movw	r30, r28
    121a:	e2 0f       	add	r30, r18
    121c:	f3 1f       	adc	r31, r19
    121e:	92 a9       	ldd	r25, Z+50	; 0x32
    1220:	98 13       	cpse	r25, r24
    1222:	06 c0       	rjmp	.+12     	; 0x1230 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_+0x98>
					numberOfMatchingDigits++;
    1224:	2f 5f       	subi	r18, 0xFF	; 255
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
				}else{
					numberOfMatchingDigits = 0;
				}
				if(numberOfMatchingDigits >= MATCHING_DIGITS){	// return 1 if Number matches
    1228:	29 30       	cpi	r18, 0x09	; 9
    122a:	31 05       	cpc	r19, r1
    122c:	1c f0       	brlt	.+6      	; 0x1234 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_+0x9c>
    122e:	15 c0       	rjmp	.+42     	; 0x125a <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_+0xc2>
		while(currentContact != NULL){		// until end of list reached
			for(int u=0; nrToCheck[u] != '\0'; u++){
				if(nrToCheck[u] == currentContact->phoneNumber[numberOfMatchingDigits]){ // compare the single digits
					numberOfMatchingDigits++;
				}else{
					numberOfMatchingDigits = 0;
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
	
	// check temporary numbers
	Serial.write("phone numbers in Contacts:\n");
	for(int v=0; v<2; v++){					// check Permanent and Temporary
		while(currentContact != NULL){		// until end of list reached
			for(int u=0; nrToCheck[u] != '\0'; u++){
    1234:	8d 91       	ld	r24, X+
    1236:	81 11       	cpse	r24, r1
    1238:	ef cf       	rjmp	.-34     	; 0x1218 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_+0x80>
				}
				if(numberOfMatchingDigits >= MATCHING_DIGITS){	// return 1 if Number matches
					return(1);
				}
			}
			currentContact = currentContact->next;	// rearch in next contact in the list
    123a:	ca 5b       	subi	r28, 0xBA	; 186
    123c:	df 4f       	sbci	r29, 0xFF	; 255
    123e:	09 90       	ld	r0, Y+
    1240:	d8 81       	ld	r29, Y
    1242:	c0 2d       	mov	r28, r0
	int numberOfMatchingDigits = 0;
	
	// check temporary numbers
	Serial.write("phone numbers in Contacts:\n");
	for(int v=0; v<2; v++){					// check Permanent and Temporary
		while(currentContact != NULL){		// until end of list reached
    1244:	20 97       	sbiw	r28, 0x00	; 0
    1246:	19 f7       	brne	.-58     	; 0x120e <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_+0x76>
					return(1);
				}
			}
			currentContact = currentContact->next;	// rearch in next contact in the list
		}	
		currentContact = ContactDirectoryPermanent->head;
    1248:	d8 01       	movw	r26, r16
    124a:	cd 91       	ld	r28, X+
    124c:	dc 91       	ld	r29, X
    124e:	61 50       	subi	r22, 0x01	; 1
    1250:	71 09       	sbc	r23, r1
	ContactClass *currentContact = ContactDirectoryTemporary->head;
	int numberOfMatchingDigits = 0;
	
	// check temporary numbers
	Serial.write("phone numbers in Contacts:\n");
	for(int v=0; v<2; v++){					// check Permanent and Temporary
    1252:	c1 f6       	brne	.-80     	; 0x1204 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_+0x6c>
			}
			currentContact = currentContact->next;	// rearch in next contact in the list
		}	
		currentContact = ContactDirectoryPermanent->head;
	}
	return(0);		// return 0 if no matching phone number was detected
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 c0       	rjmp	.+4      	; 0x125e <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_+0xc6>
					numberOfMatchingDigits++;
				}else{
					numberOfMatchingDigits = 0;
				}
				if(numberOfMatchingDigits >= MATCHING_DIGITS){	// return 1 if Number matches
					return(1);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
			currentContact = currentContact->next;	// rearch in next contact in the list
		}	
		currentContact = ContactDirectoryPermanent->head;
	}
	return(0);		// return 0 if no matching phone number was detected
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	08 95       	ret

00001270 <_ZN25AuthorizationHandlerClass10answerCallEv>:

void AuthorizationHandlerClass::answerCall(){
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
	
	// hang up incoming Call
	GsmCommunication->sendAtCmd("ATA");
    1276:	64 e7       	ldi	r22, 0x74	; 116
    1278:	71 e0       	ldi	r23, 0x01	; 1
    127a:	88 81       	ld	r24, Y
    127c:	99 81       	ldd	r25, Y+1	; 0x01
    127e:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <_ZN21GsmCommunicationClass9sendAtCmdEPc>
	GsmCommunication->readSerial();
    1282:	88 81       	ld	r24, Y
    1284:	99 81       	ldd	r25, Y+1	; 0x01
    1286:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN21GsmCommunicationClass10readSerialEv>
	GsmCommunication->sendAtCmd("AT+CVHU=0");
    128a:	68 e7       	ldi	r22, 0x78	; 120
    128c:	71 e0       	ldi	r23, 0x01	; 1
    128e:	88 81       	ld	r24, Y
    1290:	99 81       	ldd	r25, Y+1	; 0x01
    1292:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <_ZN21GsmCommunicationClass9sendAtCmdEPc>
	GsmCommunication->readSerial();
    1296:	88 81       	ld	r24, Y
    1298:	99 81       	ldd	r25, Y+1	; 0x01
    129a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN21GsmCommunicationClass10readSerialEv>
	GsmCommunication->sendAtCmd("ATH");
    129e:	62 e8       	ldi	r22, 0x82	; 130
    12a0:	71 e0       	ldi	r23, 0x01	; 1
    12a2:	88 81       	ld	r24, Y
    12a4:	99 81       	ldd	r25, Y+1	; 0x01
    12a6:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <_ZN21GsmCommunicationClass9sendAtCmdEPc>
	GsmCommunication->readSerial();
    12aa:	88 81       	ld	r24, Y
    12ac:	99 81       	ldd	r25, Y+1	; 0x01
    12ae:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN21GsmCommunicationClass10readSerialEv>
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_>:
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/

void AuthorizationHandlerClass::handleReceivedCall(ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass *ContactDirectoryPermanent){
    12b8:	cf 92       	push	r12
    12ba:	df 92       	push	r13
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	ec 01       	movw	r28, r24
    12ca:	6b 01       	movw	r12, r22
    12cc:	7a 01       	movw	r14, r20
	
	if(strstr(GsmCommunication->receiveBuffer, "RING") != NULL){ // if call received
    12ce:	08 81       	ld	r16, Y
    12d0:	19 81       	ldd	r17, Y+1	; 0x01
    12d2:	66 e8       	ldi	r22, 0x86	; 134
    12d4:	71 e0       	ldi	r23, 0x01	; 1
    12d6:	c8 01       	movw	r24, r16
    12d8:	04 96       	adiw	r24, 0x04	; 4
    12da:	0e 94 a2 11 	call	0x2344	; 0x2344 <strstr>
    12de:	89 2b       	or	r24, r25
    12e0:	a1 f1       	breq	.+104    	; 0x134a <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_+0x92>
		
		// check phone Number from caller
		GsmCommunication->sendAtCmd((char*)"AT+CLCC");	
    12e2:	6b e8       	ldi	r22, 0x8B	; 139
    12e4:	71 e0       	ldi	r23, 0x01	; 1
    12e6:	c8 01       	movw	r24, r16
    12e8:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <_ZN21GsmCommunicationClass9sendAtCmdEPc>
		GsmCommunication->readSerial();
    12ec:	88 81       	ld	r24, Y
    12ee:	99 81       	ldd	r25, Y+1	; 0x01
    12f0:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN21GsmCommunicationClass10readSerialEv>
		
		
		
		if(checkAuthorization((char*)&GsmCommunication->receiveBuffer,ContactDirectoryTemporary,ContactDirectoryPermanent) == 1){	// if Nr of caller is authorized
    12f4:	68 81       	ld	r22, Y
    12f6:	79 81       	ldd	r23, Y+1	; 0x01
    12f8:	6c 5f       	subi	r22, 0xFC	; 252
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	97 01       	movw	r18, r14
    12fe:	a6 01       	movw	r20, r12
    1300:	ce 01       	movw	r24, r28
    1302:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_>
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	91 f4       	brne	.+36     	; 0x132e <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_+0x76>
    130a:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    130e:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    1312:	02 80       	ldd	r0, Z+2	; 0x02
    1314:	f3 81       	ldd	r31, Z+3	; 0x03
    1316:	e0 2d       	mov	r30, r0
    1318:	41 e2       	ldi	r20, 0x21	; 33
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	63 e9       	ldi	r22, 0x93	; 147
    131e:	71 e0       	ldi	r23, 0x01	; 1
    1320:	84 eb       	ldi	r24, 0xB4	; 180
    1322:	93 e0       	ldi	r25, 0x03	; 3
    1324:	09 95       	icall
			Serial.write("Number authorized -> OPEN LOCK \n\n");
			answerCall();		
    1326:	ce 01       	movw	r24, r28
    1328:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN25AuthorizationHandlerClass10answerCallEv>
    132c:	0e c0       	rjmp	.+28     	; 0x134a <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_+0x92>
    132e:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1332:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    1336:	02 80       	ldd	r0, Z+2	; 0x02
    1338:	f3 81       	ldd	r31, Z+3	; 0x03
    133a:	e0 2d       	mov	r30, r0
    133c:	42 e1       	ldi	r20, 0x12	; 18
    133e:	50 e0       	ldi	r21, 0x00	; 0
    1340:	65 eb       	ldi	r22, 0xB5	; 181
    1342:	71 e0       	ldi	r23, 0x01	; 1
    1344:	84 eb       	ldi	r24, 0xB4	; 180
    1346:	93 e0       	ldi	r25, 0x03	; 3
    1348:	09 95       	icall
			// open lock
		}else{
			Serial.write("Number DECLINED \n\n");
		}
	}
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	ef 90       	pop	r14
    1356:	df 90       	pop	r13
    1358:	cf 90       	pop	r12
    135a:	08 95       	ret

0000135c <_ZN15CmdContactClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>:
CmdContactClass::CmdContactClass(GsmCommunicationClass *NewGsmCommunication, AuthorizationHandlerClass *NewAuthorizationHandler) :SmsHandlerClass(NewGsmCommunication,NewAuthorizationHandler)
{
} //CmdContactClass

// default destructor
CmdContactClass::~CmdContactClass()
    135c:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>
    1360:	08 95       	ret

00001362 <_ZN15CmdContactClass12removePrefixEPcS0_>:
	newSmsReceived == false;
}

void CmdContactClass::removePrefix(char *phoneNumber, char *smsMsg){

    int stringLength = strlen(smsMsg)-2; // string length 2 more
    1362:	da 01       	movw	r26, r20
    1364:	0d 90       	ld	r0, X+
    1366:	00 20       	and	r0, r0
    1368:	e9 f7       	brne	.-6      	; 0x1364 <_ZN15CmdContactClass12removePrefixEPcS0_+0x2>
    136a:	11 97       	sbiw	r26, 0x01	; 1
    136c:	a4 1b       	sub	r26, r20
    136e:	b5 0b       	sbc	r27, r21
    //Serial.println(stringLength);		// for debugging

    // remove prefix
    if(stringLength>9){
    1370:	cd 01       	movw	r24, r26
    1372:	02 97       	sbiw	r24, 0x02	; 2
    1374:	0a 97       	sbiw	r24, 0x0a	; 10
    1376:	6c f0       	brlt	.+26     	; 0x1392 <_ZN15CmdContactClass12removePrefixEPcS0_+0x30>
    1378:	1b 97       	sbiw	r26, 0x0b	; 11
    137a:	fa 01       	movw	r30, r20
    137c:	ea 0f       	add	r30, r26
    137e:	fb 1f       	adc	r31, r27
    1380:	db 01       	movw	r26, r22
    1382:	9b 01       	movw	r18, r22
    1384:	27 5f       	subi	r18, 0xF7	; 247
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
        for(int u=0; u<9; u++){
            phoneNumber[u] = smsMsg[u+(stringLength-9)];
    1388:	81 91       	ld	r24, Z+
    138a:	8d 93       	st	X+, r24
    int stringLength = strlen(smsMsg)-2; // string length 2 more
    //Serial.println(stringLength);		// for debugging

    // remove prefix
    if(stringLength>9){
        for(int u=0; u<9; u++){
    138c:	a2 17       	cp	r26, r18
    138e:	b3 07       	cpc	r27, r19
    1390:	d9 f7       	brne	.-10     	; 0x1388 <_ZN15CmdContactClass12removePrefixEPcS0_+0x26>
            phoneNumber[u] = smsMsg[u+(stringLength-9)];
        }
    }
	phoneNumber[9] = '\0';
    1392:	fb 01       	movw	r30, r22
    1394:	11 86       	std	Z+9, r1	; 0x09
    1396:	08 95       	ret

00001398 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 31.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void CmdContactClass::executeSmsCmd(ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass *ContactDirectoryPermanent){
    1398:	cf 92       	push	r12
    139a:	df 92       	push	r13
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	ec 97       	sbiw	r28, 0x3c	; 60
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
	
	if(newSmsReceived == true){
    13b8:	fc 01       	movw	r30, r24
    13ba:	ec 5f       	subi	r30, 0xFC	; 252
    13bc:	fe 4f       	sbci	r31, 0xFE	; 254
    13be:	20 81       	ld	r18, Z
    13c0:	22 23       	and	r18, r18
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x2e>
    13c4:	70 c0       	rjmp	.+224    	; 0x14a6 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x10e>
		char newPhoneNumber[10] = {0};
    13c6:	8e 01       	movw	r16, r28
    13c8:	0d 5c       	subi	r16, 0xCD	; 205
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	2a e0       	ldi	r18, 0x0A	; 10
    13ce:	d8 01       	movw	r26, r16
    13d0:	1d 92       	st	X+, r1
    13d2:	2a 95       	dec	r18
    13d4:	e9 f7       	brne	.-6      	; 0x13d0 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x38>
		char newName[NAME_SIZE] = {0};
    13d6:	de 01       	movw	r26, r28
    13d8:	11 96       	adiw	r26, 0x01	; 1
    13da:	22 e3       	ldi	r18, 0x32	; 50
    13dc:	fd 01       	movw	r30, r26
    13de:	11 92       	st	Z+, r1
    13e0:	2a 95       	dec	r18
    13e2:	e9 f7       	brne	.-6      	; 0x13de <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x46>
			
		strcpy(newName,"Unknown");
    13e4:	28 e0       	ldi	r18, 0x08	; 8
    13e6:	e8 ec       	ldi	r30, 0xC8	; 200
    13e8:	f1 e0       	ldi	r31, 0x01	; 1
    13ea:	01 90       	ld	r0, Z+
    13ec:	0d 92       	st	X+, r0
    13ee:	2a 95       	dec	r18
    13f0:	e1 f7       	brne	.-8      	; 0x13ea <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x52>
		removePrefix((char*)&newPhoneNumber,(char*)&smsMsg);
    13f2:	7c 01       	movw	r14, r24
    13f4:	f4 e0       	ldi	r31, 0x04	; 4
    13f6:	ef 0e       	add	r14, r31
    13f8:	f1 1c       	adc	r15, r1
    13fa:	a7 01       	movw	r20, r14
    13fc:	b8 01       	movw	r22, r16
    13fe:	0e 94 b1 09 	call	0x1362	; 0x1362 <_ZN15CmdContactClass12removePrefixEPcS0_>
    1402:	0f 2e       	mov	r0, r31
    1404:	f4 eb       	ldi	r31, 0xB4	; 180
    1406:	cf 2e       	mov	r12, r31
    1408:	f3 e0       	ldi	r31, 0x03	; 3
    140a:	df 2e       	mov	r13, r31
    140c:	f0 2d       	mov	r31, r0
    140e:	d6 01       	movw	r26, r12
    1410:	ed 91       	ld	r30, X+
    1412:	fc 91       	ld	r31, X
    1414:	02 80       	ldd	r0, Z+2	; 0x02
    1416:	f3 81       	ldd	r31, Z+3	; 0x03
    1418:	e0 2d       	mov	r30, r0
    141a:	41 e1       	ldi	r20, 0x11	; 17
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	60 ed       	ldi	r22, 0xD0	; 208
    1420:	71 e0       	ldi	r23, 0x01	; 1
    1422:	c6 01       	movw	r24, r12
    1424:	09 95       	icall
    1426:	f8 01       	movw	r30, r16
    1428:	01 90       	ld	r0, Z+
    142a:	00 20       	and	r0, r0
    142c:	e9 f7       	brne	.-6      	; 0x1428 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x90>
    142e:	31 97       	sbiw	r30, 0x01	; 1
    1430:	af 01       	movw	r20, r30
    1432:	40 1b       	sub	r20, r16
    1434:	51 0b       	sbc	r21, r17
    1436:	d6 01       	movw	r26, r12
    1438:	ed 91       	ld	r30, X+
    143a:	fc 91       	ld	r31, X
    143c:	02 80       	ldd	r0, Z+2	; 0x02
    143e:	f3 81       	ldd	r31, Z+3	; 0x03
    1440:	e0 2d       	mov	r30, r0
    1442:	b8 01       	movw	r22, r16
    1444:	c6 01       	movw	r24, r12
    1446:	09 95       	icall
    1448:	d6 01       	movw	r26, r12
    144a:	ed 91       	ld	r30, X+
    144c:	fc 91       	ld	r31, X
    144e:	02 80       	ldd	r0, Z+2	; 0x02
    1450:	f3 81       	ldd	r31, Z+3	; 0x03
    1452:	e0 2d       	mov	r30, r0
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	6b e3       	ldi	r22, 0x3B	; 59
    145a:	73 e0       	ldi	r23, 0x03	; 3
    145c:	c6 01       	movw	r24, r12
    145e:	09 95       	icall
		
		Serial.write("Number received: ");
		Serial.write(newPhoneNumber);
		Serial.write("\n");
			
			if(strstr(smsMsg,"Master:") != NULL){
    1460:	62 ee       	ldi	r22, 0xE2	; 226
    1462:	71 e0       	ldi	r23, 0x01	; 1
    1464:	c7 01       	movw	r24, r14
    1466:	0e 94 a2 11 	call	0x2344	; 0x2344 <strstr>
    146a:	89 2b       	or	r24, r25
    146c:	71 f0       	breq	.+28     	; 0x148a <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0xf2>
    146e:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1472:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    1476:	02 80       	ldd	r0, Z+2	; 0x02
    1478:	f3 81       	ldd	r31, Z+3	; 0x03
    147a:	e0 2d       	mov	r30, r0
    147c:	48 e1       	ldi	r20, 0x18	; 24
    147e:	50 e0       	ldi	r21, 0x00	; 0
    1480:	6a ee       	ldi	r22, 0xEA	; 234
    1482:	71 e0       	ldi	r23, 0x01	; 1
    1484:	c6 01       	movw	r24, r12
    1486:	09 95       	icall
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x10e>
    148a:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    148e:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    1492:	02 80       	ldd	r0, Z+2	; 0x02
    1494:	f3 81       	ldd	r31, Z+3	; 0x03
    1496:	e0 2d       	mov	r30, r0
    1498:	48 e1       	ldi	r20, 0x18	; 24
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	63 e0       	ldi	r22, 0x03	; 3
    149e:	72 e0       	ldi	r23, 0x02	; 2
    14a0:	84 eb       	ldi	r24, 0xB4	; 180
    14a2:	93 e0       	ldi	r25, 0x03	; 3
    14a4:	09 95       	icall
				Serial.write("Should add temporary.. \n");
				//ContactDirectoryTemporary->addContact(&newName[0],&newPhoneNumber[0],TEMPORARY);
			}
	}
	newSmsReceived == false;
}
    14a6:	ec 96       	adiw	r28, 0x3c	; 60
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	cf 90       	pop	r12
    14c2:	08 95       	ret

000014c4 <_ZN12ContactClassC1EPcS0_>:
/* Class data declaration      */

/* Class procedure declaration */

// default constructor
ContactClass::ContactClass(char *NewName, char *NewphoneNumber)
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	ec 01       	movw	r28, r24
    14ce:	8a 01       	movw	r16, r20
    14d0:	fc 01       	movw	r30, r24
    14d2:	ea 5b       	subi	r30, 0xBA	; 186
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	11 82       	std	Z+1, r1	; 0x01
    14d8:	10 82       	st	Z, r1
    14da:	32 96       	adiw	r30, 0x02	; 2
    14dc:	11 82       	std	Z+1, r1	; 0x01
    14de:	10 82       	st	Z, r1
{
	next = NULL;
	prev = NULL;
	strcpy(Name, NewName);
    14e0:	0e 94 9b 11 	call	0x2336	; 0x2336 <strcpy>
	strcpy(phoneNumber,NewphoneNumber);
    14e4:	b8 01       	movw	r22, r16
    14e6:	ce 01       	movw	r24, r28
    14e8:	c2 96       	adiw	r24, 0x32	; 50
    14ea:	0e 94 9b 11 	call	0x2336	; 0x2336 <strcpy>
} //ContactClass
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	08 95       	ret

000014f8 <_ZN21ContactDirectoryClassC1EPc>:
	tail = NULL;
	strcpy(listName,newListName);
} //ContactDirectoryClass

// default destructor
ContactDirectoryClass::~ContactDirectoryClass()
    14f8:	fc 01       	movw	r30, r24
    14fa:	11 82       	std	Z+1, r1	; 0x01
    14fc:	10 82       	st	Z, r1
    14fe:	13 82       	std	Z+3, r1	; 0x03
    1500:	12 82       	std	Z+2, r1	; 0x02
    1502:	04 96       	adiw	r24, 0x04	; 4
    1504:	0e 94 9b 11 	call	0x2336	; 0x2336 <strcpy>
    1508:	08 95       	ret

0000150a <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass>:
		
		//tempEeprom.eepromToContactDirectory(this);
	}	
}

void ContactDirectoryClass::pushFront(ContactClass *newContact){
    150a:	fc 01       	movw	r30, r24
	if(head == NULL){
    150c:	20 81       	ld	r18, Z
    150e:	31 81       	ldd	r19, Z+1	; 0x01
    1510:	21 15       	cp	r18, r1
    1512:	31 05       	cpc	r19, r1
    1514:	19 f4       	brne	.+6      	; 0x151c <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass+0x12>
		tail = newContact;
    1516:	73 83       	std	Z+3, r23	; 0x03
    1518:	62 83       	std	Z+2, r22	; 0x02
    151a:	05 c0       	rjmp	.+10     	; 0x1526 <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass+0x1c>
	}else{
		head->prev = newContact;
    151c:	d9 01       	movw	r26, r18
    151e:	a8 5b       	subi	r26, 0xB8	; 184
    1520:	bf 4f       	sbci	r27, 0xFF	; 255
    1522:	6d 93       	st	X+, r22
    1524:	7c 93       	st	X, r23
	}
	newContact->next = head;
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	db 01       	movw	r26, r22
    152c:	aa 5b       	subi	r26, 0xBA	; 186
    152e:	bf 4f       	sbci	r27, 0xFF	; 255
    1530:	8d 93       	st	X+, r24
    1532:	9c 93       	st	X, r25
	head = newContact;
    1534:	71 83       	std	Z+1, r23	; 0x01
    1536:	60 83       	st	Z, r22
	newContact->prev = NULL;
    1538:	fb 01       	movw	r30, r22
    153a:	e8 5b       	subi	r30, 0xB8	; 184
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	11 82       	std	Z+1, r1	; 0x01
    1540:	10 82       	st	Z, r1
    1542:	08 95       	ret

00001544 <_ZN21ContactDirectoryClass10addContactEPcS0_i>:
ContactDirectoryClass::~ContactDirectoryClass()
{
} //~ContactDirectoryClass

// does not work correctly
void ContactDirectoryClass::addContact(char *newName, char *newPhoneNr, int priority){
    1544:	af 92       	push	r10
    1546:	bf 92       	push	r11
    1548:	cf 92       	push	r12
    154a:	df 92       	push	r13
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	00 d0       	rcall	.+0      	; 0x155a <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x16>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	6c 01       	movw	r12, r24
    1560:	7b 01       	movw	r14, r22
    1562:	8a 01       	movw	r16, r20
			

	
	// add temporary data into List until power off
	if(priority == TEMPORARY){
    1564:	21 30       	cpi	r18, 0x01	; 1
    1566:	31 05       	cpc	r19, r1
    1568:	09 f0       	breq	.+2      	; 0x156c <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x28>
    156a:	52 c0       	rjmp	.+164    	; 0x1610 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xcc>
			
			ContactClass *newContact; 	// new Contact
			newContact = new ContactClass(newName, newPhoneNr);
    156c:	8a e4       	ldi	r24, 0x4A	; 74
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_Znwj>
    1574:	5c 01       	movw	r10, r24
    1576:	a8 01       	movw	r20, r16
    1578:	b7 01       	movw	r22, r14
    157a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <_ZN12ContactClassC1EPcS0_>
			
			if(newContact == 0){		// immer Nullpointer bei zweitem versuch??? wird nicht erkennt won if??
    157e:	a1 14       	cp	r10, r1
    1580:	b1 04       	cpc	r11, r1
    1582:	79 f4       	brne	.+30     	; 0x15a2 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x5e>
    1584:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1588:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    158c:	02 80       	ldd	r0, Z+2	; 0x02
    158e:	f3 81       	ldd	r31, Z+3	; 0x03
    1590:	e0 2d       	mov	r30, r0
    1592:	4d e1       	ldi	r20, 0x1D	; 29
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	6c e1       	ldi	r22, 0x1C	; 28
    1598:	72 e0       	ldi	r23, 0x02	; 2
    159a:	84 eb       	ldi	r24, 0xB4	; 180
    159c:	93 e0       	ldi	r25, 0x03	; 3
    159e:	09 95       	icall
    15a0:	4f c0       	rjmp	.+158    	; 0x1640 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xfc>
				Serial.write("eeror new Contact not created");
			}else{
			
				pushFront(newContact);	// add to List
    15a2:	b5 01       	movw	r22, r10
    15a4:	c6 01       	movw	r24, r12
    15a6:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass>
    15aa:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    15ae:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    15b2:	02 80       	ldd	r0, Z+2	; 0x02
    15b4:	f3 81       	ldd	r31, Z+3	; 0x03
    15b6:	e0 2d       	mov	r30, r0
    15b8:	49 e0       	ldi	r20, 0x09	; 9
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	6a e3       	ldi	r22, 0x3A	; 58
    15be:	72 e0       	ldi	r23, 0x02	; 2
    15c0:	84 eb       	ldi	r24, 0xB4	; 180
    15c2:	93 e0       	ldi	r25, 0x03	; 3
    15c4:	09 95       	icall
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    15c6:	01 15       	cp	r16, r1
    15c8:	11 05       	cpc	r17, r1
    15ca:	99 f0       	breq	.+38     	; 0x15f2 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xae>
      return write((const uint8_t *)str, strlen(str));
    15cc:	f8 01       	movw	r30, r16
    15ce:	01 90       	ld	r0, Z+
    15d0:	00 20       	and	r0, r0
    15d2:	e9 f7       	brne	.-6      	; 0x15ce <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x8a>
    15d4:	31 97       	sbiw	r30, 0x01	; 1
    15d6:	af 01       	movw	r20, r30
    15d8:	40 1b       	sub	r20, r16
    15da:	51 0b       	sbc	r21, r17
    15dc:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    15e0:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    15e4:	02 80       	ldd	r0, Z+2	; 0x02
    15e6:	f3 81       	ldd	r31, Z+3	; 0x03
    15e8:	e0 2d       	mov	r30, r0
    15ea:	b8 01       	movw	r22, r16
    15ec:	84 eb       	ldi	r24, 0xB4	; 180
    15ee:	93 e0       	ldi	r25, 0x03	; 3
    15f0:	09 95       	icall
    15f2:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    15f6:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    15fa:	02 80       	ldd	r0, Z+2	; 0x02
    15fc:	f3 81       	ldd	r31, Z+3	; 0x03
    15fe:	e0 2d       	mov	r30, r0
    1600:	44 e1       	ldi	r20, 0x14	; 20
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	64 e4       	ldi	r22, 0x44	; 68
    1606:	72 e0       	ldi	r23, 0x02	; 2
    1608:	84 eb       	ldi	r24, 0xB4	; 180
    160a:	93 e0       	ldi	r25, 0x03	; 3
    160c:	09 95       	icall
    160e:	18 c0       	rjmp	.+48     	; 0x1640 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xfc>
			}
	}
	
	// add Permanent
	
	if(priority == PERMANENT){
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	31 05       	cpc	r19, r1
    1614:	a9 f4       	brne	.+42     	; 0x1640 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xfc>
		EepromClass tempEeprom;
    1616:	ce 01       	movw	r24, r28
    1618:	01 96       	adiw	r24, 0x01	; 1
    161a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN11EepromClassC1Ev>
		tempEeprom.addContactToEeprom(newName, newPhoneNr);	// add new Contact to Eeprom
    161e:	a8 01       	movw	r20, r16
    1620:	b7 01       	movw	r22, r14
    1622:	ce 01       	movw	r24, r28
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <_ZN11EepromClass18addContactToEepromEPcS0_>
		
		addContact(newName,newPhoneNr,TEMPORARY);			// add new Contact to Contact List Permenant
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	a8 01       	movw	r20, r16
    1630:	b7 01       	movw	r22, r14
    1632:	c6 01       	movw	r24, r12
    1634:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN21ContactDirectoryClass10addContactEPcS0_i>
	}
	
	// add Permanent
	
	if(priority == PERMANENT){
		EepromClass tempEeprom;
    1638:	ce 01       	movw	r24, r28
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	0e 94 b2 0b 	call	0x1764	; 0x1764 <_ZN11EepromClassD1Ev>
		
		addContact(newName,newPhoneNr,TEMPORARY);			// add new Contact to Contact List Permenant
		
		//tempEeprom.eepromToContactDirectory(this);
	}	
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
    1654:	bf 90       	pop	r11
    1656:	af 90       	pop	r10
    1658:	08 95       	ret

0000165a <_ZN21ContactDirectoryClass15showContactListEv>:
	newContact->next = head;
	head = newContact;
	newContact->prev = NULL;
}

void ContactDirectoryClass::showContactList(){
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
	ContactClass *currentContact = tail;
    1662:	dc 01       	movw	r26, r24
    1664:	12 96       	adiw	r26, 0x02	; 2
    1666:	cd 91       	ld	r28, X+
    1668:	dc 91       	ld	r29, X
    166a:	13 97       	sbiw	r26, 0x03	; 3
	char displayString2[100] = {0};
		
		//sprintf(displayString2,"Displays Contacts from Contact Directory List: %s \n", this->listName);
		//Serial.write(displayString2);
		
		Serial.write(this->listName);
    166c:	bc 01       	movw	r22, r24
    166e:	6c 5f       	subi	r22, 0xFC	; 252
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1672:	91 f0       	breq	.+36     	; 0x1698 <_ZN21ContactDirectoryClass15showContactListEv+0x3e>
      return write((const uint8_t *)str, strlen(str));
    1674:	fb 01       	movw	r30, r22
    1676:	01 90       	ld	r0, Z+
    1678:	00 20       	and	r0, r0
    167a:	e9 f7       	brne	.-6      	; 0x1676 <_ZN21ContactDirectoryClass15showContactListEv+0x1c>
    167c:	31 97       	sbiw	r30, 0x01	; 1
    167e:	af 01       	movw	r20, r30
    1680:	46 1b       	sub	r20, r22
    1682:	57 0b       	sbc	r21, r23
    1684:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1688:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    168c:	02 80       	ldd	r0, Z+2	; 0x02
    168e:	f3 81       	ldd	r31, Z+3	; 0x03
    1690:	e0 2d       	mov	r30, r0
    1692:	84 eb       	ldi	r24, 0xB4	; 180
    1694:	93 e0       	ldi	r25, 0x03	; 3
    1696:	09 95       	icall
    1698:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    169c:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    16a0:	02 80       	ldd	r0, Z+2	; 0x02
    16a2:	f3 81       	ldd	r31, Z+3	; 0x03
    16a4:	e0 2d       	mov	r30, r0
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	6b e3       	ldi	r22, 0x3B	; 59
    16ac:	73 e0       	ldi	r23, 0x03	; 3
    16ae:	84 eb       	ldi	r24, 0xB4	; 180
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	09 95       	icall
		Serial.write("\n");

	
		while(currentContact != NULL){
    16b4:	20 97       	sbiw	r28, 0x00	; 0
    16b6:	09 f4       	brne	.+2      	; 0x16ba <_ZN21ContactDirectoryClass15showContactListEv+0x60>
    16b8:	49 c0       	rjmp	.+146    	; 0x174c <_ZN21ContactDirectoryClass15showContactListEv+0xf2>
    16ba:	04 eb       	ldi	r16, 0xB4	; 180
    16bc:	13 e0       	ldi	r17, 0x03	; 3
			//sprintf(displayString1,"phone number: %s		Name: %s \n", currentContact->phoneNumber, currentContact->Name);
			//Serial.write(displayString1);
		
			Serial.write(currentContact->phoneNumber);
    16be:	be 01       	movw	r22, r28
    16c0:	6e 5c       	subi	r22, 0xCE	; 206
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    16c4:	81 f0       	breq	.+32     	; 0x16e6 <_ZN21ContactDirectoryClass15showContactListEv+0x8c>
      return write((const uint8_t *)str, strlen(str));
    16c6:	fb 01       	movw	r30, r22
    16c8:	01 90       	ld	r0, Z+
    16ca:	00 20       	and	r0, r0
    16cc:	e9 f7       	brne	.-6      	; 0x16c8 <_ZN21ContactDirectoryClass15showContactListEv+0x6e>
    16ce:	31 97       	sbiw	r30, 0x01	; 1
    16d0:	af 01       	movw	r20, r30
    16d2:	46 1b       	sub	r20, r22
    16d4:	57 0b       	sbc	r21, r23
    16d6:	d8 01       	movw	r26, r16
    16d8:	ed 91       	ld	r30, X+
    16da:	fc 91       	ld	r31, X
    16dc:	02 80       	ldd	r0, Z+2	; 0x02
    16de:	f3 81       	ldd	r31, Z+3	; 0x03
    16e0:	e0 2d       	mov	r30, r0
    16e2:	c8 01       	movw	r24, r16
    16e4:	09 95       	icall
    16e6:	d8 01       	movw	r26, r16
    16e8:	ed 91       	ld	r30, X+
    16ea:	fc 91       	ld	r31, X
    16ec:	02 80       	ldd	r0, Z+2	; 0x02
    16ee:	f3 81       	ldd	r31, Z+3	; 0x03
    16f0:	e0 2d       	mov	r30, r0
    16f2:	45 e0       	ldi	r20, 0x05	; 5
    16f4:	50 e0       	ldi	r21, 0x00	; 0
    16f6:	69 e5       	ldi	r22, 0x59	; 89
    16f8:	72 e0       	ldi	r23, 0x02	; 2
    16fa:	c8 01       	movw	r24, r16
    16fc:	09 95       	icall
			Serial.write("     ");
			Serial.write(currentContact->Name);
    16fe:	fe 01       	movw	r30, r28
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1700:	20 97       	sbiw	r28, 0x00	; 0
    1702:	81 f0       	breq	.+32     	; 0x1724 <_ZN21ContactDirectoryClass15showContactListEv+0xca>
      return write((const uint8_t *)str, strlen(str));
    1704:	01 90       	ld	r0, Z+
    1706:	00 20       	and	r0, r0
    1708:	e9 f7       	brne	.-6      	; 0x1704 <_ZN21ContactDirectoryClass15showContactListEv+0xaa>
    170a:	31 97       	sbiw	r30, 0x01	; 1
    170c:	af 01       	movw	r20, r30
    170e:	4c 1b       	sub	r20, r28
    1710:	5d 0b       	sbc	r21, r29
    1712:	d8 01       	movw	r26, r16
    1714:	ed 91       	ld	r30, X+
    1716:	fc 91       	ld	r31, X
    1718:	02 80       	ldd	r0, Z+2	; 0x02
    171a:	f3 81       	ldd	r31, Z+3	; 0x03
    171c:	e0 2d       	mov	r30, r0
    171e:	be 01       	movw	r22, r28
    1720:	c8 01       	movw	r24, r16
    1722:	09 95       	icall
    1724:	d8 01       	movw	r26, r16
    1726:	ed 91       	ld	r30, X+
    1728:	fc 91       	ld	r31, X
    172a:	02 80       	ldd	r0, Z+2	; 0x02
    172c:	f3 81       	ldd	r31, Z+3	; 0x03
    172e:	e0 2d       	mov	r30, r0
    1730:	41 e0       	ldi	r20, 0x01	; 1
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	6b e3       	ldi	r22, 0x3B	; 59
    1736:	73 e0       	ldi	r23, 0x03	; 3
    1738:	c8 01       	movw	r24, r16
    173a:	09 95       	icall
			Serial.write("\n");
		
			currentContact = currentContact->next;
    173c:	ca 5b       	subi	r28, 0xBA	; 186
    173e:	df 4f       	sbci	r29, 0xFF	; 255
    1740:	09 90       	ld	r0, Y+
    1742:	d8 81       	ld	r29, Y
    1744:	c0 2d       	mov	r28, r0
		
		Serial.write(this->listName);
		Serial.write("\n");

	
		while(currentContact != NULL){
    1746:	20 97       	sbiw	r28, 0x00	; 0
    1748:	09 f0       	breq	.+2      	; 0x174c <_ZN21ContactDirectoryClass15showContactListEv+0xf2>
    174a:	b9 cf       	rjmp	.-142    	; 0x16be <_ZN21ContactDirectoryClass15showContactListEv+0x64>
			Serial.write(currentContact->Name);
			Serial.write("\n");
		
			currentContact = currentContact->next;
		}
		delay(1000);	// for debug
    174c:	68 ee       	ldi	r22, 0xE8	; 232
    174e:	73 e0       	ldi	r23, 0x03	; 3
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 0e 05 	call	0xa1c	; 0xa1c <delay>
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	08 95       	ret

00001762 <_ZN11EepromClassC1Ev>:
/* Class data declaration      */

/* Class procedure declaration */

// default constructor
EepromClass::EepromClass()
    1762:	08 95       	ret

00001764 <_ZN11EepromClassD1Ev>:
{
} //EepromClass

// default destructor
EepromClass::~EepromClass()
    1764:	08 95       	ret

00001766 <_ZN11EepromClass16getEepromAddressEv>:
	Serial.write("Added...\"");
	Serial.write(newPhoneNr);
	Serial.write("\" to EEPROM \n\n");
}

int EepromClass::getEepromAddress(){
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	c0 e0       	ldi	r28, 0x00	; 0
    176c:	d0 e0       	ldi	r29, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    176e:	ce 01       	movw	r24, r28
    1770:	0e 94 bc 11 	call	0x2378	; 0x2378 <eeprom_read_byte>
	for(int address=0; address < EEPROM.length();address++){
		if(EEPROM.read(address)== 0){
    1774:	88 23       	and	r24, r24
    1776:	41 f0       	breq	.+16     	; 0x1788 <_ZN11EepromClass16getEepromAddressEv+0x22>
	Serial.write(newPhoneNr);
	Serial.write("\" to EEPROM \n\n");
}

int EepromClass::getEepromAddress(){
	for(int address=0; address < EEPROM.length();address++){
    1778:	21 96       	adiw	r28, 0x01	; 1
    177a:	c1 15       	cp	r28, r1
    177c:	84 e0       	ldi	r24, 0x04	; 4
    177e:	d8 07       	cpc	r29, r24
    1780:	b1 f7       	brne	.-20     	; 0x176e <_ZN11EepromClass16getEepromAddressEv+0x8>
		if(EEPROM.read(address)== 0){
			return(address);
		}
	}
	return(EEPROM.length());
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	94 e0       	ldi	r25, 0x04	; 4
    1786:	02 c0       	rjmp	.+4      	; 0x178c <_ZN11EepromClass16getEepromAddressEv+0x26>
    1788:	8c 2f       	mov	r24, r28
    178a:	9d 2f       	mov	r25, r29
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	08 95       	ret

00001792 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass>:
// default destructor
EepromClass::~EepromClass()
{
} //~EepromClass

void EepromClass::eepromToContactDirectory(ContactDirectoryClass *ContactDirectoryPermanent){
    1792:	2f 92       	push	r2
    1794:	3f 92       	push	r3
    1796:	4f 92       	push	r4
    1798:	5f 92       	push	r5
    179a:	6f 92       	push	r6
    179c:	7f 92       	push	r7
    179e:	8f 92       	push	r8
    17a0:	9f 92       	push	r9
    17a2:	af 92       	push	r10
    17a4:	bf 92       	push	r11
    17a6:	cf 92       	push	r12
    17a8:	df 92       	push	r13
    17aa:	ef 92       	push	r14
    17ac:	ff 92       	push	r15
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	c6 54       	subi	r28, 0x46	; 70
    17bc:	d1 09       	sbc	r29, r1
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	3c 01       	movw	r6, r24
    17ca:	2b 01       	movw	r4, r22
	
	eepromAddress = getEepromAddress();
    17cc:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN11EepromClass16getEepromAddressEv>
    17d0:	d3 01       	movw	r26, r6
    17d2:	8d 93       	st	X+, r24
    17d4:	9c 93       	st	X, r25
	char tempNumber[PHONE_NR_SIZE]={0};
    17d6:	fe 01       	movw	r30, r28
    17d8:	31 96       	adiw	r30, 0x01	; 1
    17da:	24 e1       	ldi	r18, 0x14	; 20
    17dc:	df 01       	movw	r26, r30
    17de:	1d 92       	st	X+, r1
    17e0:	2a 95       	dec	r18
    17e2:	e9 f7       	brne	.-6      	; 0x17de <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x4c>
	char tempName[NAME_SIZE]={0};
    17e4:	74 96       	adiw	r30, 0x14	; 20
    17e6:	22 e3       	ldi	r18, 0x32	; 50
    17e8:	df 01       	movw	r26, r30
    17ea:	1d 92       	st	X+, r1
    17ec:	2a 95       	dec	r18
    17ee:	e9 f7       	brne	.-6      	; 0x17ea <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x58>
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
    17f0:	18 16       	cp	r1, r24
    17f2:	19 06       	cpc	r1, r25
    17f4:	0c f0       	brlt	.+2      	; 0x17f8 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x66>
    17f6:	55 c0       	rjmp	.+170    	; 0x18a2 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x110>
    17f8:	5f 01       	movw	r10, r30
    17fa:	74 97       	sbiw	r30, 0x14	; 20
    17fc:	7f 01       	movw	r14, r30
    17fe:	00 e0       	ldi	r16, 0x00	; 0
    1800:	10 e0       	ldi	r17, 0x00	; 0
    1802:	81 2c       	mov	r8, r1
    1804:	91 2c       	mov	r9, r1
    1806:	c1 2c       	mov	r12, r1
    1808:	d1 2c       	mov	r13, r1
			}else{
				tempName[i] = '\0';			// end name string
				
				// add contact readed out of eeprom to contact List
				ContactDirectoryPermanent->addContact((char*)&tempName,(char*)&tempNumber,TEMPORARY);	
				state = 0;
    180a:	21 2c       	mov	r2, r1
    180c:	31 2c       	mov	r3, r1
    180e:	c8 01       	movw	r24, r16
    1810:	0e 94 bc 11 	call	0x2378	; 0x2378 <eeprom_read_byte>
	char tempName[NAME_SIZE]={0};
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
		if(EEPROM.read(i) == ','){			// change state if number or name ended
    1814:	8c 32       	cpi	r24, 0x2C	; 44
    1816:	e1 f4       	brne	.+56     	; 0x1850 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xbe>
			v=0;
			if(state == 0){					// toggle between states
    1818:	89 28       	or	r8, r9
    181a:	41 f4       	brne	.+16     	; 0x182c <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x9a>
				tempNumber[i] = '\0';		// end number string
    181c:	d7 01       	movw	r26, r14
    181e:	1c 92       	st	X, r1
				state = 1;
    1820:	88 24       	eor	r8, r8
    1822:	83 94       	inc	r8
    1824:	91 2c       	mov	r9, r1
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
		if(EEPROM.read(i) == ','){			// change state if number or name ended
			v=0;
    1826:	c1 2c       	mov	r12, r1
    1828:	d1 2c       	mov	r13, r1
    182a:	2c c0       	rjmp	.+88     	; 0x1884 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xf2>
			if(state == 0){					// toggle between states
				tempNumber[i] = '\0';		// end number string
				state = 1;
			}else{
				tempName[i] = '\0';			// end name string
    182c:	f5 01       	movw	r30, r10
    182e:	10 82       	st	Z, r1
				
				// add contact readed out of eeprom to contact List
				ContactDirectoryPermanent->addContact((char*)&tempName,(char*)&tempNumber,TEMPORARY);	
    1830:	21 e0       	ldi	r18, 0x01	; 1
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	ae 01       	movw	r20, r28
    1836:	4f 5f       	subi	r20, 0xFF	; 255
    1838:	5f 4f       	sbci	r21, 0xFF	; 255
    183a:	be 01       	movw	r22, r28
    183c:	6b 5e       	subi	r22, 0xEB	; 235
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	c2 01       	movw	r24, r4
    1842:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN21ContactDirectoryClass10addContactEPcS0_i>
				state = 0;
    1846:	82 2c       	mov	r8, r2
    1848:	93 2c       	mov	r9, r3
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
		if(EEPROM.read(i) == ','){			// change state if number or name ended
			v=0;
    184a:	c1 2c       	mov	r12, r1
    184c:	d1 2c       	mov	r13, r1
    184e:	1a c0       	rjmp	.+52     	; 0x1884 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xf2>
				// add contact readed out of eeprom to contact List
				ContactDirectoryPermanent->addContact((char*)&tempName,(char*)&tempNumber,TEMPORARY);	
				state = 0;
			}
		}else{
			switch(state){
    1850:	81 14       	cp	r8, r1
    1852:	91 04       	cpc	r9, r1
    1854:	29 f0       	breq	.+10     	; 0x1860 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xce>
    1856:	f1 e0       	ldi	r31, 0x01	; 1
    1858:	8f 16       	cp	r8, r31
    185a:	91 04       	cpc	r9, r1
    185c:	49 f0       	breq	.+18     	; 0x1870 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xde>
    185e:	0f c0       	rjmp	.+30     	; 0x187e <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xec>
				case 0:	// read number
					tempNumber[v]=EEPROM.read(i);						
    1860:	e1 e0       	ldi	r30, 0x01	; 1
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	ec 0f       	add	r30, r28
    1866:	fd 1f       	adc	r31, r29
    1868:	ec 0d       	add	r30, r12
    186a:	fd 1d       	adc	r31, r13
    186c:	80 83       	st	Z, r24
				break;
    186e:	07 c0       	rjmp	.+14     	; 0x187e <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xec>
		
				case 1: // read name
					tempName[v] = EEPROM.read(i);	
    1870:	e5 e1       	ldi	r30, 0x15	; 21
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	ec 0f       	add	r30, r28
    1876:	fd 1f       	adc	r31, r29
    1878:	ec 0d       	add	r30, r12
    187a:	fd 1d       	adc	r31, r13
    187c:	80 83       	st	Z, r24
				break;
			}
			v++;
    187e:	8f ef       	ldi	r24, 0xFF	; 255
    1880:	c8 1a       	sub	r12, r24
    1882:	d8 0a       	sbc	r13, r24
	char tempNumber[PHONE_NR_SIZE]={0};
	char tempName[NAME_SIZE]={0};
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
    1884:	0f 5f       	subi	r16, 0xFF	; 255
    1886:	1f 4f       	sbci	r17, 0xFF	; 255
    1888:	9f ef       	ldi	r25, 0xFF	; 255
    188a:	a9 1a       	sub	r10, r25
    188c:	b9 0a       	sbc	r11, r25
    188e:	af ef       	ldi	r26, 0xFF	; 255
    1890:	ea 1a       	sub	r14, r26
    1892:	fa 0a       	sbc	r15, r26
    1894:	f3 01       	movw	r30, r6
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	08 17       	cp	r16, r24
    189c:	19 07       	cpc	r17, r25
    189e:	0c f4       	brge	.+2      	; 0x18a2 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x110>
    18a0:	b6 cf       	rjmp	.-148    	; 0x180e <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x7c>
				break;
			}
			v++;
		}
	}
}
    18a2:	ca 5b       	subi	r28, 0xBA	; 186
    18a4:	df 4f       	sbci	r29, 0xFF	; 255
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
    18c0:	bf 90       	pop	r11
    18c2:	af 90       	pop	r10
    18c4:	9f 90       	pop	r9
    18c6:	8f 90       	pop	r8
    18c8:	7f 90       	pop	r7
    18ca:	6f 90       	pop	r6
    18cc:	5f 90       	pop	r5
    18ce:	4f 90       	pop	r4
    18d0:	3f 90       	pop	r3
    18d2:	2f 90       	pop	r2
    18d4:	08 95       	ret

000018d6 <_ZN11EepromClass18addContactToEepromEPcS0_>:

void EepromClass::addContactToEeprom(char *newName, char *newPhoneNr){
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	ec 01       	movw	r28, r24
    18e8:	8b 01       	movw	r16, r22
    18ea:	7a 01       	movw	r14, r20
		
	eepromAddress = getEepromAddress();							// "Phone_Number0","Name0","Phone_Number1","Name1",...
    18ec:	0e 94 b3 0b 	call	0x1766	; 0x1766 <_ZN11EepromClass16getEepromAddressEv>
    18f0:	99 83       	std	Y+1, r25	; 0x01
    18f2:	88 83       	st	Y, r24
	
	for(int i=0; newPhoneNr[i]!= NULL ; i++, eepromAddress++){	// until end of phone number is not reached
    18f4:	f7 01       	movw	r30, r14
    18f6:	60 81       	ld	r22, Z
    18f8:	66 23       	and	r22, r22
    18fa:	e9 f0       	breq	.+58     	; 0x1936 <_ZN11EepromClass18addContactToEepromEPcS0_+0x60>
    18fc:	67 01       	movw	r12, r14
    18fe:	ff ef       	ldi	r31, 0xFF	; 255
    1900:	cf 1a       	sub	r12, r31
    1902:	df 0a       	sbc	r13, r31
		if(eepromAddress < (EEPROM.length())){					// error if eeprom full
    1904:	88 81       	ld	r24, Y
    1906:	99 81       	ldd	r25, Y+1	; 0x01
    1908:	81 15       	cp	r24, r1
    190a:	24 e0       	ldi	r18, 0x04	; 4
    190c:	92 07       	cpc	r25, r18
    190e:	18 f4       	brcc	.+6      	; 0x1916 <_ZN11EepromClass18addContactToEepromEPcS0_+0x40>
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1910:	0e 94 c4 11 	call	0x2388	; 0x2388 <eeprom_write_byte>
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <_ZN11EepromClass18addContactToEepromEPcS0_+0x4c>
			EEPROM.write(eepromAddress, newPhoneNr[i]);			// write phone number into eeprom
			}else{
			Serial.print("ERROR EEPROM is full");
    1916:	6f e5       	ldi	r22, 0x5F	; 95
    1918:	72 e0       	ldi	r23, 0x02	; 2
    191a:	84 eb       	ldi	r24, 0xB4	; 180
    191c:	93 e0       	ldi	r25, 0x03	; 3
    191e:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEPKc>

void EepromClass::addContactToEeprom(char *newName, char *newPhoneNr){
		
	eepromAddress = getEepromAddress();							// "Phone_Number0","Name0","Phone_Number1","Name1",...
	
	for(int i=0; newPhoneNr[i]!= NULL ; i++, eepromAddress++){	// until end of phone number is not reached
    1922:	88 81       	ld	r24, Y
    1924:	99 81       	ldd	r25, Y+1	; 0x01
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	99 83       	std	Y+1, r25	; 0x01
    192a:	88 83       	st	Y, r24
    192c:	f6 01       	movw	r30, r12
    192e:	61 91       	ld	r22, Z+
    1930:	6f 01       	movw	r12, r30
    1932:	61 11       	cpse	r22, r1
    1934:	e7 cf       	rjmp	.-50     	; 0x1904 <_ZN11EepromClass18addContactToEepromEPcS0_+0x2e>
    1936:	6c e2       	ldi	r22, 0x2C	; 44
    1938:	88 81       	ld	r24, Y
    193a:	99 81       	ldd	r25, Y+1	; 0x01
    193c:	0e 94 c4 11 	call	0x2388	; 0x2388 <eeprom_write_byte>
			}else{
			Serial.print("ERROR EEPROM is full");
		}
	}
	EEPROM.write(eepromAddress, ',');							// write delimiter
	eepromAddress++;
    1940:	88 81       	ld	r24, Y
    1942:	99 81       	ldd	r25, Y+1	; 0x01
    1944:	01 96       	adiw	r24, 0x01	; 1
    1946:	99 83       	std	Y+1, r25	; 0x01
    1948:	88 83       	st	Y, r24
	
	for(int i=0; newName[i] != NULL; i++, eepromAddress++){
    194a:	f8 01       	movw	r30, r16
    194c:	60 81       	ld	r22, Z
    194e:	66 23       	and	r22, r22
    1950:	d9 f0       	breq	.+54     	; 0x1988 <_ZN11EepromClass18addContactToEepromEPcS0_+0xb2>
    1952:	0f 5f       	subi	r16, 0xFF	; 255
    1954:	1f 4f       	sbci	r17, 0xFF	; 255
		if(eepromAddress < (EEPROM.length())){					// error if eeprom full
    1956:	88 81       	ld	r24, Y
    1958:	99 81       	ldd	r25, Y+1	; 0x01
    195a:	81 15       	cp	r24, r1
    195c:	f4 e0       	ldi	r31, 0x04	; 4
    195e:	9f 07       	cpc	r25, r31
    1960:	18 f4       	brcc	.+6      	; 0x1968 <_ZN11EepromClass18addContactToEepromEPcS0_+0x92>
    1962:	0e 94 c4 11 	call	0x2388	; 0x2388 <eeprom_write_byte>
    1966:	06 c0       	rjmp	.+12     	; 0x1974 <_ZN11EepromClass18addContactToEepromEPcS0_+0x9e>
			EEPROM.write(eepromAddress, newName[i]);			// write Name into eeprom
			}else{
			Serial.print("ERROR EEPROM is full");
    1968:	6f e5       	ldi	r22, 0x5F	; 95
    196a:	72 e0       	ldi	r23, 0x02	; 2
    196c:	84 eb       	ldi	r24, 0xB4	; 180
    196e:	93 e0       	ldi	r25, 0x03	; 3
    1970:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEPKc>
		}
	}
	EEPROM.write(eepromAddress, ',');							// write delimiter
	eepromAddress++;
	
	for(int i=0; newName[i] != NULL; i++, eepromAddress++){
    1974:	88 81       	ld	r24, Y
    1976:	99 81       	ldd	r25, Y+1	; 0x01
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	99 83       	std	Y+1, r25	; 0x01
    197c:	88 83       	st	Y, r24
    197e:	f8 01       	movw	r30, r16
    1980:	61 91       	ld	r22, Z+
    1982:	8f 01       	movw	r16, r30
    1984:	61 11       	cpse	r22, r1
    1986:	e7 cf       	rjmp	.-50     	; 0x1956 <_ZN11EepromClass18addContactToEepromEPcS0_+0x80>
    1988:	6c e2       	ldi	r22, 0x2C	; 44
    198a:	88 81       	ld	r24, Y
    198c:	99 81       	ldd	r25, Y+1	; 0x01
    198e:	0e 94 c4 11 	call	0x2388	; 0x2388 <eeprom_write_byte>
    1992:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1996:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    199a:	02 80       	ldd	r0, Z+2	; 0x02
    199c:	f3 81       	ldd	r31, Z+3	; 0x03
    199e:	e0 2d       	mov	r30, r0
    19a0:	49 e0       	ldi	r20, 0x09	; 9
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	6a e3       	ldi	r22, 0x3A	; 58
    19a6:	72 e0       	ldi	r23, 0x02	; 2
    19a8:	84 eb       	ldi	r24, 0xB4	; 180
    19aa:	93 e0       	ldi	r25, 0x03	; 3
    19ac:	09 95       	icall
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    19ae:	e1 14       	cp	r14, r1
    19b0:	f1 04       	cpc	r15, r1
    19b2:	99 f0       	breq	.+38     	; 0x19da <_ZN11EepromClass18addContactToEepromEPcS0_+0x104>
      return write((const uint8_t *)str, strlen(str));
    19b4:	f7 01       	movw	r30, r14
    19b6:	01 90       	ld	r0, Z+
    19b8:	00 20       	and	r0, r0
    19ba:	e9 f7       	brne	.-6      	; 0x19b6 <_ZN11EepromClass18addContactToEepromEPcS0_+0xe0>
    19bc:	31 97       	sbiw	r30, 0x01	; 1
    19be:	af 01       	movw	r20, r30
    19c0:	4e 19       	sub	r20, r14
    19c2:	5f 09       	sbc	r21, r15
    19c4:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    19c8:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    19cc:	02 80       	ldd	r0, Z+2	; 0x02
    19ce:	f3 81       	ldd	r31, Z+3	; 0x03
    19d0:	e0 2d       	mov	r30, r0
    19d2:	b7 01       	movw	r22, r14
    19d4:	84 eb       	ldi	r24, 0xB4	; 180
    19d6:	93 e0       	ldi	r25, 0x03	; 3
    19d8:	09 95       	icall
    19da:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    19de:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    19e2:	02 80       	ldd	r0, Z+2	; 0x02
    19e4:	f3 81       	ldd	r31, Z+3	; 0x03
    19e6:	e0 2d       	mov	r30, r0
    19e8:	4e e0       	ldi	r20, 0x0E	; 14
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	64 e7       	ldi	r22, 0x74	; 116
    19ee:	72 e0       	ldi	r23, 0x02	; 2
    19f0:	84 eb       	ldi	r24, 0xB4	; 180
    19f2:	93 e0       	ldi	r25, 0x03	; 3
    19f4:	09 95       	icall
	EEPROM.write(eepromAddress, ',');							// write delimiter
	
	Serial.write("Added...\"");
	Serial.write(newPhoneNr);
	Serial.write("\" to EEPROM \n\n");
}
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	ff 90       	pop	r15
    1a00:	ef 90       	pop	r14
    1a02:	df 90       	pop	r13
    1a04:	cf 90       	pop	r12
    1a06:	08 95       	ret

00001a08 <_ZN11EepromClass11clearEepromEv>:
		}
	}
	return(EEPROM.length());
}

void EepromClass::clearEeprom(){
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	c0 e0       	ldi	r28, 0x00	; 0
    1a0e:	d0 e0       	ldi	r29, 0x00	; 0
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	ce 01       	movw	r24, r28
    1a14:	0e 94 c4 11 	call	0x2388	; 0x2388 <eeprom_write_byte>
	for (int i = 0 ; i < EEPROM.length() ; i++) {
    1a18:	21 96       	adiw	r28, 0x01	; 1
    1a1a:	c1 15       	cp	r28, r1
    1a1c:	84 e0       	ldi	r24, 0x04	; 4
    1a1e:	d8 07       	cpc	r29, r24
    1a20:	b9 f7       	brne	.-18     	; 0x1a10 <_ZN11EepromClass11clearEepromEv+0x8>
    1a22:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1a26:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    1a2a:	02 80       	ldd	r0, Z+2	; 0x02
    1a2c:	f3 81       	ldd	r31, Z+3	; 0x03
    1a2e:	e0 2d       	mov	r30, r0
    1a30:	40 e1       	ldi	r20, 0x10	; 16
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	63 e8       	ldi	r22, 0x83	; 131
    1a36:	72 e0       	ldi	r23, 0x02	; 2
    1a38:	84 eb       	ldi	r24, 0xB4	; 180
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	09 95       	icall
		EEPROM.write(i, 0);
	}
	Serial.write("EEPROM cleared\n\n");	
}
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	08 95       	ret

00001a44 <_ZN21GsmCommunicationClass13displayStringEPc>:
		}
		Serial.print("\n");
	}
}

void GsmCommunicationClass::checkReceivedData(){
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	61 15       	cp	r22, r1
    1a4a:	71 05       	cpc	r23, r1
    1a4c:	91 f0       	breq	.+36     	; 0x1a72 <_ZN21GsmCommunicationClass13displayStringEPc+0x2e>
    1a4e:	eb 01       	movw	r28, r22
    1a50:	68 81       	ld	r22, Y
    1a52:	66 23       	and	r22, r22
    1a54:	41 f0       	breq	.+16     	; 0x1a66 <_ZN21GsmCommunicationClass13displayStringEPc+0x22>
    1a56:	21 96       	adiw	r28, 0x01	; 1
    1a58:	84 eb       	ldi	r24, 0xB4	; 180
    1a5a:	93 e0       	ldi	r25, 0x03	; 3
    1a5c:	0e 94 21 03 	call	0x642	; 0x642 <_ZN5Print5printEc>
    1a60:	69 91       	ld	r22, Y+
    1a62:	61 11       	cpse	r22, r1
    1a64:	f9 cf       	rjmp	.-14     	; 0x1a58 <_ZN21GsmCommunicationClass13displayStringEPc+0x14>
    1a66:	6b e3       	ldi	r22, 0x3B	; 59
    1a68:	73 e0       	ldi	r23, 0x03	; 3
    1a6a:	84 eb       	ldi	r24, 0xB4	; 180
    1a6c:	93 e0       	ldi	r25, 0x03	; 3
    1a6e:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEPKc>
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	08 95       	ret

00001a78 <_ZN21GsmCommunicationClass10readSerialEv>:
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	ec 01       	movw	r28, r24
    1a86:	2f ef       	ldi	r18, 0xFF	; 255
    1a88:	89 e6       	ldi	r24, 0x69	; 105
    1a8a:	98 e1       	ldi	r25, 0x18	; 24
    1a8c:	21 50       	subi	r18, 0x01	; 1
    1a8e:	80 40       	sbci	r24, 0x00	; 0
    1a90:	90 40       	sbci	r25, 0x00	; 0
    1a92:	e1 f7       	brne	.-8      	; 0x1a8c <_ZN21GsmCommunicationClass10readSerialEv+0x14>
    1a94:	00 c0       	rjmp	.+0      	; 0x1a96 <_ZN21GsmCommunicationClass10readSerialEv+0x1e>
    1a96:	00 00       	nop
    1a98:	7e 01       	movw	r14, r28
    1a9a:	a4 e0       	ldi	r26, 0x04	; 4
    1a9c:	ea 0e       	add	r14, r26
    1a9e:	f1 1c       	adc	r15, r1
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	8c 5f       	subi	r24, 0xFC	; 252
    1aa4:	9e 4f       	sbci	r25, 0xFE	; 254
    1aa6:	f7 01       	movw	r30, r14
    1aa8:	11 92       	st	Z+, r1
    1aaa:	e8 17       	cp	r30, r24
    1aac:	f9 07       	cpc	r31, r25
    1aae:	e1 f7       	brne	.-8      	; 0x1aa8 <_ZN21GsmCommunicationClass10readSerialEv+0x30>
    1ab0:	00 e0       	ldi	r16, 0x00	; 0
    1ab2:	10 e0       	ldi	r17, 0x00	; 0
    1ab4:	88 81       	ld	r24, Y
    1ab6:	99 81       	ldd	r25, Y+1	; 0x01
    1ab8:	dc 01       	movw	r26, r24
    1aba:	ed 91       	ld	r30, X+
    1abc:	fc 91       	ld	r31, X
    1abe:	00 84       	ldd	r0, Z+8	; 0x08
    1ac0:	f1 85       	ldd	r31, Z+9	; 0x09
    1ac2:	e0 2d       	mov	r30, r0
    1ac4:	09 95       	icall
    1ac6:	89 2b       	or	r24, r25
    1ac8:	79 f0       	breq	.+30     	; 0x1ae8 <_ZN21GsmCommunicationClass10readSerialEv+0x70>
    1aca:	88 81       	ld	r24, Y
    1acc:	99 81       	ldd	r25, Y+1	; 0x01
    1ace:	dc 01       	movw	r26, r24
    1ad0:	ed 91       	ld	r30, X+
    1ad2:	fc 91       	ld	r31, X
    1ad4:	02 84       	ldd	r0, Z+10	; 0x0a
    1ad6:	f3 85       	ldd	r31, Z+11	; 0x0b
    1ad8:	e0 2d       	mov	r30, r0
    1ada:	09 95       	icall
    1adc:	f7 01       	movw	r30, r14
    1ade:	81 93       	st	Z+, r24
    1ae0:	7f 01       	movw	r14, r30
    1ae2:	0f 5f       	subi	r16, 0xFF	; 255
    1ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae6:	e6 cf       	rjmp	.-52     	; 0x1ab4 <_ZN21GsmCommunicationClass10readSerialEv+0x3c>
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e0 0f       	add	r30, r16
    1aec:	f1 1f       	adc	r31, r17
    1aee:	14 82       	std	Z+4, r1	; 0x04
    1af0:	be 01       	movw	r22, r28
    1af2:	6c 5f       	subi	r22, 0xFC	; 252
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	ce 01       	movw	r24, r28
    1af8:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <_ZN21GsmCommunicationClass13displayStringEPc>
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	ff 90       	pop	r15
    1b06:	ef 90       	pop	r14
    1b08:	08 95       	ret

00001b0a <_ZN21GsmCommunicationClassC1EP14SoftwareSerial>:
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	ec 01       	movw	r28, r24
    1b10:	1b 82       	std	Y+3, r1	; 0x03
    1b12:	1a 82       	std	Y+2, r1	; 0x02
    1b14:	fc 01       	movw	r30, r24
    1b16:	34 96       	adiw	r30, 0x04	; 4
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	91 e0       	ldi	r25, 0x01	; 1
    1b1c:	df 01       	movw	r26, r30
    1b1e:	9c 01       	movw	r18, r24
    1b20:	1d 92       	st	X+, r1
    1b22:	21 50       	subi	r18, 0x01	; 1
    1b24:	30 40       	sbci	r19, 0x00	; 0
    1b26:	e1 f7       	brne	.-8      	; 0x1b20 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x16>
    1b28:	f3 95       	inc	r31
    1b2a:	10 82       	st	Z, r1
    1b2c:	31 96       	adiw	r30, 0x01	; 1
    1b2e:	10 82       	st	Z, r1
    1b30:	31 96       	adiw	r30, 0x01	; 1
    1b32:	10 82       	st	Z, r1
    1b34:	79 83       	std	Y+1, r23	; 0x01
    1b36:	68 83       	st	Y, r22
    1b38:	26 e0       	ldi	r18, 0x06	; 6
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	55 e2       	ldi	r21, 0x25	; 37
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	84 eb       	ldi	r24, 0xB4	; 180
    1b44:	93 e0       	ldi	r25, 0x03	; 3
    1b46:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial5beginEmh>
    1b4a:	40 e8       	ldi	r20, 0x80	; 128
    1b4c:	55 e2       	ldi	r21, 0x25	; 37
    1b4e:	60 e0       	ldi	r22, 0x00	; 0
    1b50:	70 e0       	ldi	r23, 0x00	; 0
    1b52:	88 81       	ld	r24, Y
    1b54:	99 81       	ldd	r25, Y+1	; 0x01
    1b56:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN14SoftwareSerial5beginEl>
    1b5a:	3f ef       	ldi	r19, 0xFF	; 255
    1b5c:	83 ed       	ldi	r24, 0xD3	; 211
    1b5e:	90 e3       	ldi	r25, 0x30	; 48
    1b60:	31 50       	subi	r19, 0x01	; 1
    1b62:	80 40       	sbci	r24, 0x00	; 0
    1b64:	90 40       	sbci	r25, 0x00	; 0
    1b66:	e1 f7       	brne	.-8      	; 0x1b60 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x56>
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x60>
    1b6a:	00 00       	nop
    1b6c:	64 e9       	ldi	r22, 0x94	; 148
    1b6e:	72 e0       	ldi	r23, 0x02	; 2
    1b70:	88 81       	ld	r24, Y
    1b72:	99 81       	ldd	r25, Y+1	; 0x01
    1b74:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN5Print7printlnEPKc>
    1b78:	ce 01       	movw	r24, r28
    1b7a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN21GsmCommunicationClass10readSerialEv>
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	08 95       	ret

00001b84 <_ZN21GsmCommunicationClass12setUpSmsModeEv>:



	

void GsmCommunicationClass::setUpSmsMode(){
    1b84:	0f 93       	push	r16
    1b86:	1f 93       	push	r17
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	ec 01       	movw	r28, r24
	GsmSerial->println("AT+CMGF=1");	// Configure TEXT mode
    1b8e:	67 e9       	ldi	r22, 0x97	; 151
    1b90:	72 e0       	ldi	r23, 0x02	; 2
    1b92:	88 81       	ld	r24, Y
    1b94:	99 81       	ldd	r25, Y+1	; 0x01
    1b96:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN5Print7printlnEPKc>
	readSerial();
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN21GsmCommunicationClass10readSerialEv>
	
	GsmSerial->println("AT+CNMI=1,2,0,0,0");	// define how newly arrived SMS Msg. should be handled
    1ba0:	61 ea       	ldi	r22, 0xA1	; 161
    1ba2:	72 e0       	ldi	r23, 0x02	; 2
    1ba4:	88 81       	ld	r24, Y
    1ba6:	99 81       	ldd	r25, Y+1	; 0x01
    1ba8:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN5Print7printlnEPKc>
	readSerial();
    1bac:	ce 01       	movw	r24, r28
    1bae:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN21GsmCommunicationClass10readSerialEv>
	// check Answer
	if(strstr(receiveBuffer, "OK") != NULL){ // check if configured
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	0c 5f       	subi	r16, 0xFC	; 252
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	63 eb       	ldi	r22, 0xB3	; 179
    1bba:	72 e0       	ldi	r23, 0x02	; 2
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	0e 94 a2 11 	call	0x2344	; 0x2344 <strstr>
    1bc2:	89 2b       	or	r24, r25
    1bc4:	b1 f0       	breq	.+44     	; 0x1bf2 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0x6e>
    1bc6:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1bca:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    1bce:	02 80       	ldd	r0, Z+2	; 0x02
    1bd0:	f3 81       	ldd	r31, Z+3	; 0x03
    1bd2:	e0 2d       	mov	r30, r0
    1bd4:	48 e1       	ldi	r20, 0x18	; 24
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	66 eb       	ldi	r22, 0xB6	; 182
    1bda:	72 e0       	ldi	r23, 0x02	; 2
    1bdc:	84 eb       	ldi	r24, 0xB4	; 180
    1bde:	93 e0       	ldi	r25, 0x03	; 3
    1be0:	09 95       	icall
		Serial.write("SMS Mode is configured\n\n");
		gsmIsConnectedOld = gsmIsConnected;
    1be2:	fe 01       	movw	r30, r28
    1be4:	eb 5f       	subi	r30, 0xFB	; 251
    1be6:	fe 4f       	sbci	r31, 0xFE	; 254
    1be8:	cc 5f       	subi	r28, 0xFC	; 252
    1bea:	de 4f       	sbci	r29, 0xFE	; 254
    1bec:	88 81       	ld	r24, Y
    1bee:	80 83       	st	Z, r24
    1bf0:	24 c0       	rjmp	.+72     	; 0x1c3a <_ZN21GsmCommunicationClass12setUpSmsModeEv+0xb6>
	}else if(strstr(receiveBuffer, "ERROR")){
    1bf2:	6f ec       	ldi	r22, 0xCF	; 207
    1bf4:	72 e0       	ldi	r23, 0x02	; 2
    1bf6:	c8 01       	movw	r24, r16
    1bf8:	0e 94 a2 11 	call	0x2344	; 0x2344 <strstr>
    1bfc:	89 2b       	or	r24, r25
    1bfe:	79 f0       	breq	.+30     	; 0x1c1e <_ZN21GsmCommunicationClass12setUpSmsModeEv+0x9a>
    1c00:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1c04:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    1c08:	02 80       	ldd	r0, Z+2	; 0x02
    1c0a:	f3 81       	ldd	r31, Z+3	; 0x03
    1c0c:	e0 2d       	mov	r30, r0
    1c0e:	40 e2       	ldi	r20, 0x20	; 32
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	65 ed       	ldi	r22, 0xD5	; 213
    1c14:	72 e0       	ldi	r23, 0x02	; 2
    1c16:	84 eb       	ldi	r24, 0xB4	; 180
    1c18:	93 e0       	ldi	r25, 0x03	; 3
    1c1a:	09 95       	icall
    1c1c:	0e c0       	rjmp	.+28     	; 0x1c3a <_ZN21GsmCommunicationClass12setUpSmsModeEv+0xb6>
    1c1e:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1c22:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    1c26:	02 80       	ldd	r0, Z+2	; 0x02
    1c28:	f3 81       	ldd	r31, Z+3	; 0x03
    1c2a:	e0 2d       	mov	r30, r0
    1c2c:	41 e2       	ldi	r20, 0x21	; 33
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	66 ef       	ldi	r22, 0xF6	; 246
    1c32:	72 e0       	ldi	r23, 0x02	; 2
    1c34:	84 eb       	ldi	r24, 0xB4	; 180
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	09 95       	icall
		Serial.write("ERROR in SMS mode configuration\n");
	}else{
		Serial.write("No response in SMS configuration\n");
	}
}
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	08 95       	ret

00001c44 <_ZN21GsmCommunicationClass15checkConnectionEv>:
/*                                                                           */
/*  History     : 23.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void GsmCommunicationClass::checkConnection()
{	
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
	if(checkConnectionTime > 10){	// check connection loop rate
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	12 96       	adiw	r26, 0x02	; 2
    1c50:	2d 91       	ld	r18, X+
    1c52:	3c 91       	ld	r19, X
    1c54:	13 97       	sbiw	r26, 0x03	; 3
    1c56:	2b 30       	cpi	r18, 0x0B	; 11
    1c58:	31 05       	cpc	r19, r1
    1c5a:	0c f4       	brge	.+2      	; 0x1c5e <_ZN21GsmCommunicationClass15checkConnectionEv+0x1a>
    1c5c:	4c c0       	rjmp	.+152    	; 0x1cf6 <_ZN21GsmCommunicationClass15checkConnectionEv+0xb2>
    1c5e:	ec 01       	movw	r28, r24
		checkConnectionTime = 0;
    1c60:	1b 82       	std	Y+3, r1	; 0x03
    1c62:	1a 82       	std	Y+2, r1	; 0x02
		if (GsmSerial->available()==0){
    1c64:	88 81       	ld	r24, Y
    1c66:	99 81       	ldd	r25, Y+1	; 0x01
    1c68:	dc 01       	movw	r26, r24
    1c6a:	ed 91       	ld	r30, X+
    1c6c:	fc 91       	ld	r31, X
    1c6e:	00 84       	ldd	r0, Z+8	; 0x08
    1c70:	f1 85       	ldd	r31, Z+9	; 0x09
    1c72:	e0 2d       	mov	r30, r0
    1c74:	09 95       	icall
    1c76:	89 2b       	or	r24, r25
    1c78:	31 f4       	brne	.+12     	; 0x1c86 <_ZN21GsmCommunicationClass15checkConnectionEv+0x42>
			GsmSerial->println("AT+CREG?");		// ask if connected to cellular Network
    1c7a:	68 e1       	ldi	r22, 0x18	; 24
    1c7c:	73 e0       	ldi	r23, 0x03	; 3
    1c7e:	88 81       	ld	r24, Y
    1c80:	99 81       	ldd	r25, Y+1	; 0x01
    1c82:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN5Print7printlnEPKc>
		}
		readSerial();		// read Answer
    1c86:	ce 01       	movw	r24, r28
    1c88:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN21GsmCommunicationClass10readSerialEv>
	
		if(strstr(receiveBuffer, "+CREG: 0,1") != NULL){ // check if connection was successful
    1c8c:	61 e2       	ldi	r22, 0x21	; 33
    1c8e:	73 e0       	ldi	r23, 0x03	; 3
    1c90:	ce 01       	movw	r24, r28
    1c92:	04 96       	adiw	r24, 0x04	; 4
    1c94:	0e 94 a2 11 	call	0x2344	; 0x2344 <strstr>
    1c98:	89 2b       	or	r24, r25
    1c9a:	49 f1       	breq	.+82     	; 0x1cee <_ZN21GsmCommunicationClass15checkConnectionEv+0xaa>
			gsmIsConnected = true;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	8e 01       	movw	r16, r28
    1ca0:	0c 5f       	subi	r16, 0xFC	; 252
    1ca2:	1e 4f       	sbci	r17, 0xFE	; 254
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	80 83       	st	Z, r24
    1ca8:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1cac:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    1cb0:	02 80       	ldd	r0, Z+2	; 0x02
    1cb2:	f3 81       	ldd	r31, Z+3	; 0x03
    1cb4:	e0 2d       	mov	r30, r0
    1cb6:	40 e1       	ldi	r20, 0x10	; 16
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	6c e2       	ldi	r22, 0x2C	; 44
    1cbc:	73 e0       	ldi	r23, 0x03	; 3
    1cbe:	84 eb       	ldi	r24, 0xB4	; 180
    1cc0:	93 e0       	ldi	r25, 0x03	; 3
    1cc2:	09 95       	icall
			Serial.write("GSM Connected\n\n\n");
			if(gsmIsConnected == true && gsmIsConnectedOld == false){
    1cc4:	d8 01       	movw	r26, r16
    1cc6:	8c 91       	ld	r24, X
    1cc8:	88 23       	and	r24, r24
    1cca:	49 f0       	breq	.+18     	; 0x1cde <_ZN21GsmCommunicationClass15checkConnectionEv+0x9a>
    1ccc:	fe 01       	movw	r30, r28
    1cce:	eb 5f       	subi	r30, 0xFB	; 251
    1cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd2:	80 81       	ld	r24, Z
    1cd4:	81 11       	cpse	r24, r1
    1cd6:	03 c0       	rjmp	.+6      	; 0x1cde <_ZN21GsmCommunicationClass15checkConnectionEv+0x9a>
				setUpSmsMode();		// set up Sms Mode if connected
    1cd8:	ce 01       	movw	r24, r28
    1cda:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <_ZN21GsmCommunicationClass12setUpSmsModeEv>
			}
			gsmIsConnectedOld = gsmIsConnected;
    1cde:	fe 01       	movw	r30, r28
    1ce0:	eb 5f       	subi	r30, 0xFB	; 251
    1ce2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce4:	cc 5f       	subi	r28, 0xFC	; 252
    1ce6:	de 4f       	sbci	r29, 0xFE	; 254
    1ce8:	88 81       	ld	r24, Y
    1cea:	80 83       	st	Z, r24
    1cec:	09 c0       	rjmp	.+18     	; 0x1d00 <_ZN21GsmCommunicationClass15checkConnectionEv+0xbc>
			}else{
			gsmIsConnected = false;
    1cee:	cc 5f       	subi	r28, 0xFC	; 252
    1cf0:	de 4f       	sbci	r29, 0xFE	; 254
    1cf2:	18 82       	st	Y, r1
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <_ZN21GsmCommunicationClass15checkConnectionEv+0xbc>
		}
	}else{
		checkConnectionTime++;
    1cf6:	2f 5f       	subi	r18, 0xFF	; 255
    1cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	33 83       	std	Z+3, r19	; 0x03
    1cfe:	22 83       	std	Z+2, r18	; 0x02
	}
}
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	08 95       	ret

00001d0a <_ZN21GsmCommunicationClass9sendAtCmdEPc>:
	}
}


void GsmCommunicationClass::sendAtCmd(char atCmd[256]){
	GsmSerial->println(atCmd);
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	80 81       	ld	r24, Z
    1d0e:	91 81       	ldd	r25, Z+1	; 0x01
    1d10:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN5Print7printlnEPKc>
    1d14:	08 95       	ret

00001d16 <_ZN13GpioPortClassC1EPh>:
/*                                                                           */
/*  History     : 10.11.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/

GpioPortClass::GpioPortClass(uint8_t *NewBaseAdress)
    1d16:	fc 01       	movw	r30, r24
    1d18:	12 82       	std	Z+2, r1	; 0x02
    1d1a:	11 82       	std	Z+1, r1	; 0x01
{
	   LedBase = NewBaseAdress;
    1d1c:	74 83       	std	Z+4, r23	; 0x04
    1d1e:	63 83       	std	Z+3, r22	; 0x03
	   ShadowLedRegister = 0;
    1d20:	15 82       	std	Z+5, r1	; 0x05
    1d22:	16 82       	std	Z+6, r1	; 0x06
    1d24:	17 82       	std	Z+7, r1	; 0x07
    1d26:	10 86       	std	Z+8, r1	; 0x08

		// init GPIO
		DDRB	|=  (1 << LED_BUILTIN);	// set GPIO as Output
    1d28:	25 9a       	sbi	0x04, 5	; 4
		PORTB	&= ~(1 << LED_BUILTIN);	// clear bit
    1d2a:	2d 98       	cbi	0x05, 5	; 5
		DDRB	|=  (1 << LED_STATE);	// set GPIO as Output
    1d2c:	20 9a       	sbi	0x04, 0	; 4
		PORTB	&= ~(1 << LED_STATE);	// clear bit
    1d2e:	28 98       	cbi	0x05, 0	; 5
		
		DDRD	|= (1 << LOCK);			// set GPIO as Output
    1d30:	55 9a       	sbi	0x0a, 5	; 10
		PORTD	&= ~(1 << LOCK);		// clear bit
    1d32:	5d 98       	cbi	0x0b, 5	; 11
    1d34:	08 95       	ret

00001d36 <main_ArduinoLockOpener>:
#include "CmdContactClass.h"



// the loop function runs over and over again forever
void main_ArduinoLockOpener() {
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	c1 5c       	subi	r28, 0xC1	; 193
    1d40:	d2 40       	sbci	r29, 0x02	; 2
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
	
	delay(2000);
    1d4c:	60 ed       	ldi	r22, 0xD0	; 208
    1d4e:	77 e0       	ldi	r23, 0x07	; 7
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	0e 94 0e 05 	call	0xa1c	; 0xa1c <delay>
	
	SoftwareSerial GsmSerial(RX, TX); // RX TX
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	42 e0       	ldi	r20, 0x02	; 2
    1d5c:	63 e0       	ldi	r22, 0x03	; 3
    1d5e:	ce 01       	movw	r24, r28
    1d60:	01 96       	adiw	r24, 0x01	; 1
    1d62:	0e 94 0a 08 	call	0x1014	; 0x1014 <_ZN14SoftwareSerialC1Ehhb>
	
	// creat Contact directories
	ContactDirectoryClass ContactDirectoryTemporary("Temporary");
    1d66:	6d e3       	ldi	r22, 0x3D	; 61
    1d68:	73 e0       	ldi	r23, 0x03	; 3
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	80 96       	adiw	r24, 0x20	; 32
    1d6e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <_ZN21ContactDirectoryClassC1EPc>
	ContactDirectoryClass ContactDirectoryPermanent("Permanent");
    1d72:	67 e4       	ldi	r22, 0x47	; 71
    1d74:	73 e0       	ldi	r23, 0x03	; 3
    1d76:	ce 01       	movw	r24, r28
    1d78:	8a 5a       	subi	r24, 0xAA	; 170
    1d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <_ZN21ContactDirectoryClassC1EPc>
	
	GsmCommunicationClass GsmCommunication(&GsmSerial);
    1d80:	be 01       	movw	r22, r28
    1d82:	6f 5f       	subi	r22, 0xFF	; 255
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	ce 01       	movw	r24, r28
    1d88:	84 57       	subi	r24, 0x74	; 116
    1d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <_ZN21GsmCommunicationClassC1EP14SoftwareSerial>
	AuthorizationHandlerClass AuthorizationHandler(&GsmCommunication);
    1d90:	be 01       	movw	r22, r28
    1d92:	64 57       	subi	r22, 0x74	; 116
    1d94:	7f 4f       	sbci	r23, 0xFF	; 255
    1d96:	ce 01       	movw	r24, r28
    1d98:	8d 56       	subi	r24, 0x6D	; 109
    1d9a:	9e 4f       	sbci	r25, 0xFE	; 254
    1d9c:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN25AuthorizationHandlerClassC1EP21GsmCommunicationClass>
	CmdContactClass SmsHandler(&GsmCommunication,&AuthorizationHandler);
    1da0:	ae 01       	movw	r20, r28
    1da2:	4d 56       	subi	r20, 0x6D	; 109
    1da4:	5e 4f       	sbci	r21, 0xFE	; 254
    1da6:	be 01       	movw	r22, r28
    1da8:	64 57       	subi	r22, 0x74	; 116
    1daa:	7f 4f       	sbci	r23, 0xFF	; 255
    1dac:	ce 01       	movw	r24, r28
    1dae:	8b 56       	subi	r24, 0x6B	; 107
    1db0:	9e 4f       	sbci	r25, 0xFE	; 254
    1db2:	0e 94 ae 09 	call	0x135c	; 0x135c <_ZN15CmdContactClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>
	

	
	EepromClass Eeprom1;
    1db6:	ce 01       	movw	r24, r28
    1db8:	82 55       	subi	r24, 0x52	; 82
    1dba:	9d 4f       	sbci	r25, 0xFD	; 253
    1dbc:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN11EepromClassC1Ev>

	Eeprom1.clearEeprom();
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	82 55       	subi	r24, 0x52	; 82
    1dc4:	9d 4f       	sbci	r25, 0xFD	; 253
    1dc6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN11EepromClass11clearEepromEv>
	
	Eeprom1.eepromToContactDirectory(&ContactDirectoryPermanent); // make permanent List out of Eeprom
    1dca:	be 01       	movw	r22, r28
    1dcc:	6a 5a       	subi	r22, 0xAA	; 170
    1dce:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	82 55       	subi	r24, 0x52	; 82
    1dd4:	9d 4f       	sbci	r25, 0xFD	; 253
    1dd6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass>
	
	ContactDirectoryPermanent.addContact("Michael Streit","786750902",PERMANENT);
    1dda:	22 e0       	ldi	r18, 0x02	; 2
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	41 e5       	ldi	r20, 0x51	; 81
    1de0:	53 e0       	ldi	r21, 0x03	; 3
    1de2:	6b e5       	ldi	r22, 0x5B	; 91
    1de4:	73 e0       	ldi	r23, 0x03	; 3
    1de6:	ce 01       	movw	r24, r28
    1de8:	8a 5a       	subi	r24, 0xAA	; 170
    1dea:	9f 4f       	sbci	r25, 0xFF	; 255
    1dec:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_ZN21ContactDirectoryClass10addContactEPcS0_i>
	//ContactDirectoryPermanent.addContact("Hans","564418910",PERMANENT);
	//ContactDirectoryPermanent.addContact("Anna","564418784",PERMANENT);
	
	
    DDRB = 0b00100000; // configure pin 7 of PORTB as output (digital pin 13 on the Arduino Mega2560) 
    1df0:	80 e2       	ldi	r24, 0x20	; 32
    1df2:	84 b9       	out	0x04, r24	; 4
	GpioPortClass GpioPortB((uint8_t*)0x25);
    1df4:	65 e2       	ldi	r22, 0x25	; 37
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	ce 01       	movw	r24, r28
    1dfa:	80 55       	subi	r24, 0x50	; 80
    1dfc:	9d 4f       	sbci	r25, 0xFD	; 253
    1dfe:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <_ZN13GpioPortClassC1EPh>
	GpioPortClass GpioPortD((uint8_t*)0x2B);
    1e02:	6b e2       	ldi	r22, 0x2B	; 43
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	ce 01       	movw	r24, r28
    1e08:	87 54       	subi	r24, 0x47	; 71
    1e0a:	9d 4f       	sbci	r25, 0xFD	; 253
    1e0c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <_ZN13GpioPortClassC1EPh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e10:	2f ef       	ldi	r18, 0xFF	; 255
    1e12:	83 ed       	ldi	r24, 0xD3	; 211
    1e14:	90 e3       	ldi	r25, 0x30	; 48
    1e16:	21 50       	subi	r18, 0x01	; 1
    1e18:	80 40       	sbci	r24, 0x00	; 0
    1e1a:	90 40       	sbci	r25, 0x00	; 0
    1e1c:	e1 f7       	brne	.-8      	; 0x1e16 <main_ArduinoLockOpener+0xe0>
    1e1e:	00 c0       	rjmp	.+0      	; 0x1e20 <main_ArduinoLockOpener+0xea>
    1e20:	00 00       	nop
    1e22:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    1e26:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    1e2a:	02 80       	ldd	r0, Z+2	; 0x02
    1e2c:	f3 81       	ldd	r31, Z+3	; 0x03
    1e2e:	e0 2d       	mov	r30, r0
    1e30:	46 e0       	ldi	r20, 0x06	; 6
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	6a e6       	ldi	r22, 0x6A	; 106
    1e36:	73 e0       	ldi	r23, 0x03	; 3
    1e38:	84 eb       	ldi	r24, 0xB4	; 180
    1e3a:	93 e0       	ldi	r25, 0x03	; 3
    1e3c:	09 95       	icall
    1e3e:	2f ef       	ldi	r18, 0xFF	; 255
    1e40:	83 ed       	ldi	r24, 0xD3	; 211
    1e42:	90 e3       	ldi	r25, 0x30	; 48
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	80 40       	sbci	r24, 0x00	; 0
    1e48:	90 40       	sbci	r25, 0x00	; 0
    1e4a:	e1 f7       	brne	.-8      	; 0x1e44 <main_ArduinoLockOpener+0x10e>
    1e4c:	00 c0       	rjmp	.+0      	; 0x1e4e <main_ArduinoLockOpener+0x118>
    1e4e:	00 00       	nop
	Serial.write("Start\n");
	_delay_ms(1000);
	

    for(;;){
		GsmCommunication.checkConnection();	
    1e50:	ce 01       	movw	r24, r28
    1e52:	84 57       	subi	r24, 0x74	; 116
    1e54:	9f 4f       	sbci	r25, 0xFF	; 255
    1e56:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <_ZN21GsmCommunicationClass15checkConnectionEv>
		GsmCommunication.readSerial();	
    1e5a:	ce 01       	movw	r24, r28
    1e5c:	84 57       	subi	r24, 0x74	; 116
    1e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e60:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <_ZN21GsmCommunicationClass10readSerialEv>
		SmsHandler.handleReceivedSms(&ContactDirectoryTemporary, &ContactDirectoryPermanent);
    1e64:	ae 01       	movw	r20, r28
    1e66:	4a 5a       	subi	r20, 0xAA	; 170
    1e68:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6a:	be 01       	movw	r22, r28
    1e6c:	60 5e       	subi	r22, 0xE0	; 224
    1e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e70:	ce 01       	movw	r24, r28
    1e72:	8b 56       	subi	r24, 0x6B	; 107
    1e74:	9e 4f       	sbci	r25, 0xFE	; 254
    1e76:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_>
		SmsHandler.executeSmsCmd(&ContactDirectoryTemporary,&ContactDirectoryPermanent);
    1e7a:	ae 01       	movw	r20, r28
    1e7c:	4a 5a       	subi	r20, 0xAA	; 170
    1e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e80:	be 01       	movw	r22, r28
    1e82:	60 5e       	subi	r22, 0xE0	; 224
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	ce 01       	movw	r24, r28
    1e88:	8b 56       	subi	r24, 0x6B	; 107
    1e8a:	9e 4f       	sbci	r25, 0xFE	; 254
    1e8c:	0e 94 cc 09 	call	0x1398	; 0x1398 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_>
		AuthorizationHandler.handleReceivedCall(&ContactDirectoryTemporary,&ContactDirectoryPermanent);
    1e90:	ae 01       	movw	r20, r28
    1e92:	4a 5a       	subi	r20, 0xAA	; 170
    1e94:	5f 4f       	sbci	r21, 0xFF	; 255
    1e96:	be 01       	movw	r22, r28
    1e98:	60 5e       	subi	r22, 0xE0	; 224
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	8d 56       	subi	r24, 0x6D	; 109
    1ea0:	9e 4f       	sbci	r25, 0xFE	; 254
    1ea2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_>
    1ea6:	2f ef       	ldi	r18, 0xFF	; 255
    1ea8:	81 ee       	ldi	r24, 0xE1	; 225
    1eaa:	94 e0       	ldi	r25, 0x04	; 4
    1eac:	21 50       	subi	r18, 0x01	; 1
    1eae:	80 40       	sbci	r24, 0x00	; 0
    1eb0:	90 40       	sbci	r25, 0x00	; 0
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <main_ArduinoLockOpener+0x176>
    1eb4:	00 c0       	rjmp	.+0      	; 0x1eb6 <main_ArduinoLockOpener+0x180>
    1eb6:	00 00       	nop
    1eb8:	cb cf       	rjmp	.-106    	; 0x1e50 <main_ArduinoLockOpener+0x11a>

00001eba <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>:
	GsmCommunication = NewGsmCommunication;
	AuthorizationHandler = NewAuthorizationHandler;
} //SmsHandlerClass

// default destructor
SmsHandlerClass::~SmsHandlerClass()
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	34 96       	adiw	r30, 0x04	; 4
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	31 e0       	ldi	r19, 0x01	; 1
    1ec6:	df 01       	movw	r26, r30
    1ec8:	e9 01       	movw	r28, r18
    1eca:	1d 92       	st	X+, r1
    1ecc:	21 97       	sbiw	r28, 0x01	; 1
    1ece:	e9 f7       	brne	.-6      	; 0x1eca <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass+0x10>
    1ed0:	f3 95       	inc	r31
    1ed2:	10 82       	st	Z, r1
    1ed4:	31 96       	adiw	r30, 0x01	; 1
    1ed6:	24 e1       	ldi	r18, 0x14	; 20
    1ed8:	df 01       	movw	r26, r30
    1eda:	1d 92       	st	X+, r1
    1edc:	2a 95       	dec	r18
    1ede:	e9 f7       	brne	.-6      	; 0x1eda <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass+0x20>
    1ee0:	ec 01       	movw	r28, r24
    1ee2:	79 83       	std	Y+1, r23	; 0x01
    1ee4:	68 83       	st	Y, r22
    1ee6:	5b 83       	std	Y+3, r21	; 0x03
    1ee8:	4a 83       	std	Y+2, r20	; 0x02
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <_ZN15SmsHandlerClass7readSmsEPc>:
		}else{
		newSmsReceived = false;
	}
}

void SmsHandlerClass::readSms(char *buffer){
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	ec 01       	movw	r28, r24
    1ef6:	fb 01       	movw	r30, r22
    1ef8:	33 97       	sbiw	r30, 0x03	; 3
	int textStart = 0;
	int i = 0;
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	70 e0       	ldi	r23, 0x00	; 0
		newSmsReceived = false;
	}
}

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	50 e0       	ldi	r21, 0x00	; 0
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
			textStart = 1;
    1f02:	31 e0       	ldi	r19, 0x01	; 1
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	df 01       	movw	r26, r30

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	99 23       	and	r25, r25
    1f0c:	b9 f0       	breq	.+46     	; 0x1f3c <_ZN15SmsHandlerClass7readSmsEPc+0x4c>
    1f0e:	31 96       	adiw	r30, 0x01	; 1
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
    1f10:	2c 91       	ld	r18, X
    1f12:	22 32       	cpi	r18, 0x22	; 34
    1f14:	31 f4       	brne	.+12     	; 0x1f22 <_ZN15SmsHandlerClass7readSmsEPc+0x32>
    1f16:	20 81       	ld	r18, Z
    1f18:	2d 30       	cpi	r18, 0x0D	; 13
    1f1a:	19 f4       	brne	.+6      	; 0x1f22 <_ZN15SmsHandlerClass7readSmsEPc+0x32>
    1f1c:	21 81       	ldd	r18, Z+1	; 0x01
    1f1e:	2a 30       	cpi	r18, 0x0A	; 10
    1f20:	19 f0       	breq	.+6      	; 0x1f28 <_ZN15SmsHandlerClass7readSmsEPc+0x38>
    1f22:	41 30       	cpi	r20, 0x01	; 1
    1f24:	51 05       	cpc	r21, r1
    1f26:	79 f7       	brne	.-34     	; 0x1f06 <_ZN15SmsHandlerClass7readSmsEPc+0x16>
			textStart = 1;
			smsMsg[i]=buffer[u];
    1f28:	de 01       	movw	r26, r28
    1f2a:	a6 0f       	add	r26, r22
    1f2c:	b7 1f       	adc	r27, r23
    1f2e:	14 96       	adiw	r26, 0x04	; 4
    1f30:	9c 93       	st	X, r25
			i++;
    1f32:	6f 5f       	subi	r22, 0xFF	; 255
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
			textStart = 1;
    1f36:	43 2f       	mov	r20, r19
    1f38:	58 2f       	mov	r21, r24

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
    1f3a:	e5 cf       	rjmp	.-54     	; 0x1f06 <_ZN15SmsHandlerClass7readSmsEPc+0x16>
			textStart = 1;
			smsMsg[i]=buffer[u];
			i++;
		}
	}
	smsMsg[i]='\0';	
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	e6 0f       	add	r30, r22
    1f40:	f7 1f       	adc	r31, r23
    1f42:	14 82       	std	Z+4, r1	; 0x04
}
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	08 95       	ret

00001f4a <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc>:

void SmsHandlerClass::isolateSmsSenderPhoneNr(char *buffer){
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	ec 01       	movw	r28, r24
    1f54:	cb 01       	movw	r24, r22
    char *retBuf;
    int u = 0;
    retBuf = strstr(buffer,"+CMT:");		// find beginning of sms sender
    1f56:	61 e7       	ldi	r22, 0x71	; 113
    1f58:	73 e0       	ldi	r23, 0x03	; 3
    1f5a:	0e 94 a2 11 	call	0x2344	; 0x2344 <strstr>
    1f5e:	fc 01       	movw	r30, r24
    if(retBuf != NULL){						// if SMS sender Nr received
    1f60:	89 2b       	or	r24, r25
    1f62:	c9 f0       	breq	.+50     	; 0x1f96 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x4c>
        for(u=0; retBuf[u+7] !='\"';u++){	// fill Nr into variable until end of Nr reached
    1f64:	97 81       	ldd	r25, Z+7	; 0x07
    1f66:	92 32       	cpi	r25, 0x22	; 34
    1f68:	69 f0       	breq	.+26     	; 0x1f84 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x3a>
    1f6a:	de 01       	movw	r26, r28
    1f6c:	ab 5f       	subi	r26, 0xFB	; 251
    1f6e:	be 4f       	sbci	r27, 0xFE	; 254
    1f70:	38 96       	adiw	r30, 0x08	; 8
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
            smsSenderNr[u] = retBuf[u+7];
    1f76:	9d 93       	st	X+, r25
void SmsHandlerClass::isolateSmsSenderPhoneNr(char *buffer){
    char *retBuf;
    int u = 0;
    retBuf = strstr(buffer,"+CMT:");		// find beginning of sms sender
    if(retBuf != NULL){						// if SMS sender Nr received
        for(u=0; retBuf[u+7] !='\"';u++){	// fill Nr into variable until end of Nr reached
    1f78:	2f 5f       	subi	r18, 0xFF	; 255
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	91 91       	ld	r25, Z+
    1f7e:	92 32       	cpi	r25, 0x22	; 34
    1f80:	d1 f7       	brne	.-12     	; 0x1f76 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x2c>
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x3e>
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
            smsSenderNr[u] = retBuf[u+7];
        }
        smsSenderNr[u]='\0';
    1f88:	2c 0f       	add	r18, r28
    1f8a:	3d 1f       	adc	r19, r29
    1f8c:	f9 01       	movw	r30, r18
    1f8e:	eb 5f       	subi	r30, 0xFB	; 251
    1f90:	fe 4f       	sbci	r31, 0xFE	; 254
    1f92:	10 82       	st	Z, r1
    1f94:	04 c0       	rjmp	.+8      	; 0x1f9e <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x54>
    }else{
        smsSenderNr[u]='\0';
    1f96:	fe 01       	movw	r30, r28
    1f98:	eb 5f       	subi	r30, 0xFB	; 251
    1f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9c:	10 82       	st	Z, r1
    1f9e:	04 eb       	ldi	r16, 0xB4	; 180
    1fa0:	13 e0       	ldi	r17, 0x03	; 3
    1fa2:	d8 01       	movw	r26, r16
    1fa4:	ed 91       	ld	r30, X+
    1fa6:	fc 91       	ld	r31, X
    1fa8:	02 80       	ldd	r0, Z+2	; 0x02
    1faa:	f3 81       	ldd	r31, Z+3	; 0x03
    1fac:	e0 2d       	mov	r30, r0
    1fae:	4c e0       	ldi	r20, 0x0C	; 12
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	67 e7       	ldi	r22, 0x77	; 119
    1fb4:	73 e0       	ldi	r23, 0x03	; 3
    1fb6:	c8 01       	movw	r24, r16
    1fb8:	09 95       	icall
    }
	
	// Display SMS sender
	Serial.write("SMS sender: ");
	GsmCommunication->displayString(smsSenderNr);
    1fba:	be 01       	movw	r22, r28
    1fbc:	6b 5f       	subi	r22, 0xFB	; 251
    1fbe:	7e 4f       	sbci	r23, 0xFE	; 254
    1fc0:	88 81       	ld	r24, Y
    1fc2:	99 81       	ldd	r25, Y+1	; 0x01
    1fc4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <_ZN21GsmCommunicationClass13displayStringEPc>
    1fc8:	d8 01       	movw	r26, r16
    1fca:	ed 91       	ld	r30, X+
    1fcc:	fc 91       	ld	r31, X
    1fce:	02 80       	ldd	r0, Z+2	; 0x02
    1fd0:	f3 81       	ldd	r31, Z+3	; 0x03
    1fd2:	e0 2d       	mov	r30, r0
    1fd4:	42 e0       	ldi	r20, 0x02	; 2
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	6a e3       	ldi	r22, 0x3A	; 58
    1fda:	73 e0       	ldi	r23, 0x03	; 3
    1fdc:	c8 01       	movw	r24, r16
    1fde:	09 95       	icall
	Serial.write("\n\n");	
}
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	08 95       	ret

00001fea <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_>:
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/

void SmsHandlerClass::handleReceivedSms(ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass *ContactDirectoryPermanent){
    1fea:	cf 92       	push	r12
    1fec:	df 92       	push	r13
    1fee:	ef 92       	push	r14
    1ff0:	ff 92       	push	r15
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	ec 01       	movw	r28, r24
    1ffc:	7b 01       	movw	r14, r22
    1ffe:	6a 01       	movw	r12, r20
	
	if(strstr(GsmCommunication->receiveBuffer,"+CMT:") != NULL){	// if SMS received
    2000:	08 81       	ld	r16, Y
    2002:	19 81       	ldd	r17, Y+1	; 0x01
    2004:	0c 5f       	subi	r16, 0xFC	; 252
    2006:	1f 4f       	sbci	r17, 0xFF	; 255
    2008:	61 e7       	ldi	r22, 0x71	; 113
    200a:	73 e0       	ldi	r23, 0x03	; 3
    200c:	c8 01       	movw	r24, r16
    200e:	0e 94 a2 11 	call	0x2344	; 0x2344 <strstr>
    2012:	89 2b       	or	r24, r25
    2014:	d9 f1       	breq	.+118    	; 0x208c <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_+0xa2>
		
		isolateSmsSenderPhoneNr(&(GsmCommunication->receiveBuffer[0]));	
    2016:	b8 01       	movw	r22, r16
    2018:	ce 01       	movw	r24, r28
    201a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc>
		
		
		
		// check Authorization
		if(AuthorizationHandler->checkAuthorization((char*)&smsSenderNr,ContactDirectoryTemporary,ContactDirectoryPermanent) == 1){	// check if sms seder is authorized
    201e:	96 01       	movw	r18, r12
    2020:	a7 01       	movw	r20, r14
    2022:	be 01       	movw	r22, r28
    2024:	6b 5f       	subi	r22, 0xFB	; 251
    2026:	7e 4f       	sbci	r23, 0xFE	; 254
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_>
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	d1 f4       	brne	.+52     	; 0x2068 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_+0x7e>
    2034:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    2038:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    203c:	02 80       	ldd	r0, Z+2	; 0x02
    203e:	f3 81       	ldd	r31, Z+3	; 0x03
    2040:	e0 2d       	mov	r30, r0
    2042:	48 e1       	ldi	r20, 0x18	; 24
    2044:	50 e0       	ldi	r21, 0x00	; 0
    2046:	64 e8       	ldi	r22, 0x84	; 132
    2048:	73 e0       	ldi	r23, 0x03	; 3
    204a:	84 eb       	ldi	r24, 0xB4	; 180
    204c:	93 e0       	ldi	r25, 0x03	; 3
    204e:	09 95       	icall
			Serial.write("SMS sender AUTHORIZED !\n");
			
			// read sms Msg out of the receive Buffer
			readSms((char*)&GsmCommunication->receiveBuffer);
    2050:	68 81       	ld	r22, Y
    2052:	79 81       	ldd	r23, Y+1	; 0x01
    2054:	6c 5f       	subi	r22, 0xFC	; 252
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	ce 01       	movw	r24, r28
    205a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <_ZN15SmsHandlerClass7readSmsEPc>
			newSmsReceived = true;
    205e:	cc 5f       	subi	r28, 0xFC	; 252
    2060:	de 4f       	sbci	r29, 0xFE	; 254
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	88 83       	st	Y, r24
    2066:	15 c0       	rjmp	.+42     	; 0x2092 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_+0xa8>
    2068:	e0 91 b4 03 	lds	r30, 0x03B4	; 0x8003b4 <__data_end>
    206c:	f0 91 b5 03 	lds	r31, 0x03B5	; 0x8003b5 <__data_end+0x1>
    2070:	02 80       	ldd	r0, Z+2	; 0x02
    2072:	f3 81       	ldd	r31, Z+3	; 0x03
    2074:	e0 2d       	mov	r30, r0
    2076:	45 e1       	ldi	r20, 0x15	; 21
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	6d e9       	ldi	r22, 0x9D	; 157
    207c:	73 e0       	ldi	r23, 0x03	; 3
    207e:	84 eb       	ldi	r24, 0xB4	; 180
    2080:	93 e0       	ldi	r25, 0x03	; 3
    2082:	09 95       	icall
			// handle sms commands
			}else{
				Serial.write("SMS sender DECLINED \n");
				newSmsReceived = false;			// set flag for execute Comands
    2084:	cc 5f       	subi	r28, 0xFC	; 252
    2086:	de 4f       	sbci	r29, 0xFE	; 254
    2088:	18 82       	st	Y, r1
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_+0xa8>
			}
		}else{
		newSmsReceived = false;
    208c:	cc 5f       	subi	r28, 0xFC	; 252
    208e:	de 4f       	sbci	r29, 0xFE	; 254
    2090:	18 82       	st	Y, r1
	}
}
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	ff 90       	pop	r15
    209c:	ef 90       	pop	r14
    209e:	df 90       	pop	r13
    20a0:	cf 90       	pop	r12
    20a2:	08 95       	ret

000020a4 <__udivmodsi4>:
    20a4:	a1 e2       	ldi	r26, 0x21	; 33
    20a6:	1a 2e       	mov	r1, r26
    20a8:	aa 1b       	sub	r26, r26
    20aa:	bb 1b       	sub	r27, r27
    20ac:	fd 01       	movw	r30, r26
    20ae:	0d c0       	rjmp	.+26     	; 0x20ca <__udivmodsi4_ep>

000020b0 <__udivmodsi4_loop>:
    20b0:	aa 1f       	adc	r26, r26
    20b2:	bb 1f       	adc	r27, r27
    20b4:	ee 1f       	adc	r30, r30
    20b6:	ff 1f       	adc	r31, r31
    20b8:	a2 17       	cp	r26, r18
    20ba:	b3 07       	cpc	r27, r19
    20bc:	e4 07       	cpc	r30, r20
    20be:	f5 07       	cpc	r31, r21
    20c0:	20 f0       	brcs	.+8      	; 0x20ca <__udivmodsi4_ep>
    20c2:	a2 1b       	sub	r26, r18
    20c4:	b3 0b       	sbc	r27, r19
    20c6:	e4 0b       	sbc	r30, r20
    20c8:	f5 0b       	sbc	r31, r21

000020ca <__udivmodsi4_ep>:
    20ca:	66 1f       	adc	r22, r22
    20cc:	77 1f       	adc	r23, r23
    20ce:	88 1f       	adc	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	1a 94       	dec	r1
    20d4:	69 f7       	brne	.-38     	; 0x20b0 <__udivmodsi4_loop>
    20d6:	60 95       	com	r22
    20d8:	70 95       	com	r23
    20da:	80 95       	com	r24
    20dc:	90 95       	com	r25
    20de:	9b 01       	movw	r18, r22
    20e0:	ac 01       	movw	r20, r24
    20e2:	bd 01       	movw	r22, r26
    20e4:	cf 01       	movw	r24, r30
    20e6:	08 95       	ret

000020e8 <__tablejump2__>:
    20e8:	ee 0f       	add	r30, r30
    20ea:	ff 1f       	adc	r31, r31
    20ec:	05 90       	lpm	r0, Z+
    20ee:	f4 91       	lpm	r31, Z
    20f0:	e0 2d       	mov	r30, r0
    20f2:	09 94       	ijmp

000020f4 <malloc>:
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	cf 93       	push	r28
    20fa:	df 93       	push	r29
    20fc:	82 30       	cpi	r24, 0x02	; 2
    20fe:	91 05       	cpc	r25, r1
    2100:	10 f4       	brcc	.+4      	; 0x2106 <malloc+0x12>
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	e0 91 6d 05 	lds	r30, 0x056D	; 0x80056d <__flp>
    210a:	f0 91 6e 05 	lds	r31, 0x056E	; 0x80056e <__flp+0x1>
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	a0 e0       	ldi	r26, 0x00	; 0
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	30 97       	sbiw	r30, 0x00	; 0
    2118:	19 f1       	breq	.+70     	; 0x2160 <malloc+0x6c>
    211a:	40 81       	ld	r20, Z
    211c:	51 81       	ldd	r21, Z+1	; 0x01
    211e:	02 81       	ldd	r16, Z+2	; 0x02
    2120:	13 81       	ldd	r17, Z+3	; 0x03
    2122:	48 17       	cp	r20, r24
    2124:	59 07       	cpc	r21, r25
    2126:	c8 f0       	brcs	.+50     	; 0x215a <malloc+0x66>
    2128:	84 17       	cp	r24, r20
    212a:	95 07       	cpc	r25, r21
    212c:	69 f4       	brne	.+26     	; 0x2148 <malloc+0x54>
    212e:	10 97       	sbiw	r26, 0x00	; 0
    2130:	31 f0       	breq	.+12     	; 0x213e <malloc+0x4a>
    2132:	12 96       	adiw	r26, 0x02	; 2
    2134:	0c 93       	st	X, r16
    2136:	12 97       	sbiw	r26, 0x02	; 2
    2138:	13 96       	adiw	r26, 0x03	; 3
    213a:	1c 93       	st	X, r17
    213c:	27 c0       	rjmp	.+78     	; 0x218c <malloc+0x98>
    213e:	00 93 6d 05 	sts	0x056D, r16	; 0x80056d <__flp>
    2142:	10 93 6e 05 	sts	0x056E, r17	; 0x80056e <__flp+0x1>
    2146:	22 c0       	rjmp	.+68     	; 0x218c <malloc+0x98>
    2148:	21 15       	cp	r18, r1
    214a:	31 05       	cpc	r19, r1
    214c:	19 f0       	breq	.+6      	; 0x2154 <malloc+0x60>
    214e:	42 17       	cp	r20, r18
    2150:	53 07       	cpc	r21, r19
    2152:	18 f4       	brcc	.+6      	; 0x215a <malloc+0x66>
    2154:	9a 01       	movw	r18, r20
    2156:	bd 01       	movw	r22, r26
    2158:	ef 01       	movw	r28, r30
    215a:	df 01       	movw	r26, r30
    215c:	f8 01       	movw	r30, r16
    215e:	db cf       	rjmp	.-74     	; 0x2116 <malloc+0x22>
    2160:	21 15       	cp	r18, r1
    2162:	31 05       	cpc	r19, r1
    2164:	f9 f0       	breq	.+62     	; 0x21a4 <malloc+0xb0>
    2166:	28 1b       	sub	r18, r24
    2168:	39 0b       	sbc	r19, r25
    216a:	24 30       	cpi	r18, 0x04	; 4
    216c:	31 05       	cpc	r19, r1
    216e:	80 f4       	brcc	.+32     	; 0x2190 <malloc+0x9c>
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	9b 81       	ldd	r25, Y+3	; 0x03
    2174:	61 15       	cp	r22, r1
    2176:	71 05       	cpc	r23, r1
    2178:	21 f0       	breq	.+8      	; 0x2182 <malloc+0x8e>
    217a:	fb 01       	movw	r30, r22
    217c:	93 83       	std	Z+3, r25	; 0x03
    217e:	82 83       	std	Z+2, r24	; 0x02
    2180:	04 c0       	rjmp	.+8      	; 0x218a <malloc+0x96>
    2182:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <__flp+0x1>
    2186:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <__flp>
    218a:	fe 01       	movw	r30, r28
    218c:	32 96       	adiw	r30, 0x02	; 2
    218e:	44 c0       	rjmp	.+136    	; 0x2218 <malloc+0x124>
    2190:	fe 01       	movw	r30, r28
    2192:	e2 0f       	add	r30, r18
    2194:	f3 1f       	adc	r31, r19
    2196:	81 93       	st	Z+, r24
    2198:	91 93       	st	Z+, r25
    219a:	22 50       	subi	r18, 0x02	; 2
    219c:	31 09       	sbc	r19, r1
    219e:	39 83       	std	Y+1, r19	; 0x01
    21a0:	28 83       	st	Y, r18
    21a2:	3a c0       	rjmp	.+116    	; 0x2218 <malloc+0x124>
    21a4:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    21a8:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    21ac:	23 2b       	or	r18, r19
    21ae:	41 f4       	brne	.+16     	; 0x21c0 <malloc+0xcc>
    21b0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    21b4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    21b8:	30 93 6c 05 	sts	0x056C, r19	; 0x80056c <__brkval+0x1>
    21bc:	20 93 6b 05 	sts	0x056B, r18	; 0x80056b <__brkval>
    21c0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    21c4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    21c8:	21 15       	cp	r18, r1
    21ca:	31 05       	cpc	r19, r1
    21cc:	41 f4       	brne	.+16     	; 0x21de <malloc+0xea>
    21ce:	2d b7       	in	r18, 0x3d	; 61
    21d0:	3e b7       	in	r19, 0x3e	; 62
    21d2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    21d6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    21da:	24 1b       	sub	r18, r20
    21dc:	35 0b       	sbc	r19, r21
    21de:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <__brkval>
    21e2:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <__brkval+0x1>
    21e6:	e2 17       	cp	r30, r18
    21e8:	f3 07       	cpc	r31, r19
    21ea:	a0 f4       	brcc	.+40     	; 0x2214 <malloc+0x120>
    21ec:	2e 1b       	sub	r18, r30
    21ee:	3f 0b       	sbc	r19, r31
    21f0:	28 17       	cp	r18, r24
    21f2:	39 07       	cpc	r19, r25
    21f4:	78 f0       	brcs	.+30     	; 0x2214 <malloc+0x120>
    21f6:	ac 01       	movw	r20, r24
    21f8:	4e 5f       	subi	r20, 0xFE	; 254
    21fa:	5f 4f       	sbci	r21, 0xFF	; 255
    21fc:	24 17       	cp	r18, r20
    21fe:	35 07       	cpc	r19, r21
    2200:	48 f0       	brcs	.+18     	; 0x2214 <malloc+0x120>
    2202:	4e 0f       	add	r20, r30
    2204:	5f 1f       	adc	r21, r31
    2206:	50 93 6c 05 	sts	0x056C, r21	; 0x80056c <__brkval+0x1>
    220a:	40 93 6b 05 	sts	0x056B, r20	; 0x80056b <__brkval>
    220e:	81 93       	st	Z+, r24
    2210:	91 93       	st	Z+, r25
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <malloc+0x124>
    2214:	e0 e0       	ldi	r30, 0x00	; 0
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	cf 01       	movw	r24, r30
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	08 95       	ret

00002224 <free>:
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	00 97       	sbiw	r24, 0x00	; 0
    222a:	09 f4       	brne	.+2      	; 0x222e <free+0xa>
    222c:	81 c0       	rjmp	.+258    	; 0x2330 <free+0x10c>
    222e:	fc 01       	movw	r30, r24
    2230:	32 97       	sbiw	r30, 0x02	; 2
    2232:	13 82       	std	Z+3, r1	; 0x03
    2234:	12 82       	std	Z+2, r1	; 0x02
    2236:	a0 91 6d 05 	lds	r26, 0x056D	; 0x80056d <__flp>
    223a:	b0 91 6e 05 	lds	r27, 0x056E	; 0x80056e <__flp+0x1>
    223e:	10 97       	sbiw	r26, 0x00	; 0
    2240:	81 f4       	brne	.+32     	; 0x2262 <free+0x3e>
    2242:	20 81       	ld	r18, Z
    2244:	31 81       	ldd	r19, Z+1	; 0x01
    2246:	82 0f       	add	r24, r18
    2248:	93 1f       	adc	r25, r19
    224a:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    224e:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    2252:	28 17       	cp	r18, r24
    2254:	39 07       	cpc	r19, r25
    2256:	51 f5       	brne	.+84     	; 0x22ac <free+0x88>
    2258:	f0 93 6c 05 	sts	0x056C, r31	; 0x80056c <__brkval+0x1>
    225c:	e0 93 6b 05 	sts	0x056B, r30	; 0x80056b <__brkval>
    2260:	67 c0       	rjmp	.+206    	; 0x2330 <free+0x10c>
    2262:	ed 01       	movw	r28, r26
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	ce 17       	cp	r28, r30
    226a:	df 07       	cpc	r29, r31
    226c:	40 f4       	brcc	.+16     	; 0x227e <free+0x5a>
    226e:	4a 81       	ldd	r20, Y+2	; 0x02
    2270:	5b 81       	ldd	r21, Y+3	; 0x03
    2272:	9e 01       	movw	r18, r28
    2274:	41 15       	cp	r20, r1
    2276:	51 05       	cpc	r21, r1
    2278:	f1 f0       	breq	.+60     	; 0x22b6 <free+0x92>
    227a:	ea 01       	movw	r28, r20
    227c:	f5 cf       	rjmp	.-22     	; 0x2268 <free+0x44>
    227e:	d3 83       	std	Z+3, r29	; 0x03
    2280:	c2 83       	std	Z+2, r28	; 0x02
    2282:	40 81       	ld	r20, Z
    2284:	51 81       	ldd	r21, Z+1	; 0x01
    2286:	84 0f       	add	r24, r20
    2288:	95 1f       	adc	r25, r21
    228a:	c8 17       	cp	r28, r24
    228c:	d9 07       	cpc	r29, r25
    228e:	59 f4       	brne	.+22     	; 0x22a6 <free+0x82>
    2290:	88 81       	ld	r24, Y
    2292:	99 81       	ldd	r25, Y+1	; 0x01
    2294:	84 0f       	add	r24, r20
    2296:	95 1f       	adc	r25, r21
    2298:	02 96       	adiw	r24, 0x02	; 2
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	80 83       	st	Z, r24
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	9b 81       	ldd	r25, Y+3	; 0x03
    22a2:	93 83       	std	Z+3, r25	; 0x03
    22a4:	82 83       	std	Z+2, r24	; 0x02
    22a6:	21 15       	cp	r18, r1
    22a8:	31 05       	cpc	r19, r1
    22aa:	29 f4       	brne	.+10     	; 0x22b6 <free+0x92>
    22ac:	f0 93 6e 05 	sts	0x056E, r31	; 0x80056e <__flp+0x1>
    22b0:	e0 93 6d 05 	sts	0x056D, r30	; 0x80056d <__flp>
    22b4:	3d c0       	rjmp	.+122    	; 0x2330 <free+0x10c>
    22b6:	e9 01       	movw	r28, r18
    22b8:	fb 83       	std	Y+3, r31	; 0x03
    22ba:	ea 83       	std	Y+2, r30	; 0x02
    22bc:	49 91       	ld	r20, Y+
    22be:	59 91       	ld	r21, Y+
    22c0:	c4 0f       	add	r28, r20
    22c2:	d5 1f       	adc	r29, r21
    22c4:	ec 17       	cp	r30, r28
    22c6:	fd 07       	cpc	r31, r29
    22c8:	61 f4       	brne	.+24     	; 0x22e2 <free+0xbe>
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	84 0f       	add	r24, r20
    22d0:	95 1f       	adc	r25, r21
    22d2:	02 96       	adiw	r24, 0x02	; 2
    22d4:	e9 01       	movw	r28, r18
    22d6:	99 83       	std	Y+1, r25	; 0x01
    22d8:	88 83       	st	Y, r24
    22da:	82 81       	ldd	r24, Z+2	; 0x02
    22dc:	93 81       	ldd	r25, Z+3	; 0x03
    22de:	9b 83       	std	Y+3, r25	; 0x03
    22e0:	8a 83       	std	Y+2, r24	; 0x02
    22e2:	e0 e0       	ldi	r30, 0x00	; 0
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	12 96       	adiw	r26, 0x02	; 2
    22e8:	8d 91       	ld	r24, X+
    22ea:	9c 91       	ld	r25, X
    22ec:	13 97       	sbiw	r26, 0x03	; 3
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	19 f0       	breq	.+6      	; 0x22f8 <free+0xd4>
    22f2:	fd 01       	movw	r30, r26
    22f4:	dc 01       	movw	r26, r24
    22f6:	f7 cf       	rjmp	.-18     	; 0x22e6 <free+0xc2>
    22f8:	8d 91       	ld	r24, X+
    22fa:	9c 91       	ld	r25, X
    22fc:	11 97       	sbiw	r26, 0x01	; 1
    22fe:	9d 01       	movw	r18, r26
    2300:	2e 5f       	subi	r18, 0xFE	; 254
    2302:	3f 4f       	sbci	r19, 0xFF	; 255
    2304:	82 0f       	add	r24, r18
    2306:	93 1f       	adc	r25, r19
    2308:	20 91 6b 05 	lds	r18, 0x056B	; 0x80056b <__brkval>
    230c:	30 91 6c 05 	lds	r19, 0x056C	; 0x80056c <__brkval+0x1>
    2310:	28 17       	cp	r18, r24
    2312:	39 07       	cpc	r19, r25
    2314:	69 f4       	brne	.+26     	; 0x2330 <free+0x10c>
    2316:	30 97       	sbiw	r30, 0x00	; 0
    2318:	29 f4       	brne	.+10     	; 0x2324 <free+0x100>
    231a:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <__flp+0x1>
    231e:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <__flp>
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <free+0x104>
    2324:	13 82       	std	Z+3, r1	; 0x03
    2326:	12 82       	std	Z+2, r1	; 0x02
    2328:	b0 93 6c 05 	sts	0x056C, r27	; 0x80056c <__brkval+0x1>
    232c:	a0 93 6b 05 	sts	0x056B, r26	; 0x80056b <__brkval>
    2330:	df 91       	pop	r29
    2332:	cf 91       	pop	r28
    2334:	08 95       	ret

00002336 <strcpy>:
    2336:	fb 01       	movw	r30, r22
    2338:	dc 01       	movw	r26, r24
    233a:	01 90       	ld	r0, Z+
    233c:	0d 92       	st	X+, r0
    233e:	00 20       	and	r0, r0
    2340:	e1 f7       	brne	.-8      	; 0x233a <strcpy+0x4>
    2342:	08 95       	ret

00002344 <strstr>:
    2344:	fb 01       	movw	r30, r22
    2346:	51 91       	ld	r21, Z+
    2348:	55 23       	and	r21, r21
    234a:	a9 f0       	breq	.+42     	; 0x2376 <strstr+0x32>
    234c:	bf 01       	movw	r22, r30
    234e:	dc 01       	movw	r26, r24
    2350:	4d 91       	ld	r20, X+
    2352:	45 17       	cp	r20, r21
    2354:	41 11       	cpse	r20, r1
    2356:	e1 f7       	brne	.-8      	; 0x2350 <strstr+0xc>
    2358:	59 f4       	brne	.+22     	; 0x2370 <strstr+0x2c>
    235a:	cd 01       	movw	r24, r26
    235c:	01 90       	ld	r0, Z+
    235e:	00 20       	and	r0, r0
    2360:	49 f0       	breq	.+18     	; 0x2374 <strstr+0x30>
    2362:	4d 91       	ld	r20, X+
    2364:	40 15       	cp	r20, r0
    2366:	41 11       	cpse	r20, r1
    2368:	c9 f3       	breq	.-14     	; 0x235c <strstr+0x18>
    236a:	fb 01       	movw	r30, r22
    236c:	41 11       	cpse	r20, r1
    236e:	ef cf       	rjmp	.-34     	; 0x234e <strstr+0xa>
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	08 95       	ret

00002378 <eeprom_read_byte>:
    2378:	f9 99       	sbic	0x1f, 1	; 31
    237a:	fe cf       	rjmp	.-4      	; 0x2378 <eeprom_read_byte>
    237c:	92 bd       	out	0x22, r25	; 34
    237e:	81 bd       	out	0x21, r24	; 33
    2380:	f8 9a       	sbi	0x1f, 0	; 31
    2382:	99 27       	eor	r25, r25
    2384:	80 b5       	in	r24, 0x20	; 32
    2386:	08 95       	ret

00002388 <eeprom_write_byte>:
    2388:	26 2f       	mov	r18, r22

0000238a <eeprom_write_r18>:
    238a:	f9 99       	sbic	0x1f, 1	; 31
    238c:	fe cf       	rjmp	.-4      	; 0x238a <eeprom_write_r18>
    238e:	1f ba       	out	0x1f, r1	; 31
    2390:	92 bd       	out	0x22, r25	; 34
    2392:	81 bd       	out	0x21, r24	; 33
    2394:	20 bd       	out	0x20, r18	; 32
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	fa 9a       	sbi	0x1f, 2	; 31
    239c:	f9 9a       	sbi	0x1f, 1	; 31
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	01 96       	adiw	r24, 0x01	; 1
    23a2:	08 95       	ret

000023a4 <_exit>:
    23a4:	f8 94       	cli

000023a6 <__stop_program>:
    23a6:	ff cf       	rjmp	.-2      	; 0x23a6 <__stop_program>
