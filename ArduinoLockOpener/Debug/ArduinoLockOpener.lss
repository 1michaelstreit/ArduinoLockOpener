
ArduinoLockOpener.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000238  00800100  00002894  00002928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bb  00800338  00800338  00002b60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002bbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a0  00000000  00000000  00002c00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011529  00000000  00000000  000032a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cfe  00000000  00000000  000147c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004820  00000000  00000000  000184c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001244  00000000  00000000  0001cce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c32  00000000  00000000  0001df2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006501  00000000  00000000  00021b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  0002805f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
       4:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__vector_1>
       8:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__vector_2>
       c:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_3>
      10:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_3>
      14:	0c 94 13 07 	jmp	0xe26	; 0xe26 <__vector_3>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_7>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_18>
      4c:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	02 00       	Address 0x00000068 is out of bounds.
.word	0xffff	; ????

00000069 <digital_pin_to_timer_PGM>:
      69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
      7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
      91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a1:	03 03 03 03                                         ....

000000a5 <port_to_input_PGM>:
      a5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000af <port_to_output_PGM>:
      af:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b9 <port_to_mode_PGM>:
      b9:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000c4 <__ctors_start>:
      c4:	50 02       	muls	r21, r16
      c6:	c0 02       	muls	r28, r16

000000c8 <__ctors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	13 e0       	ldi	r17, 0x03	; 3
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e4 e9       	ldi	r30, 0x94	; 148
      dc:	f8 e2       	ldi	r31, 0x28	; 40
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	a8 33       	cpi	r26, 0x38	; 56
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	24 e0       	ldi	r18, 0x04	; 4
      ec:	a8 e3       	ldi	r26, 0x38	; 56
      ee:	b3 e0       	ldi	r27, 0x03	; 3
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a3 3f       	cpi	r26, 0xF3	; 243
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c4 e6       	ldi	r28, 0x64	; 100
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	21 97       	sbiw	r28, 0x01	; 1
     104:	fe 01       	movw	r30, r28
     106:	0e 94 00 10 	call	0x2000	; 0x2000 <__tablejump2__>
     10a:	c2 36       	cpi	r28, 0x62	; 98
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 cc 02 	call	0x598	; 0x598 <main>
     114:	0c 94 48 14 	jmp	0x2890	; 0x2890 <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     11c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     11e:	91 8d       	ldd	r25, Z+25	; 0x19
     120:	22 8d       	ldd	r18, Z+26	; 0x1a
     122:	89 2f       	mov	r24, r25
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	80 5c       	subi	r24, 0xC0	; 192
     128:	9f 4f       	sbci	r25, 0xFF	; 255
     12a:	82 1b       	sub	r24, r18
     12c:	91 09       	sbc	r25, r1
}
     12e:	8f 73       	andi	r24, 0x3F	; 63
     130:	99 27       	eor	r25, r25
     132:	08 95       	ret

00000134 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     134:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     136:	91 8d       	ldd	r25, Z+25	; 0x19
     138:	82 8d       	ldd	r24, Z+26	; 0x1a
     13a:	98 17       	cp	r25, r24
     13c:	31 f0       	breq	.+12     	; 0x14a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     13e:	82 8d       	ldd	r24, Z+26	; 0x1a
     140:	e8 0f       	add	r30, r24
     142:	f1 1d       	adc	r31, r1
     144:	85 8d       	ldd	r24, Z+29	; 0x1d
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     14a:	8f ef       	ldi	r24, 0xFF	; 255
     14c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     14e:	08 95       	ret

00000150 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     150:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     152:	91 8d       	ldd	r25, Z+25	; 0x19
     154:	82 8d       	ldd	r24, Z+26	; 0x1a
     156:	98 17       	cp	r25, r24
     158:	61 f0       	breq	.+24     	; 0x172 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     15a:	82 8d       	ldd	r24, Z+26	; 0x1a
     15c:	df 01       	movw	r26, r30
     15e:	a8 0f       	add	r26, r24
     160:	b1 1d       	adc	r27, r1
     162:	5d 96       	adiw	r26, 0x1d	; 29
     164:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     166:	92 8d       	ldd	r25, Z+26	; 0x1a
     168:	9f 5f       	subi	r25, 0xFF	; 255
     16a:	9f 73       	andi	r25, 0x3F	; 63
     16c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     172:	8f ef       	ldi	r24, 0xFF	; 255
     174:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     176:	08 95       	ret

00000178 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     178:	fc 01       	movw	r30, r24
     17a:	23 8d       	ldd	r18, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     17c:	34 8d       	ldd	r19, Z+28	; 0x1c
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     17e:	23 17       	cp	r18, r19
     180:	38 f0       	brcs	.+14     	; 0x190 <_ZN14HardwareSerial17availableForWriteEv+0x18>
     182:	8f e3       	ldi	r24, 0x3F	; 63
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	82 1b       	sub	r24, r18
     188:	91 09       	sbc	r25, r1
     18a:	83 0f       	add	r24, r19
     18c:	91 1d       	adc	r25, r1
     18e:	08 95       	ret
  return tail - head - 1;
     190:	83 2f       	mov	r24, r19
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	82 1b       	sub	r24, r18
     196:	91 09       	sbc	r25, r1
     198:	01 97       	sbiw	r24, 0x01	; 1
}
     19a:	08 95       	ret

0000019c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     19c:	86 e4       	ldi	r24, 0x46	; 70
     19e:	92 e0       	ldi	r25, 0x02	; 2
     1a0:	89 2b       	or	r24, r25
     1a2:	49 f0       	breq	.+18     	; 0x1b6 <_Z14serialEventRunv+0x1a>
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	89 2b       	or	r24, r25
     1aa:	29 f0       	breq	.+10     	; 0x1b6 <_Z14serialEventRunv+0x1a>
     1ac:	0e 94 46 02 	call	0x48c	; 0x48c <_Z17Serial0_availablev>
     1b0:	81 11       	cpse	r24, r1
     1b2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     1b6:	08 95       	ret

000001b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     1b8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     1ba:	84 8d       	ldd	r24, Z+28	; 0x1c
     1bc:	df 01       	movw	r26, r30
     1be:	a8 0f       	add	r26, r24
     1c0:	b1 1d       	adc	r27, r1
     1c2:	a3 5a       	subi	r26, 0xA3	; 163
     1c4:	bf 4f       	sbci	r27, 0xFF	; 255
     1c6:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     1c8:	24 8d       	ldd	r18, Z+28	; 0x1c
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	2f 5f       	subi	r18, 0xFF	; 255
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
     1d0:	2f 73       	andi	r18, 0x3F	; 63
     1d2:	30 78       	andi	r19, 0x80	; 128
     1d4:	33 23       	and	r19, r19
     1d6:	34 f4       	brge	.+12     	; 0x1e4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	31 09       	sbc	r19, r1
     1dc:	20 6c       	ori	r18, 0xC0	; 192
     1de:	3f 6f       	ori	r19, 0xFF	; 255
     1e0:	2f 5f       	subi	r18, 0xFF	; 255
     1e2:	3f 4f       	sbci	r19, 0xFF	; 255
     1e4:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     1e6:	a6 89       	ldd	r26, Z+22	; 0x16
     1e8:	b7 89       	ldd	r27, Z+23	; 0x17
     1ea:	8c 93       	st	X, r24
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     1ec:	a0 89       	ldd	r26, Z+16	; 0x10
     1ee:	b1 89       	ldd	r27, Z+17	; 0x11
     1f0:	8c 91       	ld	r24, X
     1f2:	83 70       	andi	r24, 0x03	; 3
     1f4:	80 64       	ori	r24, 0x40	; 64
     1f6:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     1f8:	93 8d       	ldd	r25, Z+27	; 0x1b
     1fa:	84 8d       	ldd	r24, Z+28	; 0x1c
     1fc:	98 13       	cpse	r25, r24
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x54>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     200:	02 88       	ldd	r0, Z+18	; 0x12
     202:	f3 89       	ldd	r31, Z+19	; 0x13
     204:	e0 2d       	mov	r30, r0
     206:	80 81       	ld	r24, Z
     208:	8f 7d       	andi	r24, 0xDF	; 223
     20a:	80 83       	st	Z, r24
     20c:	08 95       	ret

0000020e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     214:	88 8d       	ldd	r24, Y+24	; 0x18
     216:	88 23       	and	r24, r24
     218:	d9 f0       	breq	.+54     	; 0x250 <_ZN14HardwareSerial5flushEv+0x42>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     21a:	ea 89       	ldd	r30, Y+18	; 0x12
     21c:	fb 89       	ldd	r31, Y+19	; 0x13
     21e:	80 81       	ld	r24, Z
     220:	85 fd       	sbrc	r24, 5
     222:	05 c0       	rjmp	.+10     	; 0x22e <_ZN14HardwareSerial5flushEv+0x20>
     224:	a8 89       	ldd	r26, Y+16	; 0x10
     226:	b9 89       	ldd	r27, Y+17	; 0x11
     228:	8c 91       	ld	r24, X
     22a:	86 fd       	sbrc	r24, 6
     22c:	11 c0       	rjmp	.+34     	; 0x250 <_ZN14HardwareSerial5flushEv+0x42>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	07 fc       	sbrc	r0, 7
     232:	f5 cf       	rjmp	.-22     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     234:	80 81       	ld	r24, Z
     236:	85 ff       	sbrs	r24, 5
     238:	f2 cf       	rjmp	.-28     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     23a:	04 c0       	rjmp	.+8      	; 0x244 <_ZN14HardwareSerial5flushEv+0x36>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
     23c:	ce 01       	movw	r24, r28
     23e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     242:	eb cf       	rjmp	.-42     	; 0x21a <_ZN14HardwareSerial5flushEv+0xc>
  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     244:	a8 89       	ldd	r26, Y+16	; 0x10
     246:	b9 89       	ldd	r27, Y+17	; 0x11
     248:	8c 91       	ld	r24, X
     24a:	85 ff       	sbrs	r24, 5
     24c:	e8 cf       	rjmp	.-48     	; 0x21e <_ZN14HardwareSerial5flushEv+0x10>
     24e:	f6 cf       	rjmp	.-20     	; 0x23c <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	ec 01       	movw	r28, r24
  _written = true;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     264:	9b 8d       	ldd	r25, Y+27	; 0x1b
     266:	8c 8d       	ldd	r24, Y+28	; 0x1c
     268:	98 13       	cpse	r25, r24
     26a:	26 c0       	rjmp	.+76     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x62>
     26c:	e8 89       	ldd	r30, Y+16	; 0x10
     26e:	f9 89       	ldd	r31, Y+17	; 0x11
     270:	80 81       	ld	r24, Z
     272:	85 fd       	sbrc	r24, 5
     274:	32 c0       	rjmp	.+100    	; 0x2da <_ZN14HardwareSerial5writeEh+0x84>
     276:	20 c0       	rjmp	.+64     	; 0x2b8 <_ZN14HardwareSerial5writeEh+0x62>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     278:	8c 8d       	ldd	r24, Y+28	; 0x1c
     27a:	18 13       	cpse	r17, r24
     27c:	0c c0       	rjmp	.+24     	; 0x296 <_ZN14HardwareSerial5writeEh+0x40>
    if (bit_is_clear(SREG, SREG_I)) {
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	07 fc       	sbrc	r0, 7
     282:	fa cf       	rjmp	.-12     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     284:	e8 89       	ldd	r30, Y+16	; 0x10
     286:	f9 89       	ldd	r31, Y+17	; 0x11
     288:	80 81       	ld	r24, Z
     28a:	85 ff       	sbrs	r24, 5
     28c:	f5 cf       	rjmp	.-22     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
	_tx_udr_empty_irq();
     28e:	ce 01       	movw	r24, r28
     290:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     294:	f1 cf       	rjmp	.-30     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     296:	8b 8d       	ldd	r24, Y+27	; 0x1b
     298:	fe 01       	movw	r30, r28
     29a:	e8 0f       	add	r30, r24
     29c:	f1 1d       	adc	r31, r1
     29e:	e3 5a       	subi	r30, 0xA3	; 163
     2a0:	ff 4f       	sbci	r31, 0xFF	; 255
     2a2:	00 83       	st	Z, r16

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2a6:	f8 94       	cli
    _tx_buffer_head = i;
     2a8:	1b 8f       	std	Y+27, r17	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     2aa:	ea 89       	ldd	r30, Y+18	; 0x12
     2ac:	fb 89       	ldd	r31, Y+19	; 0x13
     2ae:	80 81       	ld	r24, Z
     2b0:	80 62       	ori	r24, 0x20	; 32
     2b2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2b4:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
     2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <_ZN14HardwareSerial5writeEh+0x9c>
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     2b8:	2b 8d       	ldd	r18, Y+27	; 0x1b
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	2f 5f       	subi	r18, 0xFF	; 255
     2be:	3f 4f       	sbci	r19, 0xFF	; 255
     2c0:	2f 73       	andi	r18, 0x3F	; 63
     2c2:	30 78       	andi	r19, 0x80	; 128
     2c4:	33 23       	and	r19, r19
     2c6:	34 f4       	brge	.+12     	; 0x2d4 <_ZN14HardwareSerial5writeEh+0x7e>
     2c8:	21 50       	subi	r18, 0x01	; 1
     2ca:	31 09       	sbc	r19, r1
     2cc:	20 6c       	ori	r18, 0xC0	; 192
     2ce:	3f 6f       	ori	r19, 0xFF	; 255
     2d0:	2f 5f       	subi	r18, 0xFF	; 255
     2d2:	3f 4f       	sbci	r19, 0xFF	; 255
     2d4:	06 2f       	mov	r16, r22
     2d6:	12 2f       	mov	r17, r18
     2d8:	cf cf       	rjmp	.-98     	; 0x278 <_ZN14HardwareSerial5writeEh+0x22>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2dc:	f8 94       	cli
      *_udr = c;
     2de:	ee 89       	ldd	r30, Y+22	; 0x16
     2e0:	ff 89       	ldd	r31, Y+23	; 0x17
     2e2:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2e4:	e8 89       	ldd	r30, Y+16	; 0x10
     2e6:	f9 89       	ldd	r31, Y+17	; 0x11
     2e8:	80 81       	ld	r24, Z
     2ea:	83 70       	andi	r24, 0x03	; 3
     2ec:	80 64       	ori	r24, 0x40	; 64
     2ee:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2f0:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ec 01       	movw	r28, r24
     310:	6a 01       	movw	r12, r20
     312:	7b 01       	movw	r14, r22
     314:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     316:	e8 89       	ldd	r30, Y+16	; 0x10
     318:	f9 89       	ldd	r31, Y+17	; 0x11
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     31e:	41 15       	cp	r20, r1
     320:	51 4e       	sbci	r21, 0xE1	; 225
     322:	61 05       	cpc	r22, r1
     324:	71 05       	cpc	r23, r1
     326:	b1 f0       	breq	.+44     	; 0x354 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	79 e0       	ldi	r23, 0x09	; 9
     32c:	8d e3       	ldi	r24, 0x3D	; 61
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	a7 01       	movw	r20, r14
     332:	96 01       	movw	r18, r12
     334:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__udivmodsi4>
     338:	da 01       	movw	r26, r20
     33a:	c9 01       	movw	r24, r18
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	a1 09       	sbc	r26, r1
     340:	b1 09       	sbc	r27, r1
     342:	b6 95       	lsr	r27
     344:	a7 95       	ror	r26
     346:	97 95       	ror	r25
     348:	87 95       	ror	r24
     34a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     34c:	21 15       	cp	r18, r1
     34e:	80 e1       	ldi	r24, 0x10	; 16
     350:	38 07       	cpc	r19, r24
     352:	a8 f0       	brcs	.+42     	; 0x37e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     354:	e8 89       	ldd	r30, Y+16	; 0x10
     356:	f9 89       	ldd	r31, Y+17	; 0x11
     358:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     35a:	60 e8       	ldi	r22, 0x80	; 128
     35c:	74 e8       	ldi	r23, 0x84	; 132
     35e:	8e e1       	ldi	r24, 0x1E	; 30
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a7 01       	movw	r20, r14
     364:	96 01       	movw	r18, r12
     366:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__udivmodsi4>
     36a:	da 01       	movw	r26, r20
     36c:	c9 01       	movw	r24, r18
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	a1 09       	sbc	r26, r1
     372:	b1 09       	sbc	r27, r1
     374:	b6 95       	lsr	r27
     376:	a7 95       	ror	r26
     378:	97 95       	ror	r25
     37a:	87 95       	ror	r24
     37c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     37e:	ec 85       	ldd	r30, Y+12	; 0x0c
     380:	fd 85       	ldd	r31, Y+13	; 0x0d
     382:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     384:	ee 85       	ldd	r30, Y+14	; 0x0e
     386:	ff 85       	ldd	r31, Y+15	; 0x0f
     388:	20 83       	st	Z, r18

  _written = false;
     38a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     38c:	ec 89       	ldd	r30, Y+20	; 0x14
     38e:	fd 89       	ldd	r31, Y+21	; 0x15
     390:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     392:	ea 89       	ldd	r30, Y+18	; 0x12
     394:	fb 89       	ldd	r31, Y+19	; 0x13
     396:	80 81       	ld	r24, Z
     398:	80 61       	ori	r24, 0x10	; 16
     39a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     39c:	ea 89       	ldd	r30, Y+18	; 0x12
     39e:	fb 89       	ldd	r31, Y+19	; 0x13
     3a0:	80 81       	ld	r24, Z
     3a2:	88 60       	ori	r24, 0x08	; 8
     3a4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     3a6:	ea 89       	ldd	r30, Y+18	; 0x12
     3a8:	fb 89       	ldd	r31, Y+19	; 0x13
     3aa:	80 81       	ld	r24, Z
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     3b0:	ea 89       	ldd	r30, Y+18	; 0x12
     3b2:	fb 89       	ldd	r31, Y+19	; 0x13
     3b4:	80 81       	ld	r24, Z
     3b6:	8f 7d       	andi	r24, 0xDF	; 223
     3b8:	80 83       	st	Z, r24
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	08 95       	ret

000003ca <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	08 95       	ret

000003d0 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     3d0:	1f 92       	push	r1
     3d2:	0f 92       	push	r0
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	0f 92       	push	r0
     3d8:	11 24       	eor	r1, r1
     3da:	2f 93       	push	r18
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     3e8:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <__data_end+0x10>
     3ec:	f0 91 49 03 	lds	r31, 0x0349	; 0x800349 <__data_end+0x11>
     3f0:	80 81       	ld	r24, Z
     3f2:	82 fd       	sbrc	r24, 2
     3f4:	14 c0       	rjmp	.+40     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     3f6:	e8 e3       	ldi	r30, 0x38	; 56
     3f8:	f3 e0       	ldi	r31, 0x03	; 3
     3fa:	a6 89       	ldd	r26, Z+22	; 0x16
     3fc:	b7 89       	ldd	r27, Z+23	; 0x17
     3fe:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     400:	81 8d       	ldd	r24, Z+25	; 0x19
     402:	8f 5f       	subi	r24, 0xFF	; 255
     404:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     406:	92 8d       	ldd	r25, Z+26	; 0x1a
     408:	89 17       	cp	r24, r25
     40a:	71 f0       	breq	.+28     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
      _rx_buffer[_rx_buffer_head] = c;
     40c:	df 01       	movw	r26, r30
     40e:	e1 8d       	ldd	r30, Z+25	; 0x19
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	e8 5c       	subi	r30, 0xC8	; 200
     414:	fc 4f       	sbci	r31, 0xFC	; 252
     416:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     418:	59 96       	adiw	r26, 0x19	; 25
     41a:	8c 93       	st	X, r24
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     41e:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <__data_end+0x16>
     422:	f0 91 4f 03 	lds	r31, 0x034F	; 0x80034f <__data_end+0x17>
     426:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	2f 91       	pop	r18
     436:	0f 90       	pop	r0
     438:	0f be       	out	0x3f, r0	; 63
     43a:	0f 90       	pop	r0
     43c:	1f 90       	pop	r1
     43e:	18 95       	reti

00000440 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	0f 92       	push	r0
     448:	11 24       	eor	r1, r1
     44a:	2f 93       	push	r18
     44c:	3f 93       	push	r19
     44e:	4f 93       	push	r20
     450:	5f 93       	push	r21
     452:	6f 93       	push	r22
     454:	7f 93       	push	r23
     456:	8f 93       	push	r24
     458:	9f 93       	push	r25
     45a:	af 93       	push	r26
     45c:	bf 93       	push	r27
     45e:	ef 93       	push	r30
     460:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     462:	88 e3       	ldi	r24, 0x38	; 56
     464:	93 e0       	ldi	r25, 0x03	; 3
     466:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	bf 91       	pop	r27
     470:	af 91       	pop	r26
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	7f 91       	pop	r23
     478:	6f 91       	pop	r22
     47a:	5f 91       	pop	r21
     47c:	4f 91       	pop	r20
     47e:	3f 91       	pop	r19
     480:	2f 91       	pop	r18
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     48c:	88 e3       	ldi	r24, 0x38	; 56
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN14HardwareSerial9availableEv>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	89 2b       	or	r24, r25
     498:	09 f4       	brne	.+2      	; 0x49c <_Z17Serial0_availablev+0x10>
     49a:	20 e0       	ldi	r18, 0x00	; 0
}
     49c:	82 2f       	mov	r24, r18
     49e:	08 95       	ret

000004a0 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     4a0:	e8 e3       	ldi	r30, 0x38	; 56
     4a2:	f3 e0       	ldi	r31, 0x03	; 3
     4a4:	13 82       	std	Z+3, r1	; 0x03
     4a6:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     4a8:	88 ee       	ldi	r24, 0xE8	; 232
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	a0 e0       	ldi	r26, 0x00	; 0
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	84 83       	std	Z+4, r24	; 0x04
     4b2:	95 83       	std	Z+5, r25	; 0x05
     4b4:	a6 83       	std	Z+6, r26	; 0x06
     4b6:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     4b8:	8f e0       	ldi	r24, 0x0F	; 15
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	85 ec       	ldi	r24, 0xC5	; 197
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	95 87       	std	Z+13, r25	; 0x0d
     4c6:	84 87       	std	Z+12, r24	; 0x0c
     4c8:	84 ec       	ldi	r24, 0xC4	; 196
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	97 87       	std	Z+15, r25	; 0x0f
     4ce:	86 87       	std	Z+14, r24	; 0x0e
     4d0:	80 ec       	ldi	r24, 0xC0	; 192
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	91 8b       	std	Z+17, r25	; 0x11
     4d6:	80 8b       	std	Z+16, r24	; 0x10
     4d8:	81 ec       	ldi	r24, 0xC1	; 193
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	93 8b       	std	Z+19, r25	; 0x13
     4de:	82 8b       	std	Z+18, r24	; 0x12
     4e0:	82 ec       	ldi	r24, 0xC2	; 194
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	95 8b       	std	Z+21, r25	; 0x15
     4e6:	84 8b       	std	Z+20, r24	; 0x14
     4e8:	86 ec       	ldi	r24, 0xC6	; 198
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	97 8b       	std	Z+23, r25	; 0x17
     4ee:	86 8b       	std	Z+22, r24	; 0x16
     4f0:	11 8e       	std	Z+25, r1	; 0x19
     4f2:	12 8e       	std	Z+26, r1	; 0x1a
     4f4:	13 8e       	std	Z+27, r1	; 0x1b
     4f6:	14 8e       	std	Z+28, r1	; 0x1c
     4f8:	08 95       	ret

000004fa <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     4fa:	08 95       	ret

000004fc <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
     4fc:	8f 92       	push	r8
     4fe:	9f 92       	push	r9
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	6c 01       	movw	r12, r24
     516:	7b 01       	movw	r14, r22
     518:	4c 01       	movw	r8, r24
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	88 0e       	add	r8, r24
     51e:	91 1c       	adc	r9, r1
     520:	56 01       	movw	r10, r12
     522:	e5 e0       	ldi	r30, 0x05	; 5
     524:	ae 0e       	add	r10, r30
     526:	b1 1c       	adc	r11, r1
     528:	00 e0       	ldi	r16, 0x00	; 0
     52a:	10 e0       	ldi	r17, 0x00	; 0
     52c:	f4 01       	movw	r30, r8
     52e:	61 91       	ld	r22, Z+
     530:	4f 01       	movw	r8, r30
     532:	4a e0       	ldi	r20, 0x0A	; 10
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	c7 01       	movw	r24, r14
     538:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN5Print5printEhi>
     53c:	ec 01       	movw	r28, r24
     53e:	6e e2       	ldi	r22, 0x2E	; 46
     540:	c7 01       	movw	r24, r14
     542:	0e 94 21 03 	call	0x642	; 0x642 <_ZN5Print5printEc>
     546:	8c 0f       	add	r24, r28
     548:	9d 1f       	adc	r25, r29
     54a:	08 0f       	add	r16, r24
     54c:	19 1f       	adc	r17, r25
     54e:	8a 14       	cp	r8, r10
     550:	9b 04       	cpc	r9, r11
     552:	61 f7       	brne	.-40     	; 0x52c <_ZNK9IPAddress7printToER5Print+0x30>
     554:	4a e0       	ldi	r20, 0x0A	; 10
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	f6 01       	movw	r30, r12
     55a:	65 81       	ldd	r22, Z+5	; 0x05
     55c:	c7 01       	movw	r24, r14
     55e:	0e 94 b5 03 	call	0x76a	; 0x76a <_ZN5Print5printEhi>
     562:	80 0f       	add	r24, r16
     564:	91 1f       	adc	r25, r17
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	bf 90       	pop	r11
     578:	af 90       	pop	r10
     57a:	9f 90       	pop	r9
     57c:	8f 90       	pop	r8
     57e:	08 95       	ret

00000580 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     580:	e5 ed       	ldi	r30, 0xD5	; 213
     582:	f3 e0       	ldi	r31, 0x03	; 3
     584:	81 e2       	ldi	r24, 0x21	; 33
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	91 83       	std	Z+1, r25	; 0x01
     58a:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     58c:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     58e:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     590:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     592:	15 82       	std	Z+5, r1	; 0x05
     594:	08 95       	ret

00000596 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
     596:	08 95       	ret

00000598 <main>:

int main(void)
{
	init();
     598:	0e 94 54 05 	call	0xaa8	; 0xaa8 <init>
	initVariant();
     59c:	0e 94 cb 02 	call	0x596	; 0x596 <initVariant>
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
		if (serialEventRun) serialEventRun();
     5a0:	ce ec       	ldi	r28, 0xCE	; 206
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
	USBDevice.attach();
#endif
	
    
	for (;;) {
		main_ArduinoLockOpener();
     5a4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <main_ArduinoLockOpener>
		if (serialEventRun) serialEventRun();
     5a8:	20 97       	sbiw	r28, 0x00	; 0
     5aa:	e1 f3       	breq	.-8      	; 0x5a4 <main+0xc>
     5ac:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z14serialEventRunv>
     5b0:	f9 cf       	rjmp	.-14     	; 0x5a4 <main+0xc>

000005b2 <_Znwj>:
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
     5b2:	0e 94 06 10 	call	0x200c	; 0x200c <malloc>
}
     5b6:	08 95       	ret

000005b8 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	41 15       	cp	r20, r1
     5ca:	51 05       	cpc	r21, r1
     5cc:	c1 f0       	breq	.+48     	; 0x5fe <_ZN5Print5writeEPKhj+0x46>
     5ce:	6a 01       	movw	r12, r20
     5d0:	8c 01       	movw	r16, r24
     5d2:	e6 2e       	mov	r14, r22
     5d4:	f7 2e       	mov	r15, r23
     5d6:	c0 e0       	ldi	r28, 0x00	; 0
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
     5da:	d7 01       	movw	r26, r14
     5dc:	6d 91       	ld	r22, X+
     5de:	7d 01       	movw	r14, r26
     5e0:	d8 01       	movw	r26, r16
     5e2:	ed 91       	ld	r30, X+
     5e4:	fc 91       	ld	r31, X
     5e6:	01 90       	ld	r0, Z+
     5e8:	f0 81       	ld	r31, Z
     5ea:	e0 2d       	mov	r30, r0
     5ec:	c8 01       	movw	r24, r16
     5ee:	09 95       	icall
     5f0:	89 2b       	or	r24, r25
     5f2:	39 f0       	breq	.+14     	; 0x602 <_ZN5Print5writeEPKhj+0x4a>
     5f4:	21 96       	adiw	r28, 0x01	; 1
     5f6:	cc 16       	cp	r12, r28
     5f8:	dd 06       	cpc	r13, r29
     5fa:	79 f7       	brne	.-34     	; 0x5da <_ZN5Print5writeEPKhj+0x22>
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <_ZN5Print5writeEPKhj+0x4a>
     5fe:	c0 e0       	ldi	r28, 0x00	; 0
     600:	d0 e0       	ldi	r29, 0x00	; 0
     602:	ce 01       	movw	r24, r28
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	df 90       	pop	r13
     612:	cf 90       	pop	r12
     614:	08 95       	ret

00000616 <_ZN5Print5printEPKc>:
     616:	61 15       	cp	r22, r1
     618:	71 05       	cpc	r23, r1
     61a:	81 f0       	breq	.+32     	; 0x63c <_ZN5Print5printEPKc+0x26>
     61c:	fb 01       	movw	r30, r22
     61e:	01 90       	ld	r0, Z+
     620:	00 20       	and	r0, r0
     622:	e9 f7       	brne	.-6      	; 0x61e <_ZN5Print5printEPKc+0x8>
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	af 01       	movw	r20, r30
     628:	46 1b       	sub	r20, r22
     62a:	57 0b       	sbc	r21, r23
     62c:	dc 01       	movw	r26, r24
     62e:	ed 91       	ld	r30, X+
     630:	fc 91       	ld	r31, X
     632:	02 80       	ldd	r0, Z+2	; 0x02
     634:	f3 81       	ldd	r31, Z+3	; 0x03
     636:	e0 2d       	mov	r30, r0
     638:	09 95       	icall
     63a:	08 95       	ret
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	08 95       	ret

00000642 <_ZN5Print5printEc>:
     642:	dc 01       	movw	r26, r24
     644:	ed 91       	ld	r30, X+
     646:	fc 91       	ld	r31, X
     648:	01 90       	ld	r0, Z+
     64a:	f0 81       	ld	r31, Z
     64c:	e0 2d       	mov	r30, r0
     64e:	09 95       	icall
     650:	08 95       	ret

00000652 <_ZN5Print7printlnEv>:
     652:	dc 01       	movw	r26, r24
     654:	ed 91       	ld	r30, X+
     656:	fc 91       	ld	r31, X
     658:	02 80       	ldd	r0, Z+2	; 0x02
     65a:	f3 81       	ldd	r31, Z+3	; 0x03
     65c:	e0 2d       	mov	r30, r0
     65e:	42 e0       	ldi	r20, 0x02	; 2
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	63 e2       	ldi	r22, 0x23	; 35
     664:	71 e0       	ldi	r23, 0x01	; 1
     666:	09 95       	icall
     668:	08 95       	ret

0000066a <_ZN5Print7printlnEPKc>:
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ec 01       	movw	r28, r24
     674:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEPKc>
     678:	8c 01       	movw	r16, r24
     67a:	ce 01       	movw	r24, r28
     67c:	0e 94 29 03 	call	0x652	; 0x652 <_ZN5Print7printlnEv>
     680:	80 0f       	add	r24, r16
     682:	91 1f       	adc	r25, r17
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	08 95       	ret

0000068e <_ZN5Print11printNumberEmh>:
     68e:	8f 92       	push	r8
     690:	9f 92       	push	r9
     692:	af 92       	push	r10
     694:	bf 92       	push	r11
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	a1 97       	sbiw	r28, 0x21	; 33
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
     6b2:	7c 01       	movw	r14, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	ba 01       	movw	r22, r20
     6b8:	19 a2       	std	Y+33, r1	; 0x21
     6ba:	22 30       	cpi	r18, 0x02	; 2
     6bc:	08 f4       	brcc	.+2      	; 0x6c0 <_ZN5Print11printNumberEmh+0x32>
     6be:	2a e0       	ldi	r18, 0x0A	; 10
     6c0:	8e 01       	movw	r16, r28
     6c2:	0f 5d       	subi	r16, 0xDF	; 223
     6c4:	1f 4f       	sbci	r17, 0xFF	; 255
     6c6:	82 2e       	mov	r8, r18
     6c8:	91 2c       	mov	r9, r1
     6ca:	a1 2c       	mov	r10, r1
     6cc:	b1 2c       	mov	r11, r1
     6ce:	a5 01       	movw	r20, r10
     6d0:	94 01       	movw	r18, r8
     6d2:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__udivmodsi4>
     6d6:	e6 2f       	mov	r30, r22
     6d8:	62 2f       	mov	r22, r18
     6da:	73 2f       	mov	r23, r19
     6dc:	84 2f       	mov	r24, r20
     6de:	95 2f       	mov	r25, r21
     6e0:	01 50       	subi	r16, 0x01	; 1
     6e2:	11 09       	sbc	r17, r1
     6e4:	ea 30       	cpi	r30, 0x0A	; 10
     6e6:	10 f4       	brcc	.+4      	; 0x6ec <_ZN5Print11printNumberEmh+0x5e>
     6e8:	e0 5d       	subi	r30, 0xD0	; 208
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <_ZN5Print11printNumberEmh+0x60>
     6ec:	e9 5c       	subi	r30, 0xC9	; 201
     6ee:	d8 01       	movw	r26, r16
     6f0:	ec 93       	st	X, r30
     6f2:	61 15       	cp	r22, r1
     6f4:	71 05       	cpc	r23, r1
     6f6:	81 05       	cpc	r24, r1
     6f8:	91 05       	cpc	r25, r1
     6fa:	49 f7       	brne	.-46     	; 0x6ce <_ZN5Print11printNumberEmh+0x40>
     6fc:	01 15       	cp	r16, r1
     6fe:	11 05       	cpc	r17, r1
     700:	91 f0       	breq	.+36     	; 0x726 <_ZN5Print11printNumberEmh+0x98>
     702:	f8 01       	movw	r30, r16
     704:	01 90       	ld	r0, Z+
     706:	00 20       	and	r0, r0
     708:	e9 f7       	brne	.-6      	; 0x704 <_ZN5Print11printNumberEmh+0x76>
     70a:	31 97       	sbiw	r30, 0x01	; 1
     70c:	af 01       	movw	r20, r30
     70e:	40 1b       	sub	r20, r16
     710:	51 0b       	sbc	r21, r17
     712:	d7 01       	movw	r26, r14
     714:	ed 91       	ld	r30, X+
     716:	fc 91       	ld	r31, X
     718:	02 80       	ldd	r0, Z+2	; 0x02
     71a:	f3 81       	ldd	r31, Z+3	; 0x03
     71c:	e0 2d       	mov	r30, r0
     71e:	b8 01       	movw	r22, r16
     720:	c7 01       	movw	r24, r14
     722:	09 95       	icall
     724:	02 c0       	rjmp	.+4      	; 0x72a <_ZN5Print11printNumberEmh+0x9c>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	a1 96       	adiw	r28, 0x21	; 33
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	bf 90       	pop	r11
     744:	af 90       	pop	r10
     746:	9f 90       	pop	r9
     748:	8f 90       	pop	r8
     74a:	08 95       	ret

0000074c <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     74c:	21 15       	cp	r18, r1
     74e:	31 05       	cpc	r19, r1
     750:	49 f4       	brne	.+18     	; 0x764 <_ZN5Print5printEmi+0x18>
     752:	dc 01       	movw	r26, r24
     754:	ed 91       	ld	r30, X+
     756:	fc 91       	ld	r31, X
     758:	01 90       	ld	r0, Z+
     75a:	f0 81       	ld	r31, Z
     75c:	e0 2d       	mov	r30, r0
     75e:	64 2f       	mov	r22, r20
     760:	09 95       	icall
     762:	08 95       	ret
  else return printNumber(n, base);
     764:	0e 94 47 03 	call	0x68e	; 0x68e <_ZN5Print11printNumberEmh>
}
     768:	08 95       	ret

0000076a <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     76a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     76c:	46 2f       	mov	r20, r22
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	60 e0       	ldi	r22, 0x00	; 0
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	0e 94 a6 03 	call	0x74c	; 0x74c <_ZN5Print5printEmi>
}
     778:	08 95       	ret

0000077a <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	39 f0       	breq	.+14     	; 0x78c <_Z12disableTimerh+0x12>
     77e:	18 f0       	brcs	.+6      	; 0x786 <_Z12disableTimerh+0xc>
     780:	82 30       	cpi	r24, 0x02	; 2
     782:	51 f0       	breq	.+20     	; 0x798 <_Z12disableTimerh+0x1e>
     784:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     786:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     78a:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     78c:	ef e6       	ldi	r30, 0x6F	; 111
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	8d 7f       	andi	r24, 0xFD	; 253
     794:	80 83       	st	Z, r24
      break;
     796:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     798:	e0 e7       	ldi	r30, 0x70	; 112
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8d 7f       	andi	r24, 0xFD	; 253
     7a0:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     7a8:	e1 eb       	ldi	r30, 0xB1	; 177
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	88 7f       	andi	r24, 0xF8	; 248
     7b0:	84 60       	ori	r24, 0x04	; 4
     7b2:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     7b4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     7b8:	08 95       	ret

000007ba <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     7ba:	cf 93       	push	r28
     7bc:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     7be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL9tone_pins>
     7c2:	c8 13       	cpse	r28, r24
     7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     7c6:	e8 e6       	ldi	r30, 0x68	; 104
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
     7cc:	9f ef       	ldi	r25, 0xFF	; 255
     7ce:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_ZL9tone_pins>
      break;
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <_Z6noToneh+0x1c>
}


void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
      tone_pins[i] = 255;
      break;
    }
  }
  
  disableTimer(_timer);
     7d6:	0e 94 bd 03 	call	0x77a	; 0x77a <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	8c 2f       	mov	r24, r28
     7de:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
}
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     7e6:	1f 92       	push	r1
     7e8:	0f 92       	push	r0
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	0f 92       	push	r0
     7ee:	11 24       	eor	r1, r1
     7f0:	2f 93       	push	r18
     7f2:	3f 93       	push	r19
     7f4:	4f 93       	push	r20
     7f6:	5f 93       	push	r21
     7f8:	6f 93       	push	r22
     7fa:	7f 93       	push	r23
     7fc:	8f 93       	push	r24
     7fe:	9f 93       	push	r25
     800:	af 93       	push	r26
     802:	bf 93       	push	r27
     804:	ef 93       	push	r30
     806:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     808:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <timer2_toggle_count>
     80c:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <timer2_toggle_count+0x1>
     810:	a0 91 e0 03 	lds	r26, 0x03E0	; 0x8003e0 <timer2_toggle_count+0x2>
     814:	b0 91 e1 03 	lds	r27, 0x03E1	; 0x8003e1 <timer2_toggle_count+0x3>
     818:	89 2b       	or	r24, r25
     81a:	8a 2b       	or	r24, r26
     81c:	8b 2b       	or	r24, r27
     81e:	51 f1       	breq	.+84     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     820:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <timer2_pin_mask>
     824:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <timer2_pin_port>
     828:	f0 91 dd 03 	lds	r31, 0x03DD	; 0x8003dd <timer2_pin_port+0x1>
     82c:	80 81       	ld	r24, Z
     82e:	89 27       	eor	r24, r25
     830:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     832:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <timer2_toggle_count>
     836:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <timer2_toggle_count+0x1>
     83a:	a0 91 e0 03 	lds	r26, 0x03E0	; 0x8003e0 <timer2_toggle_count+0x2>
     83e:	b0 91 e1 03 	lds	r27, 0x03E1	; 0x8003e1 <timer2_toggle_count+0x3>
     842:	18 16       	cp	r1, r24
     844:	19 06       	cpc	r1, r25
     846:	1a 06       	cpc	r1, r26
     848:	1b 06       	cpc	r1, r27
     84a:	c4 f4       	brge	.+48     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
      timer2_toggle_count--;
     84c:	80 91 de 03 	lds	r24, 0x03DE	; 0x8003de <timer2_toggle_count>
     850:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <timer2_toggle_count+0x1>
     854:	a0 91 e0 03 	lds	r26, 0x03E0	; 0x8003e0 <timer2_toggle_count+0x2>
     858:	b0 91 e1 03 	lds	r27, 0x03E1	; 0x8003e1 <timer2_toggle_count+0x3>
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	a1 09       	sbc	r26, r1
     860:	b1 09       	sbc	r27, r1
     862:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <timer2_toggle_count>
     866:	90 93 df 03 	sts	0x03DF, r25	; 0x8003df <timer2_toggle_count+0x1>
     86a:	a0 93 e0 03 	sts	0x03E0, r26	; 0x8003e0 <timer2_toggle_count+0x2>
     86e:	b0 93 e1 03 	sts	0x03E1, r27	; 0x8003e1 <timer2_toggle_count+0x3>
     872:	04 c0       	rjmp	.+8      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     874:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZL9tone_pins>
     878:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     87c:	ff 91       	pop	r31
     87e:	ef 91       	pop	r30
     880:	bf 91       	pop	r27
     882:	af 91       	pop	r26
     884:	9f 91       	pop	r25
     886:	8f 91       	pop	r24
     888:	7f 91       	pop	r23
     88a:	6f 91       	pop	r22
     88c:	5f 91       	pop	r21
     88e:	4f 91       	pop	r20
     890:	3f 91       	pop	r19
     892:	2f 91       	pop	r18
     894:	0f 90       	pop	r0
     896:	0f be       	out	0x3f, r0	; 63
     898:	0f 90       	pop	r0
     89a:	1f 90       	pop	r1
     89c:	18 95       	reti

0000089e <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
     89e:	08 95       	ret

000008a0 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
     8a0:	1f 92       	push	r1
     8a2:	0f 92       	push	r0
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	0f 92       	push	r0
     8a8:	11 24       	eor	r1, r1
     8aa:	2f 93       	push	r18
     8ac:	3f 93       	push	r19
     8ae:	4f 93       	push	r20
     8b0:	5f 93       	push	r21
     8b2:	6f 93       	push	r22
     8b4:	7f 93       	push	r23
     8b6:	8f 93       	push	r24
     8b8:	9f 93       	push	r25
     8ba:	af 93       	push	r26
     8bc:	bf 93       	push	r27
     8be:	ef 93       	push	r30
     8c0:	ff 93       	push	r31
     8c2:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <intFunc>
     8c6:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <intFunc+0x1>
     8ca:	09 95       	icall
     8cc:	ff 91       	pop	r31
     8ce:	ef 91       	pop	r30
     8d0:	bf 91       	pop	r27
     8d2:	af 91       	pop	r26
     8d4:	9f 91       	pop	r25
     8d6:	8f 91       	pop	r24
     8d8:	7f 91       	pop	r23
     8da:	6f 91       	pop	r22
     8dc:	5f 91       	pop	r21
     8de:	4f 91       	pop	r20
     8e0:	3f 91       	pop	r19
     8e2:	2f 91       	pop	r18
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
     8ee:	1f 92       	push	r1
     8f0:	0f 92       	push	r0
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	0f 92       	push	r0
     8f6:	11 24       	eor	r1, r1
     8f8:	2f 93       	push	r18
     8fa:	3f 93       	push	r19
     8fc:	4f 93       	push	r20
     8fe:	5f 93       	push	r21
     900:	6f 93       	push	r22
     902:	7f 93       	push	r23
     904:	8f 93       	push	r24
     906:	9f 93       	push	r25
     908:	af 93       	push	r26
     90a:	bf 93       	push	r27
     90c:	ef 93       	push	r30
     90e:	ff 93       	push	r31
     910:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <intFunc+0x2>
     914:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <intFunc+0x3>
     918:	09 95       	icall
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	bf 91       	pop	r27
     920:	af 91       	pop	r26
     922:	9f 91       	pop	r25
     924:	8f 91       	pop	r24
     926:	7f 91       	pop	r23
     928:	6f 91       	pop	r22
     92a:	5f 91       	pop	r21
     92c:	4f 91       	pop	r20
     92e:	3f 91       	pop	r19
     930:	2f 91       	pop	r18
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti

0000093c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     93c:	1f 92       	push	r1
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <timer0_millis>
     956:	90 91 e4 03 	lds	r25, 0x03E4	; 0x8003e4 <timer0_millis+0x1>
     95a:	a0 91 e5 03 	lds	r26, 0x03E5	; 0x8003e5 <timer0_millis+0x2>
     95e:	b0 91 e6 03 	lds	r27, 0x03E6	; 0x8003e6 <timer0_millis+0x3>
     962:	30 91 e2 03 	lds	r19, 0x03E2	; 0x8003e2 <timer0_fract>
     966:	23 e0       	ldi	r18, 0x03	; 3
     968:	23 0f       	add	r18, r19
     96a:	2d 37       	cpi	r18, 0x7D	; 125
     96c:	20 f4       	brcc	.+8      	; 0x976 <__vector_16+0x3a>
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	a1 1d       	adc	r26, r1
     972:	b1 1d       	adc	r27, r1
     974:	05 c0       	rjmp	.+10     	; 0x980 <__vector_16+0x44>
     976:	26 e8       	ldi	r18, 0x86	; 134
     978:	23 0f       	add	r18, r19
     97a:	02 96       	adiw	r24, 0x02	; 2
     97c:	a1 1d       	adc	r26, r1
     97e:	b1 1d       	adc	r27, r1
     980:	20 93 e2 03 	sts	0x03E2, r18	; 0x8003e2 <timer0_fract>
     984:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <timer0_millis>
     988:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <timer0_millis+0x1>
     98c:	a0 93 e5 03 	sts	0x03E5, r26	; 0x8003e5 <timer0_millis+0x2>
     990:	b0 93 e6 03 	sts	0x03E6, r27	; 0x8003e6 <timer0_millis+0x3>
     994:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <timer0_overflow_count>
     998:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <timer0_overflow_count+0x1>
     99c:	a0 91 e9 03 	lds	r26, 0x03E9	; 0x8003e9 <timer0_overflow_count+0x2>
     9a0:	b0 91 ea 03 	lds	r27, 0x03EA	; 0x8003ea <timer0_overflow_count+0x3>
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	a1 1d       	adc	r26, r1
     9a8:	b1 1d       	adc	r27, r1
     9aa:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <timer0_overflow_count>
     9ae:	90 93 e8 03 	sts	0x03E8, r25	; 0x8003e8 <timer0_overflow_count+0x1>
     9b2:	a0 93 e9 03 	sts	0x03E9, r26	; 0x8003e9 <timer0_overflow_count+0x2>
     9b6:	b0 93 ea 03 	sts	0x03EA, r27	; 0x8003ea <timer0_overflow_count+0x3>
     9ba:	bf 91       	pop	r27
     9bc:	af 91       	pop	r26
     9be:	9f 91       	pop	r25
     9c0:	8f 91       	pop	r24
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <micros>:
     9d0:	3f b7       	in	r19, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	80 91 e7 03 	lds	r24, 0x03E7	; 0x8003e7 <timer0_overflow_count>
     9d8:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <timer0_overflow_count+0x1>
     9dc:	a0 91 e9 03 	lds	r26, 0x03E9	; 0x8003e9 <timer0_overflow_count+0x2>
     9e0:	b0 91 ea 03 	lds	r27, 0x03EA	; 0x8003ea <timer0_overflow_count+0x3>
     9e4:	26 b5       	in	r18, 0x26	; 38
     9e6:	a8 9b       	sbis	0x15, 0	; 21
     9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <micros+0x24>
     9ea:	2f 3f       	cpi	r18, 0xFF	; 255
     9ec:	19 f0       	breq	.+6      	; 0x9f4 <micros+0x24>
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	a1 1d       	adc	r26, r1
     9f2:	b1 1d       	adc	r27, r1
     9f4:	3f bf       	out	0x3f, r19	; 63
     9f6:	ba 2f       	mov	r27, r26
     9f8:	a9 2f       	mov	r26, r25
     9fa:	98 2f       	mov	r25, r24
     9fc:	88 27       	eor	r24, r24
     9fe:	82 0f       	add	r24, r18
     a00:	91 1d       	adc	r25, r1
     a02:	a1 1d       	adc	r26, r1
     a04:	b1 1d       	adc	r27, r1
     a06:	bc 01       	movw	r22, r24
     a08:	cd 01       	movw	r24, r26
     a0a:	66 0f       	add	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	88 1f       	adc	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	66 0f       	add	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	88 1f       	adc	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	08 95       	ret

00000a1c <delay>:
     a1c:	8f 92       	push	r8
     a1e:	9f 92       	push	r9
     a20:	af 92       	push	r10
     a22:	bf 92       	push	r11
     a24:	cf 92       	push	r12
     a26:	df 92       	push	r13
     a28:	ef 92       	push	r14
     a2a:	ff 92       	push	r15
     a2c:	6b 01       	movw	r12, r22
     a2e:	7c 01       	movw	r14, r24
     a30:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <micros>
     a34:	4b 01       	movw	r8, r22
     a36:	5c 01       	movw	r10, r24
     a38:	c1 14       	cp	r12, r1
     a3a:	d1 04       	cpc	r13, r1
     a3c:	e1 04       	cpc	r14, r1
     a3e:	f1 04       	cpc	r15, r1
     a40:	39 f5       	brne	.+78     	; 0xa90 <delay+0x74>
     a42:	29 c0       	rjmp	.+82     	; 0xa96 <delay+0x7a>
     a44:	0e 94 7d 02 	call	0x4fa	; 0x4fa <yield>
     a48:	10 c0       	rjmp	.+32     	; 0xa6a <delay+0x4e>
     a4a:	21 e0       	ldi	r18, 0x01	; 1
     a4c:	c2 1a       	sub	r12, r18
     a4e:	d1 08       	sbc	r13, r1
     a50:	e1 08       	sbc	r14, r1
     a52:	f1 08       	sbc	r15, r1
     a54:	88 ee       	ldi	r24, 0xE8	; 232
     a56:	88 0e       	add	r8, r24
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	98 1e       	adc	r9, r24
     a5c:	a1 1c       	adc	r10, r1
     a5e:	b1 1c       	adc	r11, r1
     a60:	c1 14       	cp	r12, r1
     a62:	d1 04       	cpc	r13, r1
     a64:	e1 04       	cpc	r14, r1
     a66:	f1 04       	cpc	r15, r1
     a68:	b1 f0       	breq	.+44     	; 0xa96 <delay+0x7a>
     a6a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <micros>
     a6e:	dc 01       	movw	r26, r24
     a70:	cb 01       	movw	r24, r22
     a72:	88 19       	sub	r24, r8
     a74:	99 09       	sbc	r25, r9
     a76:	aa 09       	sbc	r26, r10
     a78:	bb 09       	sbc	r27, r11
     a7a:	88 3e       	cpi	r24, 0xE8	; 232
     a7c:	93 40       	sbci	r25, 0x03	; 3
     a7e:	a1 05       	cpc	r26, r1
     a80:	b1 05       	cpc	r27, r1
     a82:	18 f7       	brcc	.-58     	; 0xa4a <delay+0x2e>
     a84:	c1 14       	cp	r12, r1
     a86:	d1 04       	cpc	r13, r1
     a88:	e1 04       	cpc	r14, r1
     a8a:	f1 04       	cpc	r15, r1
     a8c:	d9 f6       	brne	.-74     	; 0xa44 <delay+0x28>
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <delay+0x7a>
     a90:	0e 94 7d 02 	call	0x4fa	; 0x4fa <yield>
     a94:	ea cf       	rjmp	.-44     	; 0xa6a <delay+0x4e>
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	bf 90       	pop	r11
     aa0:	af 90       	pop	r10
     aa2:	9f 90       	pop	r9
     aa4:	8f 90       	pop	r8
     aa6:	08 95       	ret

00000aa8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     aa8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     aaa:	84 b5       	in	r24, 0x24	; 36
     aac:	82 60       	ori	r24, 0x02	; 2
     aae:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     ab0:	84 b5       	in	r24, 0x24	; 36
     ab2:	81 60       	ori	r24, 0x01	; 1
     ab4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     ab6:	85 b5       	in	r24, 0x25	; 37
     ab8:	82 60       	ori	r24, 0x02	; 2
     aba:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     abc:	85 b5       	in	r24, 0x25	; 37
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     ac2:	ee e6       	ldi	r30, 0x6E	; 110
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	80 81       	ld	r24, Z
     ac8:	81 60       	ori	r24, 0x01	; 1
     aca:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     acc:	e1 e8       	ldi	r30, 0x81	; 129
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ad2:	80 81       	ld	r24, Z
     ad4:	82 60       	ori	r24, 0x02	; 2
     ad6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     ad8:	80 81       	ld	r24, Z
     ada:	81 60       	ori	r24, 0x01	; 1
     adc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ade:	e0 e8       	ldi	r30, 0x80	; 128
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	80 81       	ld	r24, Z
     ae4:	81 60       	ori	r24, 0x01	; 1
     ae6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ae8:	e1 eb       	ldi	r30, 0xB1	; 177
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	84 60       	ori	r24, 0x04	; 4
     af0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     af2:	e0 eb       	ldi	r30, 0xB0	; 176
     af4:	f0 e0       	ldi	r31, 0x00	; 0
     af6:	80 81       	ld	r24, Z
     af8:	81 60       	ori	r24, 0x01	; 1
     afa:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     afc:	ea e7       	ldi	r30, 0x7A	; 122
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	84 60       	ori	r24, 0x04	; 4
     b04:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     b06:	80 81       	ld	r24, Z
     b08:	82 60       	ori	r24, 0x02	; 2
     b0a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     b0c:	80 81       	ld	r24, Z
     b0e:	81 60       	ori	r24, 0x01	; 1
     b10:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     b12:	80 81       	ld	r24, Z
     b14:	80 68       	ori	r24, 0x80	; 128
     b16:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     b18:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     b1c:	08 95       	ret

00000b1e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     b1e:	83 30       	cpi	r24, 0x03	; 3
     b20:	69 f0       	breq	.+26     	; 0xb3c <turnOffPWM+0x1e>
     b22:	28 f4       	brcc	.+10     	; 0xb2e <turnOffPWM+0x10>
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	b1 f0       	breq	.+44     	; 0xb54 <turnOffPWM+0x36>
     b28:	82 30       	cpi	r24, 0x02	; 2
     b2a:	c1 f0       	breq	.+48     	; 0xb5c <turnOffPWM+0x3e>
     b2c:	08 95       	ret
     b2e:	87 30       	cpi	r24, 0x07	; 7
     b30:	c9 f0       	breq	.+50     	; 0xb64 <turnOffPWM+0x46>
     b32:	88 30       	cpi	r24, 0x08	; 8
     b34:	e9 f0       	breq	.+58     	; 0xb70 <turnOffPWM+0x52>
     b36:	84 30       	cpi	r24, 0x04	; 4
     b38:	01 f5       	brne	.+64     	; 0xb7a <turnOffPWM+0x5c>
     b3a:	06 c0       	rjmp	.+12     	; 0xb48 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     b3c:	e0 e8       	ldi	r30, 0x80	; 128
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	8f 77       	andi	r24, 0x7F	; 127
     b44:	80 83       	st	Z, r24
     b46:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     b48:	e0 e8       	ldi	r30, 0x80	; 128
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	8f 7d       	andi	r24, 0xDF	; 223
     b50:	80 83       	st	Z, r24
     b52:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     b54:	84 b5       	in	r24, 0x24	; 36
     b56:	8f 77       	andi	r24, 0x7F	; 127
     b58:	84 bd       	out	0x24, r24	; 36
     b5a:	08 95       	ret
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     b5c:	84 b5       	in	r24, 0x24	; 36
     b5e:	8f 7d       	andi	r24, 0xDF	; 223
     b60:	84 bd       	out	0x24, r24	; 36
     b62:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     b64:	e0 eb       	ldi	r30, 0xB0	; 176
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	80 83       	st	Z, r24
     b6e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     b70:	e0 eb       	ldi	r30, 0xB0	; 176
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8f 7d       	andi	r24, 0xDF	; 223
     b78:	80 83       	st	Z, r24
     b7a:	08 95       	ret

00000b7c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	fc 01       	movw	r30, r24
     b84:	e3 58       	subi	r30, 0x83	; 131
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     b8a:	fc 01       	movw	r30, r24
     b8c:	ef 56       	subi	r30, 0x6F	; 111
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     b92:	88 23       	and	r24, r24
     b94:	79 f1       	breq	.+94     	; 0xbf4 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	fc 01       	movw	r30, r24
     b9e:	e7 54       	subi	r30, 0x47	; 71
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	a5 91       	lpm	r26, Z+
     ba4:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     ba6:	fc 01       	movw	r30, r24
     ba8:	e1 55       	subi	r30, 0x51	; 81
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	c5 91       	lpm	r28, Z+
     bae:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     bb0:	61 11       	cpse	r22, r1
     bb2:	0c c0       	rjmp	.+24     	; 0xbcc <pinMode+0x50>
		uint8_t oldSREG = SREG;
     bb4:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bb6:	f8 94       	cli
		*reg &= ~bit;
     bb8:	8c 91       	ld	r24, X
     bba:	e2 2f       	mov	r30, r18
     bbc:	e0 95       	com	r30
     bbe:	8e 23       	and	r24, r30
     bc0:	8c 93       	st	X, r24
		*out &= ~bit;
     bc2:	28 81       	ld	r18, Y
     bc4:	e2 23       	and	r30, r18
     bc6:	e8 83       	st	Y, r30
		SREG = oldSREG;
     bc8:	9f bf       	out	0x3f, r25	; 63
     bca:	14 c0       	rjmp	.+40     	; 0xbf4 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
     bcc:	62 30       	cpi	r22, 0x02	; 2
     bce:	61 f4       	brne	.+24     	; 0xbe8 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
     bd0:	9f b7       	in	r25, 0x3f	; 63
                cli();
     bd2:	f8 94       	cli
		*reg &= ~bit;
     bd4:	8c 91       	ld	r24, X
     bd6:	32 2f       	mov	r19, r18
     bd8:	30 95       	com	r19
     bda:	83 23       	and	r24, r19
     bdc:	8c 93       	st	X, r24
		*out |= bit;
     bde:	e8 81       	ld	r30, Y
     be0:	e2 2b       	or	r30, r18
     be2:	e8 83       	st	Y, r30
		SREG = oldSREG;
     be4:	9f bf       	out	0x3f, r25	; 63
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
     be8:	8f b7       	in	r24, 0x3f	; 63
                cli();
     bea:	f8 94       	cli
		*reg |= bit;
     bec:	ec 91       	ld	r30, X
     bee:	e2 2b       	or	r30, r18
     bf0:	ec 93       	st	X, r30
		SREG = oldSREG;
     bf2:	8f bf       	out	0x3f, r24	; 63
	}
}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	f9 01       	movw	r30, r18
     c06:	e7 59       	subi	r30, 0x97	; 151
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     c0c:	f9 01       	movw	r30, r18
     c0e:	e3 58       	subi	r30, 0x83	; 131
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
     c14:	f9 01       	movw	r30, r18
     c16:	ef 56       	subi	r30, 0x6F	; 111
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     c1c:	cc 23       	and	r28, r28
     c1e:	d1 f0       	breq	.+52     	; 0xc54 <digitalWrite+0x5a>
     c20:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     c22:	81 11       	cpse	r24, r1
     c24:	0e 94 8f 05 	call	0xb1e	; 0xb1e <turnOffPWM>

	out = portOutputRegister(port);
     c28:	ec 2f       	mov	r30, r28
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	e1 55       	subi	r30, 0x51	; 81
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	a5 91       	lpm	r26, Z+
     c36:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     c38:	8f b7       	in	r24, 0x3f	; 63
	cli();
     c3a:	f8 94       	cli

	if (val == LOW) {
     c3c:	d1 11       	cpse	r29, r1
     c3e:	06 c0       	rjmp	.+12     	; 0xc4c <digitalWrite+0x52>
		*out &= ~bit;
     c40:	9c 91       	ld	r25, X
     c42:	e1 2f       	mov	r30, r17
     c44:	e0 95       	com	r30
     c46:	e9 23       	and	r30, r25
     c48:	ec 93       	st	X, r30
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <digitalWrite+0x58>
	} else {
		*out |= bit;
     c4c:	ec 91       	ld	r30, X
     c4e:	e1 2b       	or	r30, r17
     c50:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
     c52:	8f bf       	out	0x3f, r24	; 63
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	08 95       	ret

00000c5c <_ZN14SoftwareSerial4readEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
     c5c:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <_ZN14SoftwareSerial13active_objectE>
     c60:	30 91 ee 04 	lds	r19, 0x04EE	; 0x8004ee <_ZN14SoftwareSerial13active_objectE+0x1>
     c64:	28 17       	cp	r18, r24
     c66:	39 07       	cpc	r19, r25
     c68:	99 f4       	brne	.+38     	; 0xc90 <_ZN14SoftwareSerial4readEv+0x34>
     c6a:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     c6e:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     c72:	98 17       	cp	r25, r24
     c74:	81 f0       	breq	.+32     	; 0xc96 <_ZN14SoftwareSerial4readEv+0x3a>
     c76:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	e3 51       	subi	r30, 0x13	; 19
     c7e:	fc 4f       	sbci	r31, 0xFC	; 252
     c80:	80 81       	ld	r24, Z
     c82:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     c86:	2f 5f       	subi	r18, 0xFF	; 255
     c88:	20 93 eb 03 	sts	0x03EB, r18	; 0x8003eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	08 95       	ret
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	9f ef       	ldi	r25, 0xFF	; 255
     c94:	08 95       	ret
     c96:	8f ef       	ldi	r24, 0xFF	; 255
     c98:	9f ef       	ldi	r25, 0xFF	; 255
     c9a:	08 95       	ret

00000c9c <_ZN14SoftwareSerial9availableEv>:
     c9c:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <_ZN14SoftwareSerial13active_objectE>
     ca0:	30 91 ee 04 	lds	r19, 0x04EE	; 0x8004ee <_ZN14SoftwareSerial13active_objectE+0x1>
     ca4:	28 17       	cp	r18, r24
     ca6:	39 07       	cpc	r19, r25
     ca8:	99 f4       	brne	.+38     	; 0xcd0 <_ZN14SoftwareSerial9availableEv+0x34>
     caa:	20 91 ec 03 	lds	r18, 0x03EC	; 0x8003ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     cae:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	33 95       	inc	r19
     cb6:	28 1b       	sub	r18, r24
     cb8:	31 09       	sbc	r19, r1
     cba:	30 78       	andi	r19, 0x80	; 128
     cbc:	33 23       	and	r19, r19
     cbe:	2c f4       	brge	.+10     	; 0xcca <_ZN14SoftwareSerial9availableEv+0x2e>
     cc0:	21 50       	subi	r18, 0x01	; 1
     cc2:	31 09       	sbc	r19, r1
     cc4:	3f 6f       	ori	r19, 0xFF	; 255
     cc6:	2f 5f       	subi	r18, 0xFF	; 255
     cc8:	3f 4f       	sbci	r19, 0xFF	; 255
     cca:	82 2f       	mov	r24, r18
     ccc:	93 2f       	mov	r25, r19
     cce:	08 95       	ret
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	08 95       	ret

00000cd6 <_ZN14SoftwareSerial5writeEh>:
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	ec 01       	movw	r28, r24
     cde:	4c 8d       	ldd	r20, Y+28	; 0x1c
     ce0:	5d 8d       	ldd	r21, Y+29	; 0x1d
     ce2:	41 15       	cp	r20, r1
     ce4:	51 05       	cpc	r21, r1
     ce6:	29 f4       	brne	.+10     	; 0xcf2 <_ZN14SoftwareSerial5writeEh+0x1c>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	9b 83       	std	Y+3, r25	; 0x03
     cee:	8a 83       	std	Y+2, r24	; 0x02
     cf0:	38 c0       	rjmp	.+112    	; 0xd62 <_ZN14SoftwareSerial5writeEh+0x8c>
     cf2:	a9 89       	ldd	r26, Y+17	; 0x11
     cf4:	ba 89       	ldd	r27, Y+18	; 0x12
     cf6:	88 89       	ldd	r24, Y+16	; 0x10
     cf8:	38 2f       	mov	r19, r24
     cfa:	30 95       	com	r19
     cfc:	1f b7       	in	r17, 0x3f	; 63
     cfe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d00:	79 2f       	mov	r23, r25
     d02:	72 70       	andi	r23, 0x02	; 2
     d04:	91 fd       	sbrc	r25, 1
     d06:	60 95       	com	r22
     d08:	f8 94       	cli
     d0a:	77 23       	and	r23, r23
     d0c:	21 f0       	breq	.+8      	; 0xd16 <_ZN14SoftwareSerial5writeEh+0x40>
     d0e:	9c 91       	ld	r25, X
     d10:	98 2b       	or	r25, r24
     d12:	9c 93       	st	X, r25
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <_ZN14SoftwareSerial5writeEh+0x46>
     d16:	9c 91       	ld	r25, X
     d18:	93 23       	and	r25, r19
     d1a:	9c 93       	st	X, r25
     d1c:	fa 01       	movw	r30, r20
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <_ZN14SoftwareSerial5writeEh+0x48>
     d22:	98 e0       	ldi	r25, 0x08	; 8
     d24:	60 ff       	sbrs	r22, 0
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <_ZN14SoftwareSerial5writeEh+0x5a>
     d28:	2c 91       	ld	r18, X
     d2a:	28 2b       	or	r18, r24
     d2c:	2c 93       	st	X, r18
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <_ZN14SoftwareSerial5writeEh+0x60>
     d30:	2c 91       	ld	r18, X
     d32:	23 23       	and	r18, r19
     d34:	2c 93       	st	X, r18
     d36:	fa 01       	movw	r30, r20
     d38:	31 97       	sbiw	r30, 0x01	; 1
     d3a:	f1 f7       	brne	.-4      	; 0xd38 <_ZN14SoftwareSerial5writeEh+0x62>
     d3c:	66 95       	lsr	r22
     d3e:	91 50       	subi	r25, 0x01	; 1
     d40:	89 f7       	brne	.-30     	; 0xd24 <_ZN14SoftwareSerial5writeEh+0x4e>
     d42:	77 23       	and	r23, r23
     d44:	21 f0       	breq	.+8      	; 0xd4e <_ZN14SoftwareSerial5writeEh+0x78>
     d46:	8c 91       	ld	r24, X
     d48:	38 23       	and	r19, r24
     d4a:	3c 93       	st	X, r19
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <_ZN14SoftwareSerial5writeEh+0x7e>
     d4e:	9c 91       	ld	r25, X
     d50:	89 2b       	or	r24, r25
     d52:	8c 93       	st	X, r24
     d54:	1f bf       	out	0x3f, r17	; 63
     d56:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d58:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d5a:	01 97       	sbiw	r24, 0x01	; 1
     d5c:	f1 f7       	brne	.-4      	; 0xd5a <_ZN14SoftwareSerial5writeEh+0x84>
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	ca 01       	movw	r24, r20
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	08 95       	ret

00000d6c <_ZN14SoftwareSerial5flushEv>:
     d6c:	08 95       	ret

00000d6e <_ZN14SoftwareSerial4peekEv>:
     d6e:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <_ZN14SoftwareSerial13active_objectE>
     d72:	30 91 ee 04 	lds	r19, 0x04EE	; 0x8004ee <_ZN14SoftwareSerial13active_objectE+0x1>
     d76:	28 17       	cp	r18, r24
     d78:	39 07       	cpc	r19, r25
     d7a:	71 f4       	brne	.+28     	; 0xd98 <_ZN14SoftwareSerial4peekEv+0x2a>
     d7c:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     d80:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     d84:	98 17       	cp	r25, r24
     d86:	59 f0       	breq	.+22     	; 0xd9e <_ZN14SoftwareSerial4peekEv+0x30>
     d88:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	e3 51       	subi	r30, 0x13	; 19
     d90:	fc 4f       	sbci	r31, 0xFC	; 252
     d92:	80 81       	ld	r24, Z
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	08 95       	ret
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
     d9c:	08 95       	ret
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	9f ef       	ldi	r25, 0xFF	; 255
     da2:	08 95       	ret

00000da4 <_ZN14SoftwareSerial13stopListeningEv>:
     da4:	e0 91 ed 04 	lds	r30, 0x04ED	; 0x8004ed <_ZN14SoftwareSerial13active_objectE>
     da8:	f0 91 ee 04 	lds	r31, 0x04EE	; 0x8004ee <_ZN14SoftwareSerial13active_objectE+0x1>
     dac:	e8 17       	cp	r30, r24
     dae:	f9 07       	cpc	r31, r25
     db0:	69 f4       	brne	.+26     	; 0xdcc <_ZN14SoftwareSerial13stopListeningEv+0x28>
     db2:	a3 89       	ldd	r26, Z+19	; 0x13
     db4:	b4 89       	ldd	r27, Z+20	; 0x14
     db6:	9c 91       	ld	r25, X
     db8:	85 89       	ldd	r24, Z+21	; 0x15
     dba:	80 95       	com	r24
     dbc:	89 23       	and	r24, r25
     dbe:	8c 93       	st	X, r24
     dc0:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <_ZN14SoftwareSerial13active_objectE+0x1>
     dc4:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <_ZN14SoftwareSerial13active_objectE>
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	08 95       	ret
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	08 95       	ret

00000dd0 <_ZN14SoftwareSerial6listenEv>:
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	ec 01       	movw	r28, r24
     dd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     dda:	89 2b       	or	r24, r25
     ddc:	f1 f0       	breq	.+60     	; 0xe1a <_ZN14SoftwareSerial6listenEv+0x4a>
     dde:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <_ZN14SoftwareSerial13active_objectE>
     de2:	90 91 ee 04 	lds	r25, 0x04EE	; 0x8004ee <_ZN14SoftwareSerial13active_objectE+0x1>
     de6:	c8 17       	cp	r28, r24
     de8:	d9 07       	cpc	r29, r25
     dea:	c9 f0       	breq	.+50     	; 0xe1e <_ZN14SoftwareSerial6listenEv+0x4e>
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	11 f0       	breq	.+4      	; 0xdf4 <_ZN14SoftwareSerial6listenEv+0x24>
     df0:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN14SoftwareSerial13stopListeningEv>
     df4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     df6:	8e 7f       	andi	r24, 0xFE	; 254
     df8:	8e 8f       	std	Y+30, r24	; 0x1e
     dfa:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     dfe:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     e02:	d0 93 ee 04 	sts	0x04EE, r29	; 0x8004ee <_ZN14SoftwareSerial13active_objectE+0x1>
     e06:	c0 93 ed 04 	sts	0x04ED, r28	; 0x8004ed <_ZN14SoftwareSerial13active_objectE>
     e0a:	eb 89       	ldd	r30, Y+19	; 0x13
     e0c:	fc 89       	ldd	r31, Y+20	; 0x14
     e0e:	90 81       	ld	r25, Z
     e10:	8d 89       	ldd	r24, Y+21	; 0x15
     e12:	89 2b       	or	r24, r25
     e14:	80 83       	st	Z, r24
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <_ZN14SoftwareSerial6listenEv+0x50>
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <_ZN14SoftwareSerial6listenEv+0x50>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <__vector_3>:
     e26:	1f 92       	push	r1
     e28:	0f 92       	push	r0
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	0f 92       	push	r0
     e2e:	11 24       	eor	r1, r1
     e30:	2f 93       	push	r18
     e32:	3f 93       	push	r19
     e34:	4f 93       	push	r20
     e36:	5f 93       	push	r21
     e38:	6f 93       	push	r22
     e3a:	7f 93       	push	r23
     e3c:	8f 93       	push	r24
     e3e:	9f 93       	push	r25
     e40:	af 93       	push	r26
     e42:	bf 93       	push	r27
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	ef 93       	push	r30
     e4a:	ff 93       	push	r31
     e4c:	a0 91 ed 04 	lds	r26, 0x04ED	; 0x8004ed <_ZN14SoftwareSerial13active_objectE>
     e50:	b0 91 ee 04 	lds	r27, 0x04EE	; 0x8004ee <_ZN14SoftwareSerial13active_objectE+0x1>
     e54:	10 97       	sbiw	r26, 0x00	; 0
     e56:	09 f4       	brne	.+2      	; 0xe5a <__vector_3+0x34>
     e58:	78 c0       	rjmp	.+240    	; 0xf4a <__vector_3+0x124>
     e5a:	5e 96       	adiw	r26, 0x1e	; 30
     e5c:	8c 91       	ld	r24, X
     e5e:	5e 97       	sbiw	r26, 0x1e	; 30
     e60:	81 ff       	sbrs	r24, 1
     e62:	0d c0       	rjmp	.+26     	; 0xe7e <__vector_3+0x58>
     e64:	1e 96       	adiw	r26, 0x0e	; 14
     e66:	ed 91       	ld	r30, X+
     e68:	fc 91       	ld	r31, X
     e6a:	1f 97       	sbiw	r26, 0x0f	; 15
     e6c:	90 81       	ld	r25, Z
     e6e:	1d 96       	adiw	r26, 0x0d	; 13
     e70:	8c 91       	ld	r24, X
     e72:	1d 97       	sbiw	r26, 0x0d	; 13
     e74:	98 23       	and	r25, r24
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	71 f4       	brne	.+28     	; 0xe96 <__vector_3+0x70>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0c c0       	rjmp	.+24     	; 0xe96 <__vector_3+0x70>
     e7e:	1e 96       	adiw	r26, 0x0e	; 14
     e80:	ed 91       	ld	r30, X+
     e82:	fc 91       	ld	r31, X
     e84:	1f 97       	sbiw	r26, 0x0f	; 15
     e86:	90 81       	ld	r25, Z
     e88:	1d 96       	adiw	r26, 0x0d	; 13
     e8a:	8c 91       	ld	r24, X
     e8c:	1d 97       	sbiw	r26, 0x0d	; 13
     e8e:	98 23       	and	r25, r24
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	09 f0       	breq	.+2      	; 0xe96 <__vector_3+0x70>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	88 23       	and	r24, r24
     e98:	09 f4       	brne	.+2      	; 0xe9c <__vector_3+0x76>
     e9a:	57 c0       	rjmp	.+174    	; 0xf4a <__vector_3+0x124>
     e9c:	53 96       	adiw	r26, 0x13	; 19
     e9e:	ed 91       	ld	r30, X+
     ea0:	fc 91       	ld	r31, X
     ea2:	54 97       	sbiw	r26, 0x14	; 20
     ea4:	90 81       	ld	r25, Z
     ea6:	55 96       	adiw	r26, 0x15	; 21
     ea8:	8c 91       	ld	r24, X
     eaa:	55 97       	sbiw	r26, 0x15	; 21
     eac:	80 95       	com	r24
     eae:	89 23       	and	r24, r25
     eb0:	80 83       	st	Z, r24
     eb2:	56 96       	adiw	r26, 0x16	; 22
     eb4:	8d 91       	ld	r24, X+
     eb6:	9c 91       	ld	r25, X
     eb8:	57 97       	sbiw	r26, 0x17	; 23
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <__vector_3+0x94>
     ebe:	58 96       	adiw	r26, 0x18	; 24
     ec0:	6d 91       	ld	r22, X+
     ec2:	7c 91       	ld	r23, X
     ec4:	59 97       	sbiw	r26, 0x19	; 25
     ec6:	1e 96       	adiw	r26, 0x0e	; 14
     ec8:	cd 91       	ld	r28, X+
     eca:	dc 91       	ld	r29, X
     ecc:	1f 97       	sbiw	r26, 0x0f	; 15
     ece:	1d 96       	adiw	r26, 0x0d	; 13
     ed0:	5c 91       	ld	r21, X
     ed2:	1d 97       	sbiw	r26, 0x0d	; 13
     ed4:	38 e0       	ldi	r19, 0x08	; 8
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	fb 01       	movw	r30, r22
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	f1 f7       	brne	.-4      	; 0xeda <__vector_3+0xb4>
     ede:	84 2f       	mov	r24, r20
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	95 95       	asr	r25
     ee4:	87 95       	ror	r24
     ee6:	48 2f       	mov	r20, r24
     ee8:	28 81       	ld	r18, Y
     eea:	25 23       	and	r18, r21
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_3+0xca>
     eee:	40 68       	ori	r20, 0x80	; 128
     ef0:	31 50       	subi	r19, 0x01	; 1
     ef2:	91 f7       	brne	.-28     	; 0xed8 <__vector_3+0xb2>
     ef4:	5e 96       	adiw	r26, 0x1e	; 30
     ef6:	8c 91       	ld	r24, X
     ef8:	5e 97       	sbiw	r26, 0x1e	; 30
     efa:	81 fd       	sbrc	r24, 1
     efc:	40 95       	com	r20
     efe:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f02:	8f 5f       	subi	r24, 0xFF	; 255
     f04:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <_ZN14SoftwareSerial20_receive_buffer_headE>
     f08:	28 17       	cp	r18, r24
     f0a:	49 f0       	breq	.+18     	; 0xf1e <__vector_3+0xf8>
     f0c:	e0 91 ec 03 	lds	r30, 0x03EC	; 0x8003ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	e3 51       	subi	r30, 0x13	; 19
     f14:	fc 4f       	sbci	r31, 0xFC	; 252
     f16:	40 83       	st	Z, r20
     f18:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <_ZN14SoftwareSerial20_receive_buffer_tailE>
     f1c:	07 c0       	rjmp	.+14     	; 0xf2c <__vector_3+0x106>
     f1e:	5e 96       	adiw	r26, 0x1e	; 30
     f20:	8c 91       	ld	r24, X
     f22:	5e 97       	sbiw	r26, 0x1e	; 30
     f24:	81 60       	ori	r24, 0x01	; 1
     f26:	5e 96       	adiw	r26, 0x1e	; 30
     f28:	8c 93       	st	X, r24
     f2a:	5e 97       	sbiw	r26, 0x1e	; 30
     f2c:	5a 96       	adiw	r26, 0x1a	; 26
     f2e:	8d 91       	ld	r24, X+
     f30:	9c 91       	ld	r25, X
     f32:	5b 97       	sbiw	r26, 0x1b	; 27
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <__vector_3+0x10e>
     f38:	53 96       	adiw	r26, 0x13	; 19
     f3a:	ed 91       	ld	r30, X+
     f3c:	fc 91       	ld	r31, X
     f3e:	54 97       	sbiw	r26, 0x14	; 20
     f40:	90 81       	ld	r25, Z
     f42:	55 96       	adiw	r26, 0x15	; 21
     f44:	8c 91       	ld	r24, X
     f46:	89 2b       	or	r24, r25
     f48:	80 83       	st	Z, r24
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	bf 91       	pop	r27
     f54:	af 91       	pop	r26
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	7f 91       	pop	r23
     f5c:	6f 91       	pop	r22
     f5e:	5f 91       	pop	r21
     f60:	4f 91       	pop	r20
     f62:	3f 91       	pop	r19
     f64:	2f 91       	pop	r18
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <_ZN14SoftwareSerial5setTXEh>:
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	16 2f       	mov	r17, r22
     f7a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f7c:	66 95       	lsr	r22
     f7e:	61 70       	andi	r22, 0x01	; 1
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	68 27       	eor	r22, r24
     f84:	81 2f       	mov	r24, r17
     f86:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	81 2f       	mov	r24, r17
     f8e:	0e 94 be 05 	call	0xb7c	; 0xb7c <pinMode>
     f92:	81 2f       	mov	r24, r17
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	fc 01       	movw	r30, r24
     f98:	e3 58       	subi	r30, 0x83	; 131
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	e4 91       	lpm	r30, Z
     f9e:	e8 8b       	std	Y+16, r30	; 0x10
     fa0:	fc 01       	movw	r30, r24
     fa2:	ef 56       	subi	r30, 0x6F	; 111
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	e4 91       	lpm	r30, Z
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	e1 55       	subi	r30, 0x51	; 81
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	85 91       	lpm	r24, Z+
     fb4:	94 91       	lpm	r25, Z
     fb6:	9a 8b       	std	Y+18, r25	; 0x12
     fb8:	89 8b       	std	Y+17, r24	; 0x11
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	08 95       	ret

00000fc2 <_ZN14SoftwareSerial5setRXEh>:
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	ec 01       	movw	r28, r24
     fca:	16 2f       	mov	r17, r22
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	81 2f       	mov	r24, r17
     fd0:	0e 94 be 05 	call	0xb7c	; 0xb7c <pinMode>
     fd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fd6:	81 fd       	sbrc	r24, 1
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <_ZN14SoftwareSerial5setRXEh+0x20>
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	81 2f       	mov	r24, r17
     fde:	0e 94 fd 05 	call	0xbfa	; 0xbfa <digitalWrite>
     fe2:	1c 87       	std	Y+12, r17	; 0x0c
     fe4:	61 2f       	mov	r22, r17
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	fb 01       	movw	r30, r22
     fea:	e3 58       	subi	r30, 0x83	; 131
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	e4 91       	lpm	r30, Z
     ff0:	ed 87       	std	Y+13, r30	; 0x0d
     ff2:	fb 01       	movw	r30, r22
     ff4:	ef 56       	subi	r30, 0x6F	; 111
     ff6:	ff 4f       	sbci	r31, 0xFF	; 255
     ff8:	e4 91       	lpm	r30, Z
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	ee 0f       	add	r30, r30
     ffe:	ff 1f       	adc	r31, r31
    1000:	eb 55       	subi	r30, 0x5B	; 91
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	85 91       	lpm	r24, Z+
    1006:	94 91       	lpm	r25, Z
    1008:	9f 87       	std	Y+15, r25	; 0x0f
    100a:	8e 87       	std	Y+14, r24	; 0x0e
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	08 95       	ret

00001014 <_ZN14SoftwareSerialC1Ehhb>:
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	ec 01       	movw	r28, r24
    101c:	16 2f       	mov	r17, r22
    101e:	1b 82       	std	Y+3, r1	; 0x03
    1020:	1a 82       	std	Y+2, r1	; 0x02
    1022:	88 ee       	ldi	r24, 0xE8	; 232
    1024:	93 e0       	ldi	r25, 0x03	; 3
    1026:	a0 e0       	ldi	r26, 0x00	; 0
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	8c 83       	std	Y+4, r24	; 0x04
    102c:	9d 83       	std	Y+5, r25	; 0x05
    102e:	ae 83       	std	Y+6, r26	; 0x06
    1030:	bf 83       	std	Y+7, r27	; 0x07
    1032:	86 e3       	ldi	r24, 0x36	; 54
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	99 83       	std	Y+1, r25	; 0x01
    1038:	88 83       	st	Y, r24
    103a:	1f 8a       	std	Y+23, r1	; 0x17
    103c:	1e 8a       	std	Y+22, r1	; 0x16
    103e:	19 8e       	std	Y+25, r1	; 0x19
    1040:	18 8e       	std	Y+24, r1	; 0x18
    1042:	1b 8e       	std	Y+27, r1	; 0x1b
    1044:	1a 8e       	std	Y+26, r1	; 0x1a
    1046:	1d 8e       	std	Y+29, r1	; 0x1d
    1048:	1c 8e       	std	Y+28, r1	; 0x1c
    104a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    104c:	8e 7f       	andi	r24, 0xFE	; 254
    104e:	20 fb       	bst	r18, 0
    1050:	81 f9       	bld	r24, 1
    1052:	8e 8f       	std	Y+30, r24	; 0x1e
    1054:	64 2f       	mov	r22, r20
    1056:	ce 01       	movw	r24, r28
    1058:	0e 94 b8 07 	call	0xf70	; 0xf70 <_ZN14SoftwareSerial5setTXEh>
    105c:	61 2f       	mov	r22, r17
    105e:	ce 01       	movw	r24, r28
    1060:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <_ZN14SoftwareSerial5setRXEh>
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	08 95       	ret

0000106c <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	ec 01       	movw	r28, r24
    1072:	9a 01       	movw	r18, r20
    1074:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    1076:	1b 8e       	std	Y+27, r1	; 0x1b
    1078:	1a 8e       	std	Y+26, r1	; 0x1a
    107a:	19 8e       	std	Y+25, r1	; 0x19
    107c:	18 8e       	std	Y+24, r1	; 0x18
    107e:	1f 8a       	std	Y+23, r1	; 0x17
    1080:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	79 e0       	ldi	r23, 0x09	; 9
    1086:	8d e3       	ldi	r24, 0x3D	; 61
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__udivmodsi4>
    108e:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    1090:	24 30       	cpi	r18, 0x04	; 4
    1092:	31 05       	cpc	r19, r1
    1094:	18 f0       	brcs	.+6      	; 0x109c <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
    1096:	c9 01       	movw	r24, r18
    1098:	03 97       	sbiw	r24, 0x03	; 3
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
    10a0:	9d 8f       	std	Y+29, r25	; 0x1d
    10a2:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR(_receivePin)) {
    10a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    10a6:	86 31       	cpi	r24, 0x16	; 22
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <_ZN14SoftwareSerial5beginEl+0x40>
    10aa:	41 c0       	rjmp	.+130    	; 0x112e <_ZN14SoftwareSerial5beginEl+0xc2>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    10ac:	b9 01       	movw	r22, r18
    10ae:	76 95       	lsr	r23
    10b0:	67 95       	ror	r22
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    10b2:	64 31       	cpi	r22, 0x14	; 20
    10b4:	71 05       	cpc	r23, r1
    10b6:	18 f0       	brcs	.+6      	; 0x10be <_ZN14SoftwareSerial5beginEl+0x52>
    return num - sub;
    10b8:	63 51       	subi	r22, 0x13	; 19
    10ba:	71 09       	sbc	r23, r1
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <_ZN14SoftwareSerial5beginEl+0x56>
  else
    return 1;
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
    10c2:	7f 8b       	std	Y+23, r23	; 0x17
    10c4:	6e 8b       	std	Y+22, r22	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    10c6:	36 97       	sbiw	r30, 0x06	; 6
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <_ZN14SoftwareSerial5beginEl+0x66>
    return num - sub;
    10ca:	b9 01       	movw	r22, r18
    10cc:	65 50       	subi	r22, 0x05	; 5
    10ce:	71 09       	sbc	r23, r1
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <_ZN14SoftwareSerial5beginEl+0x6a>
  else
    return 1;
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
    10d6:	79 8f       	std	Y+25, r23	; 0x19
    10d8:	68 8f       	std	Y+24, r22	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    10da:	b9 01       	movw	r22, r18
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	26 0f       	add	r18, r22
    10e2:	37 1f       	adc	r19, r23
    10e4:	36 95       	lsr	r19
    10e6:	27 95       	ror	r18
    10e8:	36 95       	lsr	r19
    10ea:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    10ec:	2d 30       	cpi	r18, 0x0D	; 13
    10ee:	31 05       	cpc	r19, r1
    10f0:	10 f1       	brcs	.+68     	; 0x1136 <_ZN14SoftwareSerial5beginEl+0xca>
    return num - sub;
    10f2:	2c 50       	subi	r18, 0x0C	; 12
    10f4:	31 09       	sbc	r19, r1
    10f6:	21 c0       	rjmp	.+66     	; 0x113a <_ZN14SoftwareSerial5beginEl+0xce>


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    10f8:	21 e0       	ldi	r18, 0x01	; 1
    10fa:	8e 30       	cpi	r24, 0x0E	; 14
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <_ZN14SoftwareSerial5beginEl+0x94>
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <_ZN14SoftwareSerial5beginEl+0x9a>
    1104:	88 0f       	add	r24, r24
    1106:	2a 95       	dec	r18
    1108:	ea f7       	brpl	.-6      	; 0x1104 <_ZN14SoftwareSerial5beginEl+0x98>
    110a:	98 2b       	or	r25, r24
    110c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1110:	9c 85       	ldd	r25, Y+12	; 0x0c
    1112:	98 30       	cpi	r25, 0x08	; 8
    1114:	d0 f0       	brcs	.+52     	; 0x114a <_ZN14SoftwareSerial5beginEl+0xde>
    1116:	9e 30       	cpi	r25, 0x0E	; 14
    1118:	10 f1       	brcs	.+68     	; 0x115e <_ZN14SoftwareSerial5beginEl+0xf2>
    111a:	96 31       	cpi	r25, 0x16	; 22
    111c:	58 f1       	brcs	.+86     	; 0x1174 <_ZN14SoftwareSerial5beginEl+0x108>
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	2a c0       	rjmp	.+84     	; 0x1178 <_ZN14SoftwareSerial5beginEl+0x10c>
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1124:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1126:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1128:	9d 8d       	ldd	r25, Y+29	; 0x1d
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <_ZN14SoftwareSerial5beginEl+0xbe>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN14SoftwareSerial6listenEv>
}
    1134:	2a c0       	rjmp	.+84     	; 0x118a <_ZN14SoftwareSerial5beginEl+0x11e>

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
    113a:	3b 8f       	std	Y+27, r19	; 0x1b
    113c:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    113e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	c8 f6       	brcc	.-78     	; 0x10f8 <_ZN14SoftwareSerial5beginEl+0x8c>
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	e0 cf       	rjmp	.-64     	; 0x110a <_ZN14SoftwareSerial5beginEl+0x9e>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    114a:	2d e6       	ldi	r18, 0x6D	; 109
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3c 8b       	std	Y+20, r19	; 0x14
    1150:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <_ZN14SoftwareSerial5beginEl+0xec>
    1156:	88 0f       	add	r24, r24
    1158:	9a 95       	dec	r25
    115a:	ea f7       	brpl	.-6      	; 0x1156 <_ZN14SoftwareSerial5beginEl+0xea>
    115c:	e3 cf       	rjmp	.-58     	; 0x1124 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    115e:	2b e6       	ldi	r18, 0x6B	; 107
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3c 8b       	std	Y+20, r19	; 0x14
    1164:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    1166:	98 50       	subi	r25, 0x08	; 8
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	01 c0       	rjmp	.+2      	; 0x116e <_ZN14SoftwareSerial5beginEl+0x102>
    116c:	88 0f       	add	r24, r24
    116e:	9a 95       	dec	r25
    1170:	ea f7       	brpl	.-6      	; 0x116c <_ZN14SoftwareSerial5beginEl+0x100>
    1172:	d8 cf       	rjmp	.-80     	; 0x1124 <_ZN14SoftwareSerial5beginEl+0xb8>
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
    1174:	2c e6       	ldi	r18, 0x6C	; 108
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	3c 8b       	std	Y+20, r19	; 0x14
    117a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
    117c:	9e 50       	subi	r25, 0x0E	; 14
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <_ZN14SoftwareSerial5beginEl+0x118>
    1182:	88 0f       	add	r24, r24
    1184:	9a 95       	dec	r25
    1186:	ea f7       	brpl	.-6      	; 0x1182 <_ZN14SoftwareSerial5beginEl+0x116>
    1188:	cd cf       	rjmp	.-102    	; 0x1124 <_ZN14SoftwareSerial5beginEl+0xb8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <_ZN25AuthorizationHandlerClassC1EP21GsmCommunicationClass>:
{
	GsmCommunication = NewCommunication;
} //AuthorizationHandlerClass

// default destructor
AuthorizationHandlerClass::~AuthorizationHandlerClass()
    1190:	fc 01       	movw	r30, r24
    1192:	71 83       	std	Z+1, r23	; 0x01
    1194:	60 83       	st	Z, r22
    1196:	08 95       	ret

00001198 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_>:
			Serial.write("Number DECLINED \n\n");
		}
	}
}

int AuthorizationHandlerClass::checkAuthorization(char *nrToCheck, ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass *ContactDirectoryPermanent){
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	ca 01       	movw	r24, r20
    119e:	e9 01       	movw	r28, r18
	
	ContactDirectoryTemporary->showContactList();
    11a0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN21ContactDirectoryClass15showContactListEv>
	ContactDirectoryPermanent->showContactList();
    11a4:	ce 01       	movw	r24, r28
    11a6:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN21ContactDirectoryClass15showContactListEv>
			currentContact = currentContact->next;	// rearch in next contact in the list
		}	
		currentContact = ContactDirectoryPermanent->head;
	}
	return(0);		// return 0 if no matching phone number was detected
}
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <_ZN25AuthorizationHandlerClass10answerCallEv>:

void AuthorizationHandlerClass::answerCall(){
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	ec 01       	movw	r28, r24
	
	// hang up incoming Call
	GsmCommunication->sendAtCmd("ATA");
    11ba:	64 e4       	ldi	r22, 0x44	; 68
    11bc:	71 e0       	ldi	r23, 0x01	; 1
    11be:	88 81       	ld	r24, Y
    11c0:	99 81       	ldd	r25, Y+1	; 0x01
    11c2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <_ZN21GsmCommunicationClass9sendAtCmdEPc>
	GsmCommunication->readSerial();
    11c6:	88 81       	ld	r24, Y
    11c8:	99 81       	ldd	r25, Y+1	; 0x01
    11ca:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN21GsmCommunicationClass10readSerialEv>
	GsmCommunication->sendAtCmd("AT+CVHU=0");
    11ce:	68 e4       	ldi	r22, 0x48	; 72
    11d0:	71 e0       	ldi	r23, 0x01	; 1
    11d2:	88 81       	ld	r24, Y
    11d4:	99 81       	ldd	r25, Y+1	; 0x01
    11d6:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <_ZN21GsmCommunicationClass9sendAtCmdEPc>
	GsmCommunication->readSerial();
    11da:	88 81       	ld	r24, Y
    11dc:	99 81       	ldd	r25, Y+1	; 0x01
    11de:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN21GsmCommunicationClass10readSerialEv>
	GsmCommunication->sendAtCmd("ATH");
    11e2:	62 e5       	ldi	r22, 0x52	; 82
    11e4:	71 e0       	ldi	r23, 0x01	; 1
    11e6:	88 81       	ld	r24, Y
    11e8:	99 81       	ldd	r25, Y+1	; 0x01
    11ea:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <_ZN21GsmCommunicationClass9sendAtCmdEPc>
	GsmCommunication->readSerial();
    11ee:	88 81       	ld	r24, Y
    11f0:	99 81       	ldd	r25, Y+1	; 0x01
    11f2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN21GsmCommunicationClass10readSerialEv>
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_>:
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/

void AuthorizationHandlerClass::handleReceivedCall(ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass *ContactDirectoryPermanent){
    11fc:	cf 92       	push	r12
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	ec 01       	movw	r28, r24
    120e:	6b 01       	movw	r12, r22
    1210:	7a 01       	movw	r14, r20
	
	if(strstr(GsmCommunication->receiveBuffer, "RING") != NULL){ // if call received
    1212:	08 81       	ld	r16, Y
    1214:	19 81       	ldd	r17, Y+1	; 0x01
    1216:	66 e5       	ldi	r22, 0x56	; 86
    1218:	71 e0       	ldi	r23, 0x01	; 1
    121a:	c8 01       	movw	r24, r16
    121c:	04 96       	adiw	r24, 0x04	; 4
    121e:	0e 94 2e 11 	call	0x225c	; 0x225c <strstr>
    1222:	89 2b       	or	r24, r25
    1224:	01 f1       	breq	.+64     	; 0x1266 <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_+0x6a>
		
		// check phone Number from caller
		GsmCommunication->sendAtCmd((char*)"AT+CLCC");	
    1226:	6b e5       	ldi	r22, 0x5B	; 91
    1228:	71 e0       	ldi	r23, 0x01	; 1
    122a:	c8 01       	movw	r24, r16
    122c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <_ZN21GsmCommunicationClass9sendAtCmdEPc>
		GsmCommunication->readSerial();
    1230:	88 81       	ld	r24, Y
    1232:	99 81       	ldd	r25, Y+1	; 0x01
    1234:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN21GsmCommunicationClass10readSerialEv>
	}
}

int AuthorizationHandlerClass::checkAuthorization(char *nrToCheck, ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass *ContactDirectoryPermanent){
	
	ContactDirectoryTemporary->showContactList();
    1238:	c6 01       	movw	r24, r12
    123a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN21ContactDirectoryClass15showContactListEv>
	ContactDirectoryPermanent->showContactList();
    123e:	c7 01       	movw	r24, r14
    1240:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN21ContactDirectoryClass15showContactListEv>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    1244:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    1248:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    124c:	02 80       	ldd	r0, Z+2	; 0x02
    124e:	f3 81       	ldd	r31, Z+3	; 0x03
    1250:	e0 2d       	mov	r30, r0
    1252:	41 e2       	ldi	r20, 0x21	; 33
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	63 e6       	ldi	r22, 0x63	; 99
    1258:	71 e0       	ldi	r23, 0x01	; 1
    125a:	88 e3       	ldi	r24, 0x38	; 56
    125c:	93 e0       	ldi	r25, 0x03	; 3
    125e:	09 95       	icall
		
		
		
		if(checkAuthorization((char*)&GsmCommunication->receiveBuffer,ContactDirectoryTemporary,ContactDirectoryPermanent) == 1){	// if Nr of caller is authorized
			Serial.write("Number authorized -> OPEN LOCK \n\n");
			answerCall();		
    1260:	ce 01       	movw	r24, r28
    1262:	0e 94 da 08 	call	0x11b4	; 0x11b4 <_ZN25AuthorizationHandlerClass10answerCallEv>
			// open lock
		}else{
			Serial.write("Number DECLINED \n\n");
		}
	}
}
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	df 90       	pop	r13
    1274:	cf 90       	pop	r12
    1276:	08 95       	ret

00001278 <_ZN15CmdContactClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>:
CmdContactClass::CmdContactClass(GsmCommunicationClass *NewGsmCommunication, AuthorizationHandlerClass *NewAuthorizationHandler) :SmsHandlerClass(NewGsmCommunication,NewAuthorizationHandler)
{
} //CmdContactClass

// default destructor
CmdContactClass::~CmdContactClass()
    1278:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>
    127c:	08 95       	ret

0000127e <_ZN15CmdContactClass12removePrefixEPcS0_>:
	}
}

void CmdContactClass::removePrefix(char *phoneNumber, char *smsMsg){

    int stringLength = strlen(smsMsg)-2; // string length 2 more
    127e:	da 01       	movw	r26, r20
    1280:	0d 90       	ld	r0, X+
    1282:	00 20       	and	r0, r0
    1284:	e9 f7       	brne	.-6      	; 0x1280 <_ZN15CmdContactClass12removePrefixEPcS0_+0x2>
    1286:	11 97       	sbiw	r26, 0x01	; 1
    1288:	a4 1b       	sub	r26, r20
    128a:	b5 0b       	sbc	r27, r21
    //Serial.println(stringLength);		// for debugging

    // remove prefix
    if(stringLength>9){
    128c:	cd 01       	movw	r24, r26
    128e:	02 97       	sbiw	r24, 0x02	; 2
    1290:	0a 97       	sbiw	r24, 0x0a	; 10
    1292:	6c f0       	brlt	.+26     	; 0x12ae <_ZN15CmdContactClass12removePrefixEPcS0_+0x30>
    1294:	1b 97       	sbiw	r26, 0x0b	; 11
    1296:	fa 01       	movw	r30, r20
    1298:	ea 0f       	add	r30, r26
    129a:	fb 1f       	adc	r31, r27
    129c:	db 01       	movw	r26, r22
    129e:	9b 01       	movw	r18, r22
    12a0:	27 5f       	subi	r18, 0xF7	; 247
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
        for(int u=0; u<9; u++){
            phoneNumber[u] = smsMsg[u+(stringLength-9)];
    12a4:	81 91       	ld	r24, Z+
    12a6:	8d 93       	st	X+, r24
    int stringLength = strlen(smsMsg)-2; // string length 2 more
    //Serial.println(stringLength);		// for debugging

    // remove prefix
    if(stringLength>9){
        for(int u=0; u<9; u++){
    12a8:	a2 17       	cp	r26, r18
    12aa:	b3 07       	cpc	r27, r19
    12ac:	d9 f7       	brne	.-10     	; 0x12a4 <_ZN15CmdContactClass12removePrefixEPcS0_+0x26>
            phoneNumber[u] = smsMsg[u+(stringLength-9)];
        }
    }
	phoneNumber[9] = '\0';
    12ae:	fb 01       	movw	r30, r22
    12b0:	11 86       	std	Z+9, r1	; 0x09
    12b2:	08 95       	ret

000012b4 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_>:
/*  Author      : Michael Streit                                             */
/*                                                                           */
/*  History     : 31.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void CmdContactClass::executeSmsCmd(ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass *ContactDirectoryPermanent){
    12b4:	8f 92       	push	r8
    12b6:	9f 92       	push	r9
    12b8:	af 92       	push	r10
    12ba:	bf 92       	push	r11
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	ec 97       	sbiw	r28, 0x3c	; 60
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
	
	if(newSmsReceived == true){
    12dc:	fc 01       	movw	r30, r24
    12de:	ec 5f       	subi	r30, 0xFC	; 252
    12e0:	fe 4f       	sbci	r31, 0xFE	; 254
    12e2:	20 81       	ld	r18, Z
    12e4:	22 23       	and	r18, r18
    12e6:	09 f4       	brne	.+2      	; 0x12ea <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x36>
    12e8:	6b c0       	rjmp	.+214    	; 0x13c0 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x10c>
    12ea:	7a 01       	movw	r14, r20
    12ec:	6b 01       	movw	r12, r22
		char newPhoneNumber[10] = {0};
    12ee:	8e 01       	movw	r16, r28
    12f0:	0d 5c       	subi	r16, 0xCD	; 205
    12f2:	1f 4f       	sbci	r17, 0xFF	; 255
    12f4:	2a e0       	ldi	r18, 0x0A	; 10
    12f6:	d8 01       	movw	r26, r16
    12f8:	1d 92       	st	X+, r1
    12fa:	2a 95       	dec	r18
    12fc:	e9 f7       	brne	.-6      	; 0x12f8 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x44>
		char newName[NAME_SIZE] = {0};
    12fe:	de 01       	movw	r26, r28
    1300:	11 96       	adiw	r26, 0x01	; 1
    1302:	22 e3       	ldi	r18, 0x32	; 50
    1304:	fd 01       	movw	r30, r26
    1306:	11 92       	st	Z+, r1
    1308:	2a 95       	dec	r18
    130a:	e9 f7       	brne	.-6      	; 0x1306 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x52>
			
		strcpy(newName,"Unknown");
    130c:	28 e0       	ldi	r18, 0x08	; 8
    130e:	e5 e8       	ldi	r30, 0x85	; 133
    1310:	f1 e0       	ldi	r31, 0x01	; 1
    1312:	01 90       	ld	r0, Z+
    1314:	0d 92       	st	X+, r0
    1316:	2a 95       	dec	r18
    1318:	e1 f7       	brne	.-8      	; 0x1312 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x5e>
		removePrefix((char*)&newPhoneNumber,(char*)&smsMsg);
    131a:	5c 01       	movw	r10, r24
    131c:	f4 e0       	ldi	r31, 0x04	; 4
    131e:	af 0e       	add	r10, r31
    1320:	b1 1c       	adc	r11, r1
    1322:	a5 01       	movw	r20, r10
    1324:	b8 01       	movw	r22, r16
    1326:	0e 94 3f 09 	call	0x127e	; 0x127e <_ZN15CmdContactClass12removePrefixEPcS0_>
    132a:	0f 2e       	mov	r0, r31
    132c:	f8 e3       	ldi	r31, 0x38	; 56
    132e:	8f 2e       	mov	r8, r31
    1330:	f3 e0       	ldi	r31, 0x03	; 3
    1332:	9f 2e       	mov	r9, r31
    1334:	f0 2d       	mov	r31, r0
    1336:	d4 01       	movw	r26, r8
    1338:	ed 91       	ld	r30, X+
    133a:	fc 91       	ld	r31, X
    133c:	02 80       	ldd	r0, Z+2	; 0x02
    133e:	f3 81       	ldd	r31, Z+3	; 0x03
    1340:	e0 2d       	mov	r30, r0
    1342:	41 e1       	ldi	r20, 0x11	; 17
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	6d e8       	ldi	r22, 0x8D	; 141
    1348:	71 e0       	ldi	r23, 0x01	; 1
    134a:	c4 01       	movw	r24, r8
    134c:	09 95       	icall
    134e:	f8 01       	movw	r30, r16
    1350:	01 90       	ld	r0, Z+
    1352:	00 20       	and	r0, r0
    1354:	e9 f7       	brne	.-6      	; 0x1350 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x9c>
    1356:	31 97       	sbiw	r30, 0x01	; 1
    1358:	af 01       	movw	r20, r30
    135a:	40 1b       	sub	r20, r16
    135c:	51 0b       	sbc	r21, r17
    135e:	d4 01       	movw	r26, r8
    1360:	ed 91       	ld	r30, X+
    1362:	fc 91       	ld	r31, X
    1364:	02 80       	ldd	r0, Z+2	; 0x02
    1366:	f3 81       	ldd	r31, Z+3	; 0x03
    1368:	e0 2d       	mov	r30, r0
    136a:	b8 01       	movw	r22, r16
    136c:	c4 01       	movw	r24, r8
    136e:	09 95       	icall
    1370:	d4 01       	movw	r26, r8
    1372:	ed 91       	ld	r30, X+
    1374:	fc 91       	ld	r31, X
    1376:	02 80       	ldd	r0, Z+2	; 0x02
    1378:	f3 81       	ldd	r31, Z+3	; 0x03
    137a:	e0 2d       	mov	r30, r0
    137c:	41 e0       	ldi	r20, 0x01	; 1
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	6f eb       	ldi	r22, 0xBF	; 191
    1382:	72 e0       	ldi	r23, 0x02	; 2
    1384:	c4 01       	movw	r24, r8
    1386:	09 95       	icall
		
		Serial.write("Number received: ");
		Serial.write(newPhoneNumber);
		Serial.write("\n");
			
			if(strstr(smsMsg,"Master:") != NULL){
    1388:	6f e9       	ldi	r22, 0x9F	; 159
    138a:	71 e0       	ldi	r23, 0x01	; 1
    138c:	c5 01       	movw	r24, r10
    138e:	0e 94 2e 11 	call	0x225c	; 0x225c <strstr>
    1392:	89 2b       	or	r24, r25
    1394:	51 f0       	breq	.+20     	; 0x13aa <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0xf6>
				// add permament	
				ContactDirectoryPermanent->addContact(&newName[0],&newPhoneNumber[0],PERMANENT);
    1396:	22 e0       	ldi	r18, 0x02	; 2
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	a8 01       	movw	r20, r16
    139c:	be 01       	movw	r22, r28
    139e:	6f 5f       	subi	r22, 0xFF	; 255
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	c7 01       	movw	r24, r14
    13a4:	0e 94 33 0a 	call	0x1466	; 0x1466 <_ZN21ContactDirectoryClass10addContactEPcS0_i>
    13a8:	0b c0       	rjmp	.+22     	; 0x13c0 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_+0x10c>
			}else{
				// add temporary

				ContactDirectoryTemporary->addContact(&newName[0],&newPhoneNumber[0],TEMPORARY);
    13aa:	21 e0       	ldi	r18, 0x01	; 1
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	ae 01       	movw	r20, r28
    13b0:	4d 5c       	subi	r20, 0xCD	; 205
    13b2:	5f 4f       	sbci	r21, 0xFF	; 255
    13b4:	be 01       	movw	r22, r28
    13b6:	6f 5f       	subi	r22, 0xFF	; 255
    13b8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ba:	c6 01       	movw	r24, r12
    13bc:	0e 94 33 0a 	call	0x1466	; 0x1466 <_ZN21ContactDirectoryClass10addContactEPcS0_i>
			}
		newSmsReceived == false;
	}
}
    13c0:	ec 96       	adiw	r28, 0x3c	; 60
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	df 91       	pop	r29
    13ce:	cf 91       	pop	r28
    13d0:	1f 91       	pop	r17
    13d2:	0f 91       	pop	r16
    13d4:	ff 90       	pop	r15
    13d6:	ef 90       	pop	r14
    13d8:	df 90       	pop	r13
    13da:	cf 90       	pop	r12
    13dc:	bf 90       	pop	r11
    13de:	af 90       	pop	r10
    13e0:	9f 90       	pop	r9
    13e2:	8f 90       	pop	r8
    13e4:	08 95       	ret

000013e6 <_ZN12ContactClassC1EPcS0_>:
/* Class data declaration      */

/* Class procedure declaration */

// default constructor
ContactClass::ContactClass(char *NewName, char *NewphoneNumber)
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	ec 01       	movw	r28, r24
    13f0:	8a 01       	movw	r16, r20
    13f2:	fc 01       	movw	r30, r24
    13f4:	ea 5b       	subi	r30, 0xBA	; 186
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	11 82       	std	Z+1, r1	; 0x01
    13fa:	10 82       	st	Z, r1
    13fc:	32 96       	adiw	r30, 0x02	; 2
    13fe:	11 82       	std	Z+1, r1	; 0x01
    1400:	10 82       	st	Z, r1
{
	next = NULL;
	prev = NULL;
	strcpy(Name, NewName);
    1402:	0e 94 27 11 	call	0x224e	; 0x224e <strcpy>
	strcpy(phoneNumber,NewphoneNumber);
    1406:	b8 01       	movw	r22, r16
    1408:	ce 01       	movw	r24, r28
    140a:	c2 96       	adiw	r24, 0x32	; 50
    140c:	0e 94 27 11 	call	0x224e	; 0x224e <strcpy>
} //ContactClass
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret

0000141a <_ZN21ContactDirectoryClassC1EPc>:
	tail = NULL;
	strcpy(listName,newListName);
} //ContactDirectoryClass

// default destructor
ContactDirectoryClass::~ContactDirectoryClass()
    141a:	fc 01       	movw	r30, r24
    141c:	11 82       	std	Z+1, r1	; 0x01
    141e:	10 82       	st	Z, r1
    1420:	13 82       	std	Z+3, r1	; 0x03
    1422:	12 82       	std	Z+2, r1	; 0x02
    1424:	04 96       	adiw	r24, 0x04	; 4
    1426:	0e 94 27 11 	call	0x224e	; 0x224e <strcpy>
    142a:	08 95       	ret

0000142c <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass>:
		
		//tempEeprom.eepromToContactDirectory(this);
	}	
}

void ContactDirectoryClass::pushFront(ContactClass *newContact){
    142c:	fc 01       	movw	r30, r24
	if(head == NULL){
    142e:	20 81       	ld	r18, Z
    1430:	31 81       	ldd	r19, Z+1	; 0x01
    1432:	21 15       	cp	r18, r1
    1434:	31 05       	cpc	r19, r1
    1436:	19 f4       	brne	.+6      	; 0x143e <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass+0x12>
		tail = newContact;
    1438:	73 83       	std	Z+3, r23	; 0x03
    143a:	62 83       	std	Z+2, r22	; 0x02
    143c:	05 c0       	rjmp	.+10     	; 0x1448 <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass+0x1c>
	}else{
		head->prev = newContact;
    143e:	d9 01       	movw	r26, r18
    1440:	a8 5b       	subi	r26, 0xB8	; 184
    1442:	bf 4f       	sbci	r27, 0xFF	; 255
    1444:	6d 93       	st	X+, r22
    1446:	7c 93       	st	X, r23
	}
	newContact->next = head;
    1448:	80 81       	ld	r24, Z
    144a:	91 81       	ldd	r25, Z+1	; 0x01
    144c:	db 01       	movw	r26, r22
    144e:	aa 5b       	subi	r26, 0xBA	; 186
    1450:	bf 4f       	sbci	r27, 0xFF	; 255
    1452:	8d 93       	st	X+, r24
    1454:	9c 93       	st	X, r25
	head = newContact;
    1456:	71 83       	std	Z+1, r23	; 0x01
    1458:	60 83       	st	Z, r22
	newContact->prev = NULL;
    145a:	fb 01       	movw	r30, r22
    145c:	e8 5b       	subi	r30, 0xB8	; 184
    145e:	ff 4f       	sbci	r31, 0xFF	; 255
    1460:	11 82       	std	Z+1, r1	; 0x01
    1462:	10 82       	st	Z, r1
    1464:	08 95       	ret

00001466 <_ZN21ContactDirectoryClass10addContactEPcS0_i>:
// default destructor
ContactDirectoryClass::~ContactDirectoryClass()
{
} //~ContactDirectoryClass

void ContactDirectoryClass::addContact(char *newName, char *newPhoneNr, int priority){
    1466:	af 92       	push	r10
    1468:	bf 92       	push	r11
    146a:	cf 92       	push	r12
    146c:	df 92       	push	r13
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	00 d0       	rcall	.+0      	; 0x147c <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x16>
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	6c 01       	movw	r12, r24
    1482:	7b 01       	movw	r14, r22
    1484:	8a 01       	movw	r16, r20
			

	
	// add temporary data into List until power off
	if(priority == TEMPORARY){
    1486:	21 30       	cpi	r18, 0x01	; 1
    1488:	31 05       	cpc	r19, r1
    148a:	09 f0       	breq	.+2      	; 0x148e <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x28>
    148c:	40 c0       	rjmp	.+128    	; 0x150e <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xa8>
			
			ContactClass *newContact = new ContactClass(newName, newPhoneNr);	// new Contact
    148e:	8a e4       	ldi	r24, 0x4A	; 74
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <_Znwj>
    1496:	5c 01       	movw	r10, r24
    1498:	a8 01       	movw	r20, r16
    149a:	b7 01       	movw	r22, r14
    149c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <_ZN12ContactClassC1EPcS0_>
			
			pushFront(newContact);	// add to List
    14a0:	b5 01       	movw	r22, r10
    14a2:	c6 01       	movw	r24, r12
    14a4:	0e 94 16 0a 	call	0x142c	; 0x142c <_ZN21ContactDirectoryClass9pushFrontEP12ContactClass>
    14a8:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    14ac:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    14b0:	02 80       	ldd	r0, Z+2	; 0x02
    14b2:	f3 81       	ldd	r31, Z+3	; 0x03
    14b4:	e0 2d       	mov	r30, r0
    14b6:	49 e0       	ldi	r20, 0x09	; 9
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	67 ea       	ldi	r22, 0xA7	; 167
    14bc:	71 e0       	ldi	r23, 0x01	; 1
    14be:	88 e3       	ldi	r24, 0x38	; 56
    14c0:	93 e0       	ldi	r25, 0x03	; 3
    14c2:	09 95       	icall
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    14c4:	01 15       	cp	r16, r1
    14c6:	11 05       	cpc	r17, r1
    14c8:	99 f0       	breq	.+38     	; 0x14f0 <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x8a>
      return write((const uint8_t *)str, strlen(str));
    14ca:	f8 01       	movw	r30, r16
    14cc:	01 90       	ld	r0, Z+
    14ce:	00 20       	and	r0, r0
    14d0:	e9 f7       	brne	.-6      	; 0x14cc <_ZN21ContactDirectoryClass10addContactEPcS0_i+0x66>
    14d2:	31 97       	sbiw	r30, 0x01	; 1
    14d4:	af 01       	movw	r20, r30
    14d6:	40 1b       	sub	r20, r16
    14d8:	51 0b       	sbc	r21, r17
    14da:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    14de:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    14e2:	02 80       	ldd	r0, Z+2	; 0x02
    14e4:	f3 81       	ldd	r31, Z+3	; 0x03
    14e6:	e0 2d       	mov	r30, r0
    14e8:	b8 01       	movw	r22, r16
    14ea:	88 e3       	ldi	r24, 0x38	; 56
    14ec:	93 e0       	ldi	r25, 0x03	; 3
    14ee:	09 95       	icall
    14f0:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    14f4:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    14f8:	02 80       	ldd	r0, Z+2	; 0x02
    14fa:	f3 81       	ldd	r31, Z+3	; 0x03
    14fc:	e0 2d       	mov	r30, r0
    14fe:	44 e1       	ldi	r20, 0x14	; 20
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	61 eb       	ldi	r22, 0xB1	; 177
    1504:	71 e0       	ldi	r23, 0x01	; 1
    1506:	88 e3       	ldi	r24, 0x38	; 56
    1508:	93 e0       	ldi	r25, 0x03	; 3
    150a:	09 95       	icall
    150c:	18 c0       	rjmp	.+48     	; 0x153e <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xd8>
			Serial.write("\" to Contact List \n\n");	
	}
	
	// add Permanent
	
	if(priority == PERMANENT){
    150e:	22 30       	cpi	r18, 0x02	; 2
    1510:	31 05       	cpc	r19, r1
    1512:	a9 f4       	brne	.+42     	; 0x153e <_ZN21ContactDirectoryClass10addContactEPcS0_i+0xd8>
		EepromClass tempEeprom;
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN11EepromClassC1Ev>
		tempEeprom.addContactToEeprom(newName, newPhoneNr);	// add new Contact to Eeprom
    151c:	a8 01       	movw	r20, r16
    151e:	b7 01       	movw	r22, r14
    1520:	ce 01       	movw	r24, r28
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_ZN11EepromClass18addContactToEepromEPcS0_>
		
		addContact(newName,newPhoneNr,TEMPORARY);			// add new Contact to Contact List Permenant
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	a8 01       	movw	r20, r16
    152e:	b7 01       	movw	r22, r14
    1530:	c6 01       	movw	r24, r12
    1532:	0e 94 33 0a 	call	0x1466	; 0x1466 <_ZN21ContactDirectoryClass10addContactEPcS0_i>
	}
	
	// add Permanent
	
	if(priority == PERMANENT){
		EepromClass tempEeprom;
    1536:	ce 01       	movw	r24, r28
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	0e 94 3e 0b 	call	0x167c	; 0x167c <_ZN11EepromClassD1Ev>
		
		addContact(newName,newPhoneNr,TEMPORARY);			// add new Contact to Contact List Permenant
		
		//tempEeprom.eepromToContactDirectory(this);
	}	
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	1f 91       	pop	r17
    1548:	0f 91       	pop	r16
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	bf 90       	pop	r11
    1554:	af 90       	pop	r10
    1556:	08 95       	ret

00001558 <_ZN21ContactDirectoryClass15showContactListEv>:
	newContact->next = head;
	head = newContact;
	newContact->prev = NULL;
}

void ContactDirectoryClass::showContactList(){
    1558:	af 92       	push	r10
    155a:	bf 92       	push	r11
    155c:	cf 92       	push	r12
    155e:	df 92       	push	r13
    1560:	ef 92       	push	r14
    1562:	ff 92       	push	r15
    1564:	0f 93       	push	r16
    1566:	1f 93       	push	r17
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	c4 56       	subi	r28, 0x64	; 100
    1572:	d1 09       	sbc	r29, r1
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
	ContactClass *currentContact = tail;
    157e:	dc 01       	movw	r26, r24
    1580:	12 96       	adiw	r26, 0x02	; 2
    1582:	0d 91       	ld	r16, X+
    1584:	1c 91       	ld	r17, X
    1586:	13 97       	sbiw	r26, 0x03	; 3
	
	char displayString1[100] = {0};
    1588:	fe 01       	movw	r30, r28
    158a:	31 96       	adiw	r30, 0x01	; 1
    158c:	24 e6       	ldi	r18, 0x64	; 100
    158e:	df 01       	movw	r26, r30
    1590:	1d 92       	st	X+, r1
    1592:	2a 95       	dec	r18
    1594:	e9 f7       	brne	.-6      	; 0x1590 <_ZN21ContactDirectoryClass15showContactListEv+0x38>
	char displayString2[100] = {0};
		
		//sprintf(displayString2,"Displays Contacts from Contact Directory List: %s \n", this->listName);
		//Serial.write(displayString2);
		
		Serial.write(this->listName);
    1596:	bc 01       	movw	r22, r24
    1598:	6c 5f       	subi	r22, 0xFC	; 252
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    159c:	91 f0       	breq	.+36     	; 0x15c2 <_ZN21ContactDirectoryClass15showContactListEv+0x6a>
      return write((const uint8_t *)str, strlen(str));
    159e:	fb 01       	movw	r30, r22
    15a0:	01 90       	ld	r0, Z+
    15a2:	00 20       	and	r0, r0
    15a4:	e9 f7       	brne	.-6      	; 0x15a0 <_ZN21ContactDirectoryClass15showContactListEv+0x48>
    15a6:	31 97       	sbiw	r30, 0x01	; 1
    15a8:	af 01       	movw	r20, r30
    15aa:	46 1b       	sub	r20, r22
    15ac:	57 0b       	sbc	r21, r23
    15ae:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    15b2:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    15b6:	02 80       	ldd	r0, Z+2	; 0x02
    15b8:	f3 81       	ldd	r31, Z+3	; 0x03
    15ba:	e0 2d       	mov	r30, r0
    15bc:	88 e3       	ldi	r24, 0x38	; 56
    15be:	93 e0       	ldi	r25, 0x03	; 3
    15c0:	09 95       	icall
    15c2:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    15c6:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    15ca:	02 80       	ldd	r0, Z+2	; 0x02
    15cc:	f3 81       	ldd	r31, Z+3	; 0x03
    15ce:	e0 2d       	mov	r30, r0
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	50 e0       	ldi	r21, 0x00	; 0
    15d4:	6f eb       	ldi	r22, 0xBF	; 191
    15d6:	72 e0       	ldi	r23, 0x02	; 2
    15d8:	88 e3       	ldi	r24, 0x38	; 56
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	09 95       	icall
		Serial.write("\n");

	
		while(currentContact != NULL){
    15de:	01 15       	cp	r16, r1
    15e0:	11 05       	cpc	r17, r1
    15e2:	c9 f1       	breq	.+114    	; 0x1656 <_ZN21ContactDirectoryClass15showContactListEv+0xfe>
			sprintf(displayString1,"phone number: %s		Name: %s \n", currentContact->phoneNumber, currentContact->Name);
    15e4:	0f 2e       	mov	r0, r31
    15e6:	f6 ec       	ldi	r31, 0xC6	; 198
    15e8:	af 2e       	mov	r10, r31
    15ea:	f1 e0       	ldi	r31, 0x01	; 1
    15ec:	bf 2e       	mov	r11, r31
    15ee:	f0 2d       	mov	r31, r0
    15f0:	fe 01       	movw	r30, r28
    15f2:	31 96       	adiw	r30, 0x01	; 1
    15f4:	7f 01       	movw	r14, r30
    15f6:	0f 2e       	mov	r0, r31
    15f8:	f8 e3       	ldi	r31, 0x38	; 56
    15fa:	cf 2e       	mov	r12, r31
    15fc:	f3 e0       	ldi	r31, 0x03	; 3
    15fe:	df 2e       	mov	r13, r31
    1600:	f0 2d       	mov	r31, r0
    1602:	1f 93       	push	r17
    1604:	0f 93       	push	r16
    1606:	c8 01       	movw	r24, r16
    1608:	c2 96       	adiw	r24, 0x32	; 50
    160a:	9f 93       	push	r25
    160c:	8f 93       	push	r24
    160e:	bf 92       	push	r11
    1610:	af 92       	push	r10
    1612:	ff 92       	push	r15
    1614:	ef 92       	push	r14
    1616:	0e 94 48 11 	call	0x2290	; 0x2290 <sprintf>
    161a:	f7 01       	movw	r30, r14
    161c:	01 90       	ld	r0, Z+
    161e:	00 20       	and	r0, r0
    1620:	e9 f7       	brne	.-6      	; 0x161c <_ZN21ContactDirectoryClass15showContactListEv+0xc4>
    1622:	31 97       	sbiw	r30, 0x01	; 1
    1624:	af 01       	movw	r20, r30
    1626:	4e 19       	sub	r20, r14
    1628:	5f 09       	sbc	r21, r15
    162a:	d6 01       	movw	r26, r12
    162c:	ed 91       	ld	r30, X+
    162e:	fc 91       	ld	r31, X
    1630:	02 80       	ldd	r0, Z+2	; 0x02
    1632:	f3 81       	ldd	r31, Z+3	; 0x03
    1634:	e0 2d       	mov	r30, r0
    1636:	b7 01       	movw	r22, r14
    1638:	c6 01       	movw	r24, r12
    163a:	09 95       	icall
			Serial.write(displayString1);
		
			currentContact = currentContact->next;
    163c:	f8 01       	movw	r30, r16
    163e:	ea 5b       	subi	r30, 0xBA	; 186
    1640:	ff 4f       	sbci	r31, 0xFF	; 255
    1642:	00 81       	ld	r16, Z
    1644:	11 81       	ldd	r17, Z+1	; 0x01
		
		Serial.write(this->listName);
		Serial.write("\n");

	
		while(currentContact != NULL){
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	01 15       	cp	r16, r1
    1652:	11 05       	cpc	r17, r1
    1654:	b1 f6       	brne	.-84     	; 0x1602 <_ZN21ContactDirectoryClass15showContactListEv+0xaa>
			sprintf(displayString1,"phone number: %s		Name: %s \n", currentContact->phoneNumber, currentContact->Name);
			Serial.write(displayString1);
		
			currentContact = currentContact->next;
		}
    1656:	cc 59       	subi	r28, 0x9C	; 156
    1658:	df 4f       	sbci	r29, 0xFF	; 255
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	bf 90       	pop	r11
    1676:	af 90       	pop	r10
    1678:	08 95       	ret

0000167a <_ZN11EepromClassC1Ev>:
/* Class data declaration      */

/* Class procedure declaration */

// default constructor
EepromClass::EepromClass()
    167a:	08 95       	ret

0000167c <_ZN11EepromClassD1Ev>:
{
} //EepromClass

// default destructor
EepromClass::~EepromClass()
    167c:	08 95       	ret

0000167e <_ZN11EepromClass16getEepromAddressEv>:
	Serial.write("Added...\"");
	Serial.write(newPhoneNr);
	Serial.write("\" to EEPROM \n\n");
}

int EepromClass::getEepromAddress(){
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	c0 e0       	ldi	r28, 0x00	; 0
    1684:	d0 e0       	ldi	r29, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1686:	ce 01       	movw	r24, r28
    1688:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <eeprom_read_byte>
	for(int address=0; address < EEPROM.length();address++){
		if(EEPROM.read(address)== 0){
    168c:	88 23       	and	r24, r24
    168e:	41 f0       	breq	.+16     	; 0x16a0 <_ZN11EepromClass16getEepromAddressEv+0x22>
	Serial.write(newPhoneNr);
	Serial.write("\" to EEPROM \n\n");
}

int EepromClass::getEepromAddress(){
	for(int address=0; address < EEPROM.length();address++){
    1690:	21 96       	adiw	r28, 0x01	; 1
    1692:	c1 15       	cp	r28, r1
    1694:	84 e0       	ldi	r24, 0x04	; 4
    1696:	d8 07       	cpc	r29, r24
    1698:	b1 f7       	brne	.-20     	; 0x1686 <_ZN11EepromClass16getEepromAddressEv+0x8>
		if(EEPROM.read(address)== 0){
			return(address);
		}
	}
	return(EEPROM.length());
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	94 e0       	ldi	r25, 0x04	; 4
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <_ZN11EepromClass16getEepromAddressEv+0x26>
    16a0:	8c 2f       	mov	r24, r28
    16a2:	9d 2f       	mov	r25, r29
}
    16a4:	df 91       	pop	r29
    16a6:	cf 91       	pop	r28
    16a8:	08 95       	ret

000016aa <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass>:
// default destructor
EepromClass::~EepromClass()
{
} //~EepromClass

void EepromClass::eepromToContactDirectory(ContactDirectoryClass *ContactDirectoryPermanent){
    16aa:	2f 92       	push	r2
    16ac:	3f 92       	push	r3
    16ae:	4f 92       	push	r4
    16b0:	5f 92       	push	r5
    16b2:	6f 92       	push	r6
    16b4:	7f 92       	push	r7
    16b6:	8f 92       	push	r8
    16b8:	9f 92       	push	r9
    16ba:	af 92       	push	r10
    16bc:	bf 92       	push	r11
    16be:	cf 92       	push	r12
    16c0:	df 92       	push	r13
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	c6 54       	subi	r28, 0x46	; 70
    16d4:	d1 09       	sbc	r29, r1
    16d6:	0f b6       	in	r0, 0x3f	; 63
    16d8:	f8 94       	cli
    16da:	de bf       	out	0x3e, r29	; 62
    16dc:	0f be       	out	0x3f, r0	; 63
    16de:	cd bf       	out	0x3d, r28	; 61
    16e0:	3c 01       	movw	r6, r24
    16e2:	2b 01       	movw	r4, r22
	
	eepromAddress = getEepromAddress();
    16e4:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN11EepromClass16getEepromAddressEv>
    16e8:	d3 01       	movw	r26, r6
    16ea:	8d 93       	st	X+, r24
    16ec:	9c 93       	st	X, r25
	char tempNumber[PHONE_NR_SIZE]={0};
    16ee:	fe 01       	movw	r30, r28
    16f0:	31 96       	adiw	r30, 0x01	; 1
    16f2:	24 e1       	ldi	r18, 0x14	; 20
    16f4:	df 01       	movw	r26, r30
    16f6:	1d 92       	st	X+, r1
    16f8:	2a 95       	dec	r18
    16fa:	e9 f7       	brne	.-6      	; 0x16f6 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x4c>
	char tempName[NAME_SIZE]={0};
    16fc:	74 96       	adiw	r30, 0x14	; 20
    16fe:	22 e3       	ldi	r18, 0x32	; 50
    1700:	df 01       	movw	r26, r30
    1702:	1d 92       	st	X+, r1
    1704:	2a 95       	dec	r18
    1706:	e9 f7       	brne	.-6      	; 0x1702 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x58>
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
    1708:	18 16       	cp	r1, r24
    170a:	19 06       	cpc	r1, r25
    170c:	0c f0       	brlt	.+2      	; 0x1710 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x66>
    170e:	55 c0       	rjmp	.+170    	; 0x17ba <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x110>
    1710:	5f 01       	movw	r10, r30
    1712:	74 97       	sbiw	r30, 0x14	; 20
    1714:	7f 01       	movw	r14, r30
    1716:	00 e0       	ldi	r16, 0x00	; 0
    1718:	10 e0       	ldi	r17, 0x00	; 0
    171a:	81 2c       	mov	r8, r1
    171c:	91 2c       	mov	r9, r1
    171e:	c1 2c       	mov	r12, r1
    1720:	d1 2c       	mov	r13, r1
			}else{
				tempName[i] = '\0';			// end name string
				
				// add contact readed out of eeprom to contact List
				ContactDirectoryPermanent->addContact((char*)&tempName,(char*)&tempNumber,TEMPORARY);	
				state = 0;
    1722:	21 2c       	mov	r2, r1
    1724:	31 2c       	mov	r3, r1
    1726:	c8 01       	movw	r24, r16
    1728:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <eeprom_read_byte>
	char tempName[NAME_SIZE]={0};
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
		if(EEPROM.read(i) == ','){			// change state if number or name ended
    172c:	8c 32       	cpi	r24, 0x2C	; 44
    172e:	e1 f4       	brne	.+56     	; 0x1768 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xbe>
			v=0;
			if(state == 0){					// toggle between states
    1730:	89 28       	or	r8, r9
    1732:	41 f4       	brne	.+16     	; 0x1744 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x9a>
				tempNumber[i] = '\0';		// end number string
    1734:	d7 01       	movw	r26, r14
    1736:	1c 92       	st	X, r1
				state = 1;
    1738:	88 24       	eor	r8, r8
    173a:	83 94       	inc	r8
    173c:	91 2c       	mov	r9, r1
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
		if(EEPROM.read(i) == ','){			// change state if number or name ended
			v=0;
    173e:	c1 2c       	mov	r12, r1
    1740:	d1 2c       	mov	r13, r1
    1742:	2c c0       	rjmp	.+88     	; 0x179c <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xf2>
			if(state == 0){					// toggle between states
				tempNumber[i] = '\0';		// end number string
				state = 1;
			}else{
				tempName[i] = '\0';			// end name string
    1744:	f5 01       	movw	r30, r10
    1746:	10 82       	st	Z, r1
				
				// add contact readed out of eeprom to contact List
				ContactDirectoryPermanent->addContact((char*)&tempName,(char*)&tempNumber,TEMPORARY);	
    1748:	21 e0       	ldi	r18, 0x01	; 1
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	ae 01       	movw	r20, r28
    174e:	4f 5f       	subi	r20, 0xFF	; 255
    1750:	5f 4f       	sbci	r21, 0xFF	; 255
    1752:	be 01       	movw	r22, r28
    1754:	6b 5e       	subi	r22, 0xEB	; 235
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	c2 01       	movw	r24, r4
    175a:	0e 94 33 0a 	call	0x1466	; 0x1466 <_ZN21ContactDirectoryClass10addContactEPcS0_i>
				state = 0;
    175e:	82 2c       	mov	r8, r2
    1760:	93 2c       	mov	r9, r3
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
		if(EEPROM.read(i) == ','){			// change state if number or name ended
			v=0;
    1762:	c1 2c       	mov	r12, r1
    1764:	d1 2c       	mov	r13, r1
    1766:	1a c0       	rjmp	.+52     	; 0x179c <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xf2>
				// add contact readed out of eeprom to contact List
				ContactDirectoryPermanent->addContact((char*)&tempName,(char*)&tempNumber,TEMPORARY);	
				state = 0;
			}
		}else{
			switch(state){
    1768:	81 14       	cp	r8, r1
    176a:	91 04       	cpc	r9, r1
    176c:	29 f0       	breq	.+10     	; 0x1778 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xce>
    176e:	f1 e0       	ldi	r31, 0x01	; 1
    1770:	8f 16       	cp	r8, r31
    1772:	91 04       	cpc	r9, r1
    1774:	49 f0       	breq	.+18     	; 0x1788 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xde>
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xec>
				case 0:	// read number
					tempNumber[v]=EEPROM.read(i);						
    1778:	e1 e0       	ldi	r30, 0x01	; 1
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	ec 0f       	add	r30, r28
    177e:	fd 1f       	adc	r31, r29
    1780:	ec 0d       	add	r30, r12
    1782:	fd 1d       	adc	r31, r13
    1784:	80 83       	st	Z, r24
				break;
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0xec>
		
				case 1: // read name
					tempName[v] = EEPROM.read(i);	
    1788:	e5 e1       	ldi	r30, 0x15	; 21
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	ec 0f       	add	r30, r28
    178e:	fd 1f       	adc	r31, r29
    1790:	ec 0d       	add	r30, r12
    1792:	fd 1d       	adc	r31, r13
    1794:	80 83       	st	Z, r24
				break;
			}
			v++;
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	c8 1a       	sub	r12, r24
    179a:	d8 0a       	sbc	r13, r24
	char tempNumber[PHONE_NR_SIZE]={0};
	char tempName[NAME_SIZE]={0};
	int v = 0;
	int state = 0;
	
	for(int i=0; i<eepromAddress;i++){	// until end of Eeprom data reached	
    179c:	0f 5f       	subi	r16, 0xFF	; 255
    179e:	1f 4f       	sbci	r17, 0xFF	; 255
    17a0:	9f ef       	ldi	r25, 0xFF	; 255
    17a2:	a9 1a       	sub	r10, r25
    17a4:	b9 0a       	sbc	r11, r25
    17a6:	af ef       	ldi	r26, 0xFF	; 255
    17a8:	ea 1a       	sub	r14, r26
    17aa:	fa 0a       	sbc	r15, r26
    17ac:	f3 01       	movw	r30, r6
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	08 17       	cp	r16, r24
    17b4:	19 07       	cpc	r17, r25
    17b6:	0c f4       	brge	.+2      	; 0x17ba <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x110>
    17b8:	b6 cf       	rjmp	.-148    	; 0x1726 <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass+0x7c>
				break;
			}
			v++;
		}
	}
}
    17ba:	ca 5b       	subi	r28, 0xBA	; 186
    17bc:	df 4f       	sbci	r29, 0xFF	; 255
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	df 90       	pop	r13
    17d6:	cf 90       	pop	r12
    17d8:	bf 90       	pop	r11
    17da:	af 90       	pop	r10
    17dc:	9f 90       	pop	r9
    17de:	8f 90       	pop	r8
    17e0:	7f 90       	pop	r7
    17e2:	6f 90       	pop	r6
    17e4:	5f 90       	pop	r5
    17e6:	4f 90       	pop	r4
    17e8:	3f 90       	pop	r3
    17ea:	2f 90       	pop	r2
    17ec:	08 95       	ret

000017ee <_ZN11EepromClass18addContactToEepromEPcS0_>:

void EepromClass::addContactToEeprom(char *newName, char *newPhoneNr){
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	ec 01       	movw	r28, r24
    1800:	8b 01       	movw	r16, r22
    1802:	7a 01       	movw	r14, r20
		
	eepromAddress = getEepromAddress();							// "Phone_Number0","Name0","Phone_Number1","Name1",...
    1804:	0e 94 3f 0b 	call	0x167e	; 0x167e <_ZN11EepromClass16getEepromAddressEv>
    1808:	99 83       	std	Y+1, r25	; 0x01
    180a:	88 83       	st	Y, r24
	
	for(int i=0; newPhoneNr[i]!= NULL ; i++, eepromAddress++){	// until end of phone number is not reached
    180c:	f7 01       	movw	r30, r14
    180e:	60 81       	ld	r22, Z
    1810:	66 23       	and	r22, r22
    1812:	e9 f0       	breq	.+58     	; 0x184e <_ZN11EepromClass18addContactToEepromEPcS0_+0x60>
    1814:	67 01       	movw	r12, r14
    1816:	ff ef       	ldi	r31, 0xFF	; 255
    1818:	cf 1a       	sub	r12, r31
    181a:	df 0a       	sbc	r13, r31
		if(eepromAddress < (EEPROM.length())){					// error if eeprom full
    181c:	88 81       	ld	r24, Y
    181e:	99 81       	ldd	r25, Y+1	; 0x01
    1820:	81 15       	cp	r24, r1
    1822:	24 e0       	ldi	r18, 0x04	; 4
    1824:	92 07       	cpc	r25, r18
    1826:	18 f4       	brcc	.+6      	; 0x182e <_ZN11EepromClass18addContactToEepromEPcS0_+0x40>
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1828:	0e 94 03 14 	call	0x2806	; 0x2806 <eeprom_write_byte>
    182c:	06 c0       	rjmp	.+12     	; 0x183a <_ZN11EepromClass18addContactToEepromEPcS0_+0x4c>
			EEPROM.write(eepromAddress, newPhoneNr[i]);			// write phone number into eeprom
			}else{
			Serial.print("ERROR EEPROM is full");
    182e:	63 ee       	ldi	r22, 0xE3	; 227
    1830:	71 e0       	ldi	r23, 0x01	; 1
    1832:	88 e3       	ldi	r24, 0x38	; 56
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEPKc>

void EepromClass::addContactToEeprom(char *newName, char *newPhoneNr){
		
	eepromAddress = getEepromAddress();							// "Phone_Number0","Name0","Phone_Number1","Name1",...
	
	for(int i=0; newPhoneNr[i]!= NULL ; i++, eepromAddress++){	// until end of phone number is not reached
    183a:	88 81       	ld	r24, Y
    183c:	99 81       	ldd	r25, Y+1	; 0x01
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	99 83       	std	Y+1, r25	; 0x01
    1842:	88 83       	st	Y, r24
    1844:	f6 01       	movw	r30, r12
    1846:	61 91       	ld	r22, Z+
    1848:	6f 01       	movw	r12, r30
    184a:	61 11       	cpse	r22, r1
    184c:	e7 cf       	rjmp	.-50     	; 0x181c <_ZN11EepromClass18addContactToEepromEPcS0_+0x2e>
    184e:	6c e2       	ldi	r22, 0x2C	; 44
    1850:	88 81       	ld	r24, Y
    1852:	99 81       	ldd	r25, Y+1	; 0x01
    1854:	0e 94 03 14 	call	0x2806	; 0x2806 <eeprom_write_byte>
			}else{
			Serial.print("ERROR EEPROM is full");
		}
	}
	EEPROM.write(eepromAddress, ',');							// write delimiter
	eepromAddress++;
    1858:	88 81       	ld	r24, Y
    185a:	99 81       	ldd	r25, Y+1	; 0x01
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	99 83       	std	Y+1, r25	; 0x01
    1860:	88 83       	st	Y, r24
	
	for(int i=0; newName[i] != NULL; i++, eepromAddress++){
    1862:	f8 01       	movw	r30, r16
    1864:	60 81       	ld	r22, Z
    1866:	66 23       	and	r22, r22
    1868:	d9 f0       	breq	.+54     	; 0x18a0 <_ZN11EepromClass18addContactToEepromEPcS0_+0xb2>
    186a:	0f 5f       	subi	r16, 0xFF	; 255
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
		if(eepromAddress < (EEPROM.length())){					// error if eeprom full
    186e:	88 81       	ld	r24, Y
    1870:	99 81       	ldd	r25, Y+1	; 0x01
    1872:	81 15       	cp	r24, r1
    1874:	f4 e0       	ldi	r31, 0x04	; 4
    1876:	9f 07       	cpc	r25, r31
    1878:	18 f4       	brcc	.+6      	; 0x1880 <_ZN11EepromClass18addContactToEepromEPcS0_+0x92>
    187a:	0e 94 03 14 	call	0x2806	; 0x2806 <eeprom_write_byte>
    187e:	06 c0       	rjmp	.+12     	; 0x188c <_ZN11EepromClass18addContactToEepromEPcS0_+0x9e>
			EEPROM.write(eepromAddress, newName[i]);			// write Name into eeprom
			}else{
			Serial.print("ERROR EEPROM is full");
    1880:	63 ee       	ldi	r22, 0xE3	; 227
    1882:	71 e0       	ldi	r23, 0x01	; 1
    1884:	88 e3       	ldi	r24, 0x38	; 56
    1886:	93 e0       	ldi	r25, 0x03	; 3
    1888:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEPKc>
		}
	}
	EEPROM.write(eepromAddress, ',');							// write delimiter
	eepromAddress++;
	
	for(int i=0; newName[i] != NULL; i++, eepromAddress++){
    188c:	88 81       	ld	r24, Y
    188e:	99 81       	ldd	r25, Y+1	; 0x01
    1890:	01 96       	adiw	r24, 0x01	; 1
    1892:	99 83       	std	Y+1, r25	; 0x01
    1894:	88 83       	st	Y, r24
    1896:	f8 01       	movw	r30, r16
    1898:	61 91       	ld	r22, Z+
    189a:	8f 01       	movw	r16, r30
    189c:	61 11       	cpse	r22, r1
    189e:	e7 cf       	rjmp	.-50     	; 0x186e <_ZN11EepromClass18addContactToEepromEPcS0_+0x80>
    18a0:	6c e2       	ldi	r22, 0x2C	; 44
    18a2:	88 81       	ld	r24, Y
    18a4:	99 81       	ldd	r25, Y+1	; 0x01
    18a6:	0e 94 03 14 	call	0x2806	; 0x2806 <eeprom_write_byte>
    18aa:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    18ae:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    18b2:	02 80       	ldd	r0, Z+2	; 0x02
    18b4:	f3 81       	ldd	r31, Z+3	; 0x03
    18b6:	e0 2d       	mov	r30, r0
    18b8:	49 e0       	ldi	r20, 0x09	; 9
    18ba:	50 e0       	ldi	r21, 0x00	; 0
    18bc:	67 ea       	ldi	r22, 0xA7	; 167
    18be:	71 e0       	ldi	r23, 0x01	; 1
    18c0:	88 e3       	ldi	r24, 0x38	; 56
    18c2:	93 e0       	ldi	r25, 0x03	; 3
    18c4:	09 95       	icall
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    18c6:	e1 14       	cp	r14, r1
    18c8:	f1 04       	cpc	r15, r1
    18ca:	99 f0       	breq	.+38     	; 0x18f2 <_ZN11EepromClass18addContactToEepromEPcS0_+0x104>
      return write((const uint8_t *)str, strlen(str));
    18cc:	f7 01       	movw	r30, r14
    18ce:	01 90       	ld	r0, Z+
    18d0:	00 20       	and	r0, r0
    18d2:	e9 f7       	brne	.-6      	; 0x18ce <_ZN11EepromClass18addContactToEepromEPcS0_+0xe0>
    18d4:	31 97       	sbiw	r30, 0x01	; 1
    18d6:	af 01       	movw	r20, r30
    18d8:	4e 19       	sub	r20, r14
    18da:	5f 09       	sbc	r21, r15
    18dc:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    18e0:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    18e4:	02 80       	ldd	r0, Z+2	; 0x02
    18e6:	f3 81       	ldd	r31, Z+3	; 0x03
    18e8:	e0 2d       	mov	r30, r0
    18ea:	b7 01       	movw	r22, r14
    18ec:	88 e3       	ldi	r24, 0x38	; 56
    18ee:	93 e0       	ldi	r25, 0x03	; 3
    18f0:	09 95       	icall
    18f2:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    18f6:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    18fa:	02 80       	ldd	r0, Z+2	; 0x02
    18fc:	f3 81       	ldd	r31, Z+3	; 0x03
    18fe:	e0 2d       	mov	r30, r0
    1900:	4e e0       	ldi	r20, 0x0E	; 14
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	68 ef       	ldi	r22, 0xF8	; 248
    1906:	71 e0       	ldi	r23, 0x01	; 1
    1908:	88 e3       	ldi	r24, 0x38	; 56
    190a:	93 e0       	ldi	r25, 0x03	; 3
    190c:	09 95       	icall
	EEPROM.write(eepromAddress, ',');							// write delimiter
	
	Serial.write("Added...\"");
	Serial.write(newPhoneNr);
	Serial.write("\" to EEPROM \n\n");
}
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	08 95       	ret

00001920 <_ZN11EepromClass11clearEepromEv>:
		}
	}
	return(EEPROM.length());
}

void EepromClass::clearEeprom(){
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	c0 e0       	ldi	r28, 0x00	; 0
    1926:	d0 e0       	ldi	r29, 0x00	; 0
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	ce 01       	movw	r24, r28
    192c:	0e 94 03 14 	call	0x2806	; 0x2806 <eeprom_write_byte>
	for (int i = 0 ; i < EEPROM.length() ; i++) {
    1930:	21 96       	adiw	r28, 0x01	; 1
    1932:	c1 15       	cp	r28, r1
    1934:	84 e0       	ldi	r24, 0x04	; 4
    1936:	d8 07       	cpc	r29, r24
    1938:	b9 f7       	brne	.-18     	; 0x1928 <_ZN11EepromClass11clearEepromEv+0x8>
    193a:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    193e:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    1942:	02 80       	ldd	r0, Z+2	; 0x02
    1944:	f3 81       	ldd	r31, Z+3	; 0x03
    1946:	e0 2d       	mov	r30, r0
    1948:	40 e1       	ldi	r20, 0x10	; 16
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	67 e0       	ldi	r22, 0x07	; 7
    194e:	72 e0       	ldi	r23, 0x02	; 2
    1950:	88 e3       	ldi	r24, 0x38	; 56
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	09 95       	icall
		EEPROM.write(i, 0);
	}
	Serial.write("EEPROM cleared\n\n");	
}
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <_ZN21GsmCommunicationClass13displayStringEPc>:
		}
		Serial.print("\n");
	}
}

void GsmCommunicationClass::checkReceivedData(){
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	61 15       	cp	r22, r1
    1962:	71 05       	cpc	r23, r1
    1964:	91 f0       	breq	.+36     	; 0x198a <_ZN21GsmCommunicationClass13displayStringEPc+0x2e>
    1966:	eb 01       	movw	r28, r22
    1968:	68 81       	ld	r22, Y
    196a:	66 23       	and	r22, r22
    196c:	41 f0       	breq	.+16     	; 0x197e <_ZN21GsmCommunicationClass13displayStringEPc+0x22>
    196e:	21 96       	adiw	r28, 0x01	; 1
    1970:	88 e3       	ldi	r24, 0x38	; 56
    1972:	93 e0       	ldi	r25, 0x03	; 3
    1974:	0e 94 21 03 	call	0x642	; 0x642 <_ZN5Print5printEc>
    1978:	69 91       	ld	r22, Y+
    197a:	61 11       	cpse	r22, r1
    197c:	f9 cf       	rjmp	.-14     	; 0x1970 <_ZN21GsmCommunicationClass13displayStringEPc+0x14>
    197e:	6f eb       	ldi	r22, 0xBF	; 191
    1980:	72 e0       	ldi	r23, 0x02	; 2
    1982:	88 e3       	ldi	r24, 0x38	; 56
    1984:	93 e0       	ldi	r25, 0x03	; 3
    1986:	0e 94 0b 03 	call	0x616	; 0x616 <_ZN5Print5printEPKc>
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	08 95       	ret

00001990 <_ZN21GsmCommunicationClass10readSerialEv>:
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
    199c:	ec 01       	movw	r28, r24
    199e:	2f ef       	ldi	r18, 0xFF	; 255
    19a0:	89 e6       	ldi	r24, 0x69	; 105
    19a2:	98 e1       	ldi	r25, 0x18	; 24
    19a4:	21 50       	subi	r18, 0x01	; 1
    19a6:	80 40       	sbci	r24, 0x00	; 0
    19a8:	90 40       	sbci	r25, 0x00	; 0
    19aa:	e1 f7       	brne	.-8      	; 0x19a4 <_ZN21GsmCommunicationClass10readSerialEv+0x14>
    19ac:	00 c0       	rjmp	.+0      	; 0x19ae <_ZN21GsmCommunicationClass10readSerialEv+0x1e>
    19ae:	00 00       	nop
    19b0:	7e 01       	movw	r14, r28
    19b2:	a4 e0       	ldi	r26, 0x04	; 4
    19b4:	ea 0e       	add	r14, r26
    19b6:	f1 1c       	adc	r15, r1
    19b8:	ce 01       	movw	r24, r28
    19ba:	8c 5f       	subi	r24, 0xFC	; 252
    19bc:	9e 4f       	sbci	r25, 0xFE	; 254
    19be:	f7 01       	movw	r30, r14
    19c0:	11 92       	st	Z+, r1
    19c2:	e8 17       	cp	r30, r24
    19c4:	f9 07       	cpc	r31, r25
    19c6:	e1 f7       	brne	.-8      	; 0x19c0 <_ZN21GsmCommunicationClass10readSerialEv+0x30>
    19c8:	00 e0       	ldi	r16, 0x00	; 0
    19ca:	10 e0       	ldi	r17, 0x00	; 0
    19cc:	88 81       	ld	r24, Y
    19ce:	99 81       	ldd	r25, Y+1	; 0x01
    19d0:	dc 01       	movw	r26, r24
    19d2:	ed 91       	ld	r30, X+
    19d4:	fc 91       	ld	r31, X
    19d6:	00 84       	ldd	r0, Z+8	; 0x08
    19d8:	f1 85       	ldd	r31, Z+9	; 0x09
    19da:	e0 2d       	mov	r30, r0
    19dc:	09 95       	icall
    19de:	89 2b       	or	r24, r25
    19e0:	79 f0       	breq	.+30     	; 0x1a00 <_ZN21GsmCommunicationClass10readSerialEv+0x70>
    19e2:	88 81       	ld	r24, Y
    19e4:	99 81       	ldd	r25, Y+1	; 0x01
    19e6:	dc 01       	movw	r26, r24
    19e8:	ed 91       	ld	r30, X+
    19ea:	fc 91       	ld	r31, X
    19ec:	02 84       	ldd	r0, Z+10	; 0x0a
    19ee:	f3 85       	ldd	r31, Z+11	; 0x0b
    19f0:	e0 2d       	mov	r30, r0
    19f2:	09 95       	icall
    19f4:	f7 01       	movw	r30, r14
    19f6:	81 93       	st	Z+, r24
    19f8:	7f 01       	movw	r14, r30
    19fa:	0f 5f       	subi	r16, 0xFF	; 255
    19fc:	1f 4f       	sbci	r17, 0xFF	; 255
    19fe:	e6 cf       	rjmp	.-52     	; 0x19cc <_ZN21GsmCommunicationClass10readSerialEv+0x3c>
    1a00:	fe 01       	movw	r30, r28
    1a02:	e0 0f       	add	r30, r16
    1a04:	f1 1f       	adc	r31, r17
    1a06:	14 82       	std	Z+4, r1	; 0x04
    1a08:	be 01       	movw	r22, r28
    1a0a:	6c 5f       	subi	r22, 0xFC	; 252
    1a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0e:	ce 01       	movw	r24, r28
    1a10:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN21GsmCommunicationClass13displayStringEPc>
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	08 95       	ret

00001a22 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial>:
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	ec 01       	movw	r28, r24
    1a28:	1b 82       	std	Y+3, r1	; 0x03
    1a2a:	1a 82       	std	Y+2, r1	; 0x02
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	34 96       	adiw	r30, 0x04	; 4
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	df 01       	movw	r26, r30
    1a36:	9c 01       	movw	r18, r24
    1a38:	1d 92       	st	X+, r1
    1a3a:	21 50       	subi	r18, 0x01	; 1
    1a3c:	30 40       	sbci	r19, 0x00	; 0
    1a3e:	e1 f7       	brne	.-8      	; 0x1a38 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x16>
    1a40:	f3 95       	inc	r31
    1a42:	10 82       	st	Z, r1
    1a44:	31 96       	adiw	r30, 0x01	; 1
    1a46:	10 82       	st	Z, r1
    1a48:	31 96       	adiw	r30, 0x01	; 1
    1a4a:	10 82       	st	Z, r1
    1a4c:	79 83       	std	Y+1, r23	; 0x01
    1a4e:	68 83       	st	Y, r22
    1a50:	26 e0       	ldi	r18, 0x06	; 6
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	55 e2       	ldi	r21, 0x25	; 37
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	70 e0       	ldi	r23, 0x00	; 0
    1a5a:	88 e3       	ldi	r24, 0x38	; 56
    1a5c:	93 e0       	ldi	r25, 0x03	; 3
    1a5e:	0e 94 80 01 	call	0x300	; 0x300 <_ZN14HardwareSerial5beginEmh>
    1a62:	40 e8       	ldi	r20, 0x80	; 128
    1a64:	55 e2       	ldi	r21, 0x25	; 37
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	88 81       	ld	r24, Y
    1a6c:	99 81       	ldd	r25, Y+1	; 0x01
    1a6e:	0e 94 36 08 	call	0x106c	; 0x106c <_ZN14SoftwareSerial5beginEl>
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	83 ed       	ldi	r24, 0xD3	; 211
    1a76:	90 e3       	ldi	r25, 0x30	; 48
    1a78:	31 50       	subi	r19, 0x01	; 1
    1a7a:	80 40       	sbci	r24, 0x00	; 0
    1a7c:	90 40       	sbci	r25, 0x00	; 0
    1a7e:	e1 f7       	brne	.-8      	; 0x1a78 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x56>
    1a80:	00 c0       	rjmp	.+0      	; 0x1a82 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial+0x60>
    1a82:	00 00       	nop
    1a84:	68 e1       	ldi	r22, 0x18	; 24
    1a86:	72 e0       	ldi	r23, 0x02	; 2
    1a88:	88 81       	ld	r24, Y
    1a8a:	99 81       	ldd	r25, Y+1	; 0x01
    1a8c:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN5Print7printlnEPKc>
    1a90:	ce 01       	movw	r24, r28
    1a92:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN21GsmCommunicationClass10readSerialEv>
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	08 95       	ret

00001a9c <_ZN21GsmCommunicationClass12setUpSmsModeEv>:



	

void GsmCommunicationClass::setUpSmsMode(){
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	ec 01       	movw	r28, r24
	GsmSerial->println("AT+CMGF=1");	// Configure TEXT mode
    1aa6:	6b e1       	ldi	r22, 0x1B	; 27
    1aa8:	72 e0       	ldi	r23, 0x02	; 2
    1aaa:	88 81       	ld	r24, Y
    1aac:	99 81       	ldd	r25, Y+1	; 0x01
    1aae:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN5Print7printlnEPKc>
	readSerial();
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN21GsmCommunicationClass10readSerialEv>
	
	GsmSerial->println("AT+CNMI=1,2,0,0,0");	// define how newly arrived SMS Msg. should be handled
    1ab8:	65 e2       	ldi	r22, 0x25	; 37
    1aba:	72 e0       	ldi	r23, 0x02	; 2
    1abc:	88 81       	ld	r24, Y
    1abe:	99 81       	ldd	r25, Y+1	; 0x01
    1ac0:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN5Print7printlnEPKc>
	readSerial();
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN21GsmCommunicationClass10readSerialEv>
	// check Answer
	if(strstr(receiveBuffer, "OK") != NULL){ // check if configured
    1aca:	8e 01       	movw	r16, r28
    1acc:	0c 5f       	subi	r16, 0xFC	; 252
    1ace:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad0:	67 e3       	ldi	r22, 0x37	; 55
    1ad2:	72 e0       	ldi	r23, 0x02	; 2
    1ad4:	c8 01       	movw	r24, r16
    1ad6:	0e 94 2e 11 	call	0x225c	; 0x225c <strstr>
    1ada:	89 2b       	or	r24, r25
    1adc:	b1 f0       	breq	.+44     	; 0x1b0a <_ZN21GsmCommunicationClass12setUpSmsModeEv+0x6e>
    1ade:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    1ae2:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    1ae6:	02 80       	ldd	r0, Z+2	; 0x02
    1ae8:	f3 81       	ldd	r31, Z+3	; 0x03
    1aea:	e0 2d       	mov	r30, r0
    1aec:	48 e1       	ldi	r20, 0x18	; 24
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	6a e3       	ldi	r22, 0x3A	; 58
    1af2:	72 e0       	ldi	r23, 0x02	; 2
    1af4:	88 e3       	ldi	r24, 0x38	; 56
    1af6:	93 e0       	ldi	r25, 0x03	; 3
    1af8:	09 95       	icall
		Serial.write("SMS Mode is configured\n\n");
		gsmIsConnectedOld = gsmIsConnected;
    1afa:	fe 01       	movw	r30, r28
    1afc:	eb 5f       	subi	r30, 0xFB	; 251
    1afe:	fe 4f       	sbci	r31, 0xFE	; 254
    1b00:	cc 5f       	subi	r28, 0xFC	; 252
    1b02:	de 4f       	sbci	r29, 0xFE	; 254
    1b04:	88 81       	ld	r24, Y
    1b06:	80 83       	st	Z, r24
    1b08:	24 c0       	rjmp	.+72     	; 0x1b52 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0xb6>
	}else if(strstr(receiveBuffer, "ERROR")){
    1b0a:	63 e5       	ldi	r22, 0x53	; 83
    1b0c:	72 e0       	ldi	r23, 0x02	; 2
    1b0e:	c8 01       	movw	r24, r16
    1b10:	0e 94 2e 11 	call	0x225c	; 0x225c <strstr>
    1b14:	89 2b       	or	r24, r25
    1b16:	79 f0       	breq	.+30     	; 0x1b36 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0x9a>
    1b18:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    1b1c:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    1b20:	02 80       	ldd	r0, Z+2	; 0x02
    1b22:	f3 81       	ldd	r31, Z+3	; 0x03
    1b24:	e0 2d       	mov	r30, r0
    1b26:	40 e2       	ldi	r20, 0x20	; 32
    1b28:	50 e0       	ldi	r21, 0x00	; 0
    1b2a:	69 e5       	ldi	r22, 0x59	; 89
    1b2c:	72 e0       	ldi	r23, 0x02	; 2
    1b2e:	88 e3       	ldi	r24, 0x38	; 56
    1b30:	93 e0       	ldi	r25, 0x03	; 3
    1b32:	09 95       	icall
    1b34:	0e c0       	rjmp	.+28     	; 0x1b52 <_ZN21GsmCommunicationClass12setUpSmsModeEv+0xb6>
    1b36:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    1b3a:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    1b3e:	02 80       	ldd	r0, Z+2	; 0x02
    1b40:	f3 81       	ldd	r31, Z+3	; 0x03
    1b42:	e0 2d       	mov	r30, r0
    1b44:	41 e2       	ldi	r20, 0x21	; 33
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	6a e7       	ldi	r22, 0x7A	; 122
    1b4a:	72 e0       	ldi	r23, 0x02	; 2
    1b4c:	88 e3       	ldi	r24, 0x38	; 56
    1b4e:	93 e0       	ldi	r25, 0x03	; 3
    1b50:	09 95       	icall
		Serial.write("ERROR in SMS mode configuration\n");
	}else{
		Serial.write("No response in SMS configuration\n");
	}
}
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <_ZN21GsmCommunicationClass15checkConnectionEv>:
/*                                                                           */
/*  History     : 23.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/
void GsmCommunicationClass::checkConnection()
{	
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
	if(checkConnectionTime > 10){	// check connection loop rate
    1b64:	dc 01       	movw	r26, r24
    1b66:	12 96       	adiw	r26, 0x02	; 2
    1b68:	2d 91       	ld	r18, X+
    1b6a:	3c 91       	ld	r19, X
    1b6c:	13 97       	sbiw	r26, 0x03	; 3
    1b6e:	2b 30       	cpi	r18, 0x0B	; 11
    1b70:	31 05       	cpc	r19, r1
    1b72:	0c f4       	brge	.+2      	; 0x1b76 <_ZN21GsmCommunicationClass15checkConnectionEv+0x1a>
    1b74:	4c c0       	rjmp	.+152    	; 0x1c0e <_ZN21GsmCommunicationClass15checkConnectionEv+0xb2>
    1b76:	ec 01       	movw	r28, r24
		checkConnectionTime = 0;
    1b78:	1b 82       	std	Y+3, r1	; 0x03
    1b7a:	1a 82       	std	Y+2, r1	; 0x02
		if (GsmSerial->available()==0){
    1b7c:	88 81       	ld	r24, Y
    1b7e:	99 81       	ldd	r25, Y+1	; 0x01
    1b80:	dc 01       	movw	r26, r24
    1b82:	ed 91       	ld	r30, X+
    1b84:	fc 91       	ld	r31, X
    1b86:	00 84       	ldd	r0, Z+8	; 0x08
    1b88:	f1 85       	ldd	r31, Z+9	; 0x09
    1b8a:	e0 2d       	mov	r30, r0
    1b8c:	09 95       	icall
    1b8e:	89 2b       	or	r24, r25
    1b90:	31 f4       	brne	.+12     	; 0x1b9e <_ZN21GsmCommunicationClass15checkConnectionEv+0x42>
			GsmSerial->println("AT+CREG?");		// ask if connected to cellular Network
    1b92:	6c e9       	ldi	r22, 0x9C	; 156
    1b94:	72 e0       	ldi	r23, 0x02	; 2
    1b96:	88 81       	ld	r24, Y
    1b98:	99 81       	ldd	r25, Y+1	; 0x01
    1b9a:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN5Print7printlnEPKc>
		}
		readSerial();		// read Answer
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN21GsmCommunicationClass10readSerialEv>
	
		if(strstr(receiveBuffer, "+CREG: 0,1") != NULL){ // check if connection was successful
    1ba4:	65 ea       	ldi	r22, 0xA5	; 165
    1ba6:	72 e0       	ldi	r23, 0x02	; 2
    1ba8:	ce 01       	movw	r24, r28
    1baa:	04 96       	adiw	r24, 0x04	; 4
    1bac:	0e 94 2e 11 	call	0x225c	; 0x225c <strstr>
    1bb0:	89 2b       	or	r24, r25
    1bb2:	49 f1       	breq	.+82     	; 0x1c06 <_ZN21GsmCommunicationClass15checkConnectionEv+0xaa>
			gsmIsConnected = true;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	0c 5f       	subi	r16, 0xFC	; 252
    1bba:	1e 4f       	sbci	r17, 0xFE	; 254
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	80 83       	st	Z, r24
    1bc0:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    1bc4:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    1bc8:	02 80       	ldd	r0, Z+2	; 0x02
    1bca:	f3 81       	ldd	r31, Z+3	; 0x03
    1bcc:	e0 2d       	mov	r30, r0
    1bce:	40 e1       	ldi	r20, 0x10	; 16
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	60 eb       	ldi	r22, 0xB0	; 176
    1bd4:	72 e0       	ldi	r23, 0x02	; 2
    1bd6:	88 e3       	ldi	r24, 0x38	; 56
    1bd8:	93 e0       	ldi	r25, 0x03	; 3
    1bda:	09 95       	icall
			Serial.write("GSM Connected\n\n\n");
			if(gsmIsConnected == true && gsmIsConnectedOld == false){
    1bdc:	d8 01       	movw	r26, r16
    1bde:	8c 91       	ld	r24, X
    1be0:	88 23       	and	r24, r24
    1be2:	49 f0       	breq	.+18     	; 0x1bf6 <_ZN21GsmCommunicationClass15checkConnectionEv+0x9a>
    1be4:	fe 01       	movw	r30, r28
    1be6:	eb 5f       	subi	r30, 0xFB	; 251
    1be8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bea:	80 81       	ld	r24, Z
    1bec:	81 11       	cpse	r24, r1
    1bee:	03 c0       	rjmp	.+6      	; 0x1bf6 <_ZN21GsmCommunicationClass15checkConnectionEv+0x9a>
				setUpSmsMode();		// set up Sms Mode if connected
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <_ZN21GsmCommunicationClass12setUpSmsModeEv>
			}
			gsmIsConnectedOld = gsmIsConnected;
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	eb 5f       	subi	r30, 0xFB	; 251
    1bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfc:	cc 5f       	subi	r28, 0xFC	; 252
    1bfe:	de 4f       	sbci	r29, 0xFE	; 254
    1c00:	88 81       	ld	r24, Y
    1c02:	80 83       	st	Z, r24
    1c04:	09 c0       	rjmp	.+18     	; 0x1c18 <_ZN21GsmCommunicationClass15checkConnectionEv+0xbc>
			}else{
			gsmIsConnected = false;
    1c06:	cc 5f       	subi	r28, 0xFC	; 252
    1c08:	de 4f       	sbci	r29, 0xFE	; 254
    1c0a:	18 82       	st	Y, r1
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <_ZN21GsmCommunicationClass15checkConnectionEv+0xbc>
		}
	}else{
		checkConnectionTime++;
    1c0e:	2f 5f       	subi	r18, 0xFF	; 255
    1c10:	3f 4f       	sbci	r19, 0xFF	; 255
    1c12:	fc 01       	movw	r30, r24
    1c14:	33 83       	std	Z+3, r19	; 0x03
    1c16:	22 83       	std	Z+2, r18	; 0x02
	}
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	08 95       	ret

00001c22 <_ZN21GsmCommunicationClass9sendAtCmdEPc>:
	}
}


void GsmCommunicationClass::sendAtCmd(char atCmd[256]){
	GsmSerial->println(atCmd);
    1c22:	fc 01       	movw	r30, r24
    1c24:	80 81       	ld	r24, Z
    1c26:	91 81       	ldd	r25, Z+1	; 0x01
    1c28:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN5Print7printlnEPKc>
    1c2c:	08 95       	ret

00001c2e <_ZN13GpioPortClassC1EPh>:
/*                                                                           */
/*  History     : 10.11.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/

GpioPortClass::GpioPortClass(uint8_t *NewBaseAdress)
    1c2e:	fc 01       	movw	r30, r24
    1c30:	12 82       	std	Z+2, r1	; 0x02
    1c32:	11 82       	std	Z+1, r1	; 0x01
{
	   LedBase = NewBaseAdress;
    1c34:	74 83       	std	Z+4, r23	; 0x04
    1c36:	63 83       	std	Z+3, r22	; 0x03
	   ShadowLedRegister = 0;
    1c38:	15 82       	std	Z+5, r1	; 0x05
    1c3a:	16 82       	std	Z+6, r1	; 0x06
    1c3c:	17 82       	std	Z+7, r1	; 0x07
    1c3e:	10 86       	std	Z+8, r1	; 0x08

		// init GPIO
		DDRB	|=  (1 << LED_BUILTIN);	// set GPIO as Output
    1c40:	25 9a       	sbi	0x04, 5	; 4
		PORTB	&= ~(1 << LED_BUILTIN);	// clear bit
    1c42:	2d 98       	cbi	0x05, 5	; 5
		DDRB	|=  (1 << LED_STATE);	// set GPIO as Output
    1c44:	20 9a       	sbi	0x04, 0	; 4
		PORTB	&= ~(1 << LED_STATE);	// clear bit
    1c46:	28 98       	cbi	0x05, 0	; 5
		
		DDRD	|= (1 << LOCK);			// set GPIO as Output
    1c48:	55 9a       	sbi	0x0a, 5	; 10
		PORTD	&= ~(1 << LOCK);		// clear bit
    1c4a:	5d 98       	cbi	0x0b, 5	; 11
    1c4c:	08 95       	ret

00001c4e <main_ArduinoLockOpener>:
#include "CmdContactClass.h"



// the loop function runs over and over again forever
void main_ArduinoLockOpener() {
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	c1 5c       	subi	r28, 0xC1	; 193
    1c58:	d2 40       	sbci	r29, 0x02	; 2
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
	
	delay(2000);
    1c64:	60 ed       	ldi	r22, 0xD0	; 208
    1c66:	77 e0       	ldi	r23, 0x07	; 7
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <delay>
	
	SoftwareSerial GsmSerial(RX, TX); // RX TX
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	42 e0       	ldi	r20, 0x02	; 2
    1c74:	63 e0       	ldi	r22, 0x03	; 3
    1c76:	ce 01       	movw	r24, r28
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	0e 94 0a 08 	call	0x1014	; 0x1014 <_ZN14SoftwareSerialC1Ehhb>
	
	// creat Contact directories
	ContactDirectoryClass ContactDirectoryTemporary("Temporary");
    1c7e:	61 ec       	ldi	r22, 0xC1	; 193
    1c80:	72 e0       	ldi	r23, 0x02	; 2
    1c82:	ce 01       	movw	r24, r28
    1c84:	80 96       	adiw	r24, 0x20	; 32
    1c86:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN21ContactDirectoryClassC1EPc>
	ContactDirectoryClass ContactDirectoryPermanent("Permanent");
    1c8a:	6b ec       	ldi	r22, 0xCB	; 203
    1c8c:	72 e0       	ldi	r23, 0x02	; 2
    1c8e:	ce 01       	movw	r24, r28
    1c90:	8a 5a       	subi	r24, 0xAA	; 170
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	0e 94 0d 0a 	call	0x141a	; 0x141a <_ZN21ContactDirectoryClassC1EPc>
	
	GsmCommunicationClass GsmCommunication(&GsmSerial);
    1c98:	be 01       	movw	r22, r28
    1c9a:	6f 5f       	subi	r22, 0xFF	; 255
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	84 57       	subi	r24, 0x74	; 116
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <_ZN21GsmCommunicationClassC1EP14SoftwareSerial>
	AuthorizationHandlerClass AuthorizationHandler(&GsmCommunication);
    1ca8:	be 01       	movw	r22, r28
    1caa:	64 57       	subi	r22, 0x74	; 116
    1cac:	7f 4f       	sbci	r23, 0xFF	; 255
    1cae:	ce 01       	movw	r24, r28
    1cb0:	8d 56       	subi	r24, 0x6D	; 109
    1cb2:	9e 4f       	sbci	r25, 0xFE	; 254
    1cb4:	0e 94 c8 08 	call	0x1190	; 0x1190 <_ZN25AuthorizationHandlerClassC1EP21GsmCommunicationClass>
	CmdContactClass SmsHandler(&GsmCommunication,&AuthorizationHandler);
    1cb8:	ae 01       	movw	r20, r28
    1cba:	4d 56       	subi	r20, 0x6D	; 109
    1cbc:	5e 4f       	sbci	r21, 0xFE	; 254
    1cbe:	be 01       	movw	r22, r28
    1cc0:	64 57       	subi	r22, 0x74	; 116
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	8b 56       	subi	r24, 0x6B	; 107
    1cc8:	9e 4f       	sbci	r25, 0xFE	; 254
    1cca:	0e 94 3c 09 	call	0x1278	; 0x1278 <_ZN15CmdContactClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>
	

	
	EepromClass Eeprom1;
    1cce:	ce 01       	movw	r24, r28
    1cd0:	82 55       	subi	r24, 0x52	; 82
    1cd2:	9d 4f       	sbci	r25, 0xFD	; 253
    1cd4:	0e 94 3d 0b 	call	0x167a	; 0x167a <_ZN11EepromClassC1Ev>
	Eeprom1.clearEeprom();
    1cd8:	ce 01       	movw	r24, r28
    1cda:	82 55       	subi	r24, 0x52	; 82
    1cdc:	9d 4f       	sbci	r25, 0xFD	; 253
    1cde:	0e 94 90 0c 	call	0x1920	; 0x1920 <_ZN11EepromClass11clearEepromEv>
	
	Eeprom1.eepromToContactDirectory(&ContactDirectoryPermanent); // make permanent List out of Eeprom
    1ce2:	be 01       	movw	r22, r28
    1ce4:	6a 5a       	subi	r22, 0xAA	; 170
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	ce 01       	movw	r24, r28
    1cea:	82 55       	subi	r24, 0x52	; 82
    1cec:	9d 4f       	sbci	r25, 0xFD	; 253
    1cee:	0e 94 55 0b 	call	0x16aa	; 0x16aa <_ZN11EepromClass24eepromToContactDirectoryEP21ContactDirectoryClass>
	
	ContactDirectoryPermanent.addContact("Michael Streit","786750902",PERMANENT);
    1cf2:	22 e0       	ldi	r18, 0x02	; 2
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	45 ed       	ldi	r20, 0xD5	; 213
    1cf8:	52 e0       	ldi	r21, 0x02	; 2
    1cfa:	6f ed       	ldi	r22, 0xDF	; 223
    1cfc:	72 e0       	ldi	r23, 0x02	; 2
    1cfe:	ce 01       	movw	r24, r28
    1d00:	8a 5a       	subi	r24, 0xAA	; 170
    1d02:	9f 4f       	sbci	r25, 0xFF	; 255
    1d04:	0e 94 33 0a 	call	0x1466	; 0x1466 <_ZN21ContactDirectoryClass10addContactEPcS0_i>

	
	//ContactDirectoryTemporary.addContact("Martin Streit","564418910",TEMPORARY);
	
	
    DDRB = 0b00100000; // configure pin 7 of PORTB as output (digital pin 13 on the Arduino Mega2560) 
    1d08:	80 e2       	ldi	r24, 0x20	; 32
    1d0a:	84 b9       	out	0x04, r24	; 4
	GpioPortClass GpioPortB((uint8_t*)0x25);
    1d0c:	65 e2       	ldi	r22, 0x25	; 37
    1d0e:	70 e0       	ldi	r23, 0x00	; 0
    1d10:	ce 01       	movw	r24, r28
    1d12:	80 55       	subi	r24, 0x50	; 80
    1d14:	9d 4f       	sbci	r25, 0xFD	; 253
    1d16:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN13GpioPortClassC1EPh>
	GpioPortClass GpioPortD((uint8_t*)0x2B);
    1d1a:	6b e2       	ldi	r22, 0x2B	; 43
    1d1c:	70 e0       	ldi	r23, 0x00	; 0
    1d1e:	ce 01       	movw	r24, r28
    1d20:	87 54       	subi	r24, 0x47	; 71
    1d22:	9d 4f       	sbci	r25, 0xFD	; 253
    1d24:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <_ZN13GpioPortClassC1EPh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d28:	2f ef       	ldi	r18, 0xFF	; 255
    1d2a:	83 ed       	ldi	r24, 0xD3	; 211
    1d2c:	90 e3       	ldi	r25, 0x30	; 48
    1d2e:	21 50       	subi	r18, 0x01	; 1
    1d30:	80 40       	sbci	r24, 0x00	; 0
    1d32:	90 40       	sbci	r25, 0x00	; 0
    1d34:	e1 f7       	brne	.-8      	; 0x1d2e <main_ArduinoLockOpener+0xe0>
    1d36:	00 c0       	rjmp	.+0      	; 0x1d38 <main_ArduinoLockOpener+0xea>
    1d38:	00 00       	nop
    1d3a:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    1d3e:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    1d42:	02 80       	ldd	r0, Z+2	; 0x02
    1d44:	f3 81       	ldd	r31, Z+3	; 0x03
    1d46:	e0 2d       	mov	r30, r0
    1d48:	46 e0       	ldi	r20, 0x06	; 6
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	6e ee       	ldi	r22, 0xEE	; 238
    1d4e:	72 e0       	ldi	r23, 0x02	; 2
    1d50:	88 e3       	ldi	r24, 0x38	; 56
    1d52:	93 e0       	ldi	r25, 0x03	; 3
    1d54:	09 95       	icall
    1d56:	2f ef       	ldi	r18, 0xFF	; 255
    1d58:	83 ed       	ldi	r24, 0xD3	; 211
    1d5a:	90 e3       	ldi	r25, 0x30	; 48
    1d5c:	21 50       	subi	r18, 0x01	; 1
    1d5e:	80 40       	sbci	r24, 0x00	; 0
    1d60:	90 40       	sbci	r25, 0x00	; 0
    1d62:	e1 f7       	brne	.-8      	; 0x1d5c <main_ArduinoLockOpener+0x10e>
    1d64:	00 c0       	rjmp	.+0      	; 0x1d66 <main_ArduinoLockOpener+0x118>
    1d66:	00 00       	nop
	Serial.write("Start\n");
	_delay_ms(1000);
	

    for(;;){
		GsmCommunication.checkConnection();	
    1d68:	ce 01       	movw	r24, r28
    1d6a:	84 57       	subi	r24, 0x74	; 116
    1d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_ZN21GsmCommunicationClass15checkConnectionEv>
		GsmCommunication.readSerial();	
    1d72:	ce 01       	movw	r24, r28
    1d74:	84 57       	subi	r24, 0x74	; 116
    1d76:	9f 4f       	sbci	r25, 0xFF	; 255
    1d78:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN21GsmCommunicationClass10readSerialEv>
		SmsHandler.handleReceivedSms(&ContactDirectoryTemporary, &ContactDirectoryPermanent);
    1d7c:	ae 01       	movw	r20, r28
    1d7e:	4a 5a       	subi	r20, 0xAA	; 170
    1d80:	5f 4f       	sbci	r21, 0xFF	; 255
    1d82:	be 01       	movw	r22, r28
    1d84:	60 5e       	subi	r22, 0xE0	; 224
    1d86:	7f 4f       	sbci	r23, 0xFF	; 255
    1d88:	ce 01       	movw	r24, r28
    1d8a:	8b 56       	subi	r24, 0x6B	; 107
    1d8c:	9e 4f       	sbci	r25, 0xFE	; 254
    1d8e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_>
		SmsHandler.executeSmsCmd(&ContactDirectoryTemporary,&ContactDirectoryPermanent);
    1d92:	ae 01       	movw	r20, r28
    1d94:	4a 5a       	subi	r20, 0xAA	; 170
    1d96:	5f 4f       	sbci	r21, 0xFF	; 255
    1d98:	be 01       	movw	r22, r28
    1d9a:	60 5e       	subi	r22, 0xE0	; 224
    1d9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9e:	ce 01       	movw	r24, r28
    1da0:	8b 56       	subi	r24, 0x6B	; 107
    1da2:	9e 4f       	sbci	r25, 0xFE	; 254
    1da4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <_ZN15CmdContactClass13executeSmsCmdEP21ContactDirectoryClassS1_>
		AuthorizationHandler.handleReceivedCall(&ContactDirectoryTemporary,&ContactDirectoryPermanent);
    1da8:	ae 01       	movw	r20, r28
    1daa:	4a 5a       	subi	r20, 0xAA	; 170
    1dac:	5f 4f       	sbci	r21, 0xFF	; 255
    1dae:	be 01       	movw	r22, r28
    1db0:	60 5e       	subi	r22, 0xE0	; 224
    1db2:	7f 4f       	sbci	r23, 0xFF	; 255
    1db4:	ce 01       	movw	r24, r28
    1db6:	8d 56       	subi	r24, 0x6D	; 109
    1db8:	9e 4f       	sbci	r25, 0xFE	; 254
    1dba:	0e 94 fe 08 	call	0x11fc	; 0x11fc <_ZN25AuthorizationHandlerClass18handleReceivedCallEP21ContactDirectoryClassS1_>
    1dbe:	2f ef       	ldi	r18, 0xFF	; 255
    1dc0:	81 ee       	ldi	r24, 0xE1	; 225
    1dc2:	94 e0       	ldi	r25, 0x04	; 4
    1dc4:	21 50       	subi	r18, 0x01	; 1
    1dc6:	80 40       	sbci	r24, 0x00	; 0
    1dc8:	90 40       	sbci	r25, 0x00	; 0
    1dca:	e1 f7       	brne	.-8      	; 0x1dc4 <main_ArduinoLockOpener+0x176>
    1dcc:	00 c0       	rjmp	.+0      	; 0x1dce <main_ArduinoLockOpener+0x180>
    1dce:	00 00       	nop
    1dd0:	cb cf       	rjmp	.-106    	; 0x1d68 <main_ArduinoLockOpener+0x11a>

00001dd2 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass>:
	GsmCommunication = NewGsmCommunication;
	AuthorizationHandler = NewAuthorizationHandler;
} //SmsHandlerClass

// default destructor
SmsHandlerClass::~SmsHandlerClass()
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	34 96       	adiw	r30, 0x04	; 4
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	31 e0       	ldi	r19, 0x01	; 1
    1dde:	df 01       	movw	r26, r30
    1de0:	e9 01       	movw	r28, r18
    1de2:	1d 92       	st	X+, r1
    1de4:	21 97       	sbiw	r28, 0x01	; 1
    1de6:	e9 f7       	brne	.-6      	; 0x1de2 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass+0x10>
    1de8:	f3 95       	inc	r31
    1dea:	10 82       	st	Z, r1
    1dec:	31 96       	adiw	r30, 0x01	; 1
    1dee:	24 e1       	ldi	r18, 0x14	; 20
    1df0:	df 01       	movw	r26, r30
    1df2:	1d 92       	st	X+, r1
    1df4:	2a 95       	dec	r18
    1df6:	e9 f7       	brne	.-6      	; 0x1df2 <_ZN15SmsHandlerClassC1EP21GsmCommunicationClassP25AuthorizationHandlerClass+0x20>
    1df8:	ec 01       	movw	r28, r24
    1dfa:	79 83       	std	Y+1, r23	; 0x01
    1dfc:	68 83       	st	Y, r22
    1dfe:	5b 83       	std	Y+3, r21	; 0x03
    1e00:	4a 83       	std	Y+2, r20	; 0x02
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	08 95       	ret

00001e08 <_ZN15SmsHandlerClass7readSmsEPc>:
	}else{
		newSmsReceived = false;
	}
}

void SmsHandlerClass::readSms(char *buffer){
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	ec 01       	movw	r28, r24
    1e0e:	fb 01       	movw	r30, r22
    1e10:	33 97       	sbiw	r30, 0x03	; 3
	int textStart = 0;
	int i = 0;
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	70 e0       	ldi	r23, 0x00	; 0
		newSmsReceived = false;
	}
}

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	50 e0       	ldi	r21, 0x00	; 0
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
			textStart = 1;
    1e1a:	31 e0       	ldi	r19, 0x01	; 1
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	df 01       	movw	r26, r30

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
    1e20:	93 81       	ldd	r25, Z+3	; 0x03
    1e22:	99 23       	and	r25, r25
    1e24:	b9 f0       	breq	.+46     	; 0x1e54 <_ZN15SmsHandlerClass7readSmsEPc+0x4c>
    1e26:	31 96       	adiw	r30, 0x01	; 1
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
    1e28:	2c 91       	ld	r18, X
    1e2a:	22 32       	cpi	r18, 0x22	; 34
    1e2c:	31 f4       	brne	.+12     	; 0x1e3a <_ZN15SmsHandlerClass7readSmsEPc+0x32>
    1e2e:	20 81       	ld	r18, Z
    1e30:	2d 30       	cpi	r18, 0x0D	; 13
    1e32:	19 f4       	brne	.+6      	; 0x1e3a <_ZN15SmsHandlerClass7readSmsEPc+0x32>
    1e34:	21 81       	ldd	r18, Z+1	; 0x01
    1e36:	2a 30       	cpi	r18, 0x0A	; 10
    1e38:	19 f0       	breq	.+6      	; 0x1e40 <_ZN15SmsHandlerClass7readSmsEPc+0x38>
    1e3a:	41 30       	cpi	r20, 0x01	; 1
    1e3c:	51 05       	cpc	r21, r1
    1e3e:	79 f7       	brne	.-34     	; 0x1e1e <_ZN15SmsHandlerClass7readSmsEPc+0x16>
			textStart = 1;
			smsMsg[i]=buffer[u];
    1e40:	de 01       	movw	r26, r28
    1e42:	a6 0f       	add	r26, r22
    1e44:	b7 1f       	adc	r27, r23
    1e46:	14 96       	adiw	r26, 0x04	; 4
    1e48:	9c 93       	st	X, r25
			i++;
    1e4a:	6f 5f       	subi	r22, 0xFF	; 255
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
		// trigger start of SMS message
		if(((buffer[u-3]=='"')&&(buffer[u-2]==13)&&(buffer[u-1]==10))|| (textStart == 1)){
			textStart = 1;
    1e4e:	43 2f       	mov	r20, r19
    1e50:	58 2f       	mov	r21, r24

void SmsHandlerClass::readSms(char *buffer){
	int textStart = 0;
	int i = 0;
	
	for(int u=0;(buffer[u]!='\0')||((buffer[u]=='A')&&(buffer[u+1]=='T')&&(buffer[u+2]=='+')); u++){
    1e52:	e5 cf       	rjmp	.-54     	; 0x1e1e <_ZN15SmsHandlerClass7readSmsEPc+0x16>
			textStart = 1;
			smsMsg[i]=buffer[u];
			i++;
		}
	}
	smsMsg[i]='\0';	
    1e54:	fe 01       	movw	r30, r28
    1e56:	e6 0f       	add	r30, r22
    1e58:	f7 1f       	adc	r31, r23
    1e5a:	14 82       	std	Z+4, r1	; 0x04
}
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	08 95       	ret

00001e62 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc>:

void SmsHandlerClass::isolateSmsSenderPhoneNr(char *buffer){
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	ec 01       	movw	r28, r24
    1e6c:	cb 01       	movw	r24, r22
    char *retBuf;
    int u = 0;
    retBuf = strstr(buffer,"+CMT:");		// find beginning of sms sender
    1e6e:	65 ef       	ldi	r22, 0xF5	; 245
    1e70:	72 e0       	ldi	r23, 0x02	; 2
    1e72:	0e 94 2e 11 	call	0x225c	; 0x225c <strstr>
    1e76:	fc 01       	movw	r30, r24
    if(retBuf != NULL){						// if SMS sender Nr received
    1e78:	89 2b       	or	r24, r25
    1e7a:	c9 f0       	breq	.+50     	; 0x1eae <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x4c>
        for(u=0; retBuf[u+7] !='\"';u++){	// fill Nr into variable until end of Nr reached
    1e7c:	97 81       	ldd	r25, Z+7	; 0x07
    1e7e:	92 32       	cpi	r25, 0x22	; 34
    1e80:	69 f0       	breq	.+26     	; 0x1e9c <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x3a>
    1e82:	de 01       	movw	r26, r28
    1e84:	ab 5f       	subi	r26, 0xFB	; 251
    1e86:	be 4f       	sbci	r27, 0xFE	; 254
    1e88:	38 96       	adiw	r30, 0x08	; 8
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
            smsSenderNr[u] = retBuf[u+7];
    1e8e:	9d 93       	st	X+, r25
void SmsHandlerClass::isolateSmsSenderPhoneNr(char *buffer){
    char *retBuf;
    int u = 0;
    retBuf = strstr(buffer,"+CMT:");		// find beginning of sms sender
    if(retBuf != NULL){						// if SMS sender Nr received
        for(u=0; retBuf[u+7] !='\"';u++){	// fill Nr into variable until end of Nr reached
    1e90:	2f 5f       	subi	r18, 0xFF	; 255
    1e92:	3f 4f       	sbci	r19, 0xFF	; 255
    1e94:	91 91       	ld	r25, Z+
    1e96:	92 32       	cpi	r25, 0x22	; 34
    1e98:	d1 f7       	brne	.-12     	; 0x1e8e <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x2c>
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x3e>
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
            smsSenderNr[u] = retBuf[u+7];
        }
        smsSenderNr[u]='\0';
    1ea0:	2c 0f       	add	r18, r28
    1ea2:	3d 1f       	adc	r19, r29
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	eb 5f       	subi	r30, 0xFB	; 251
    1ea8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eaa:	10 82       	st	Z, r1
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc+0x54>
    }else{
        smsSenderNr[u]='\0';
    1eae:	fe 01       	movw	r30, r28
    1eb0:	eb 5f       	subi	r30, 0xFB	; 251
    1eb2:	fe 4f       	sbci	r31, 0xFE	; 254
    1eb4:	10 82       	st	Z, r1
    1eb6:	08 e3       	ldi	r16, 0x38	; 56
    1eb8:	13 e0       	ldi	r17, 0x03	; 3
    1eba:	d8 01       	movw	r26, r16
    1ebc:	ed 91       	ld	r30, X+
    1ebe:	fc 91       	ld	r31, X
    1ec0:	02 80       	ldd	r0, Z+2	; 0x02
    1ec2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ec4:	e0 2d       	mov	r30, r0
    1ec6:	4c e0       	ldi	r20, 0x0C	; 12
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	6b ef       	ldi	r22, 0xFB	; 251
    1ecc:	72 e0       	ldi	r23, 0x02	; 2
    1ece:	c8 01       	movw	r24, r16
    1ed0:	09 95       	icall
    }
	
	// Display SMS sender
	Serial.write("SMS sender: ");
	GsmCommunication->displayString(smsSenderNr);
    1ed2:	be 01       	movw	r22, r28
    1ed4:	6b 5f       	subi	r22, 0xFB	; 251
    1ed6:	7e 4f       	sbci	r23, 0xFE	; 254
    1ed8:	88 81       	ld	r24, Y
    1eda:	99 81       	ldd	r25, Y+1	; 0x01
    1edc:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZN21GsmCommunicationClass13displayStringEPc>
    1ee0:	d8 01       	movw	r26, r16
    1ee2:	ed 91       	ld	r30, X+
    1ee4:	fc 91       	ld	r31, X
    1ee6:	02 80       	ldd	r0, Z+2	; 0x02
    1ee8:	f3 81       	ldd	r31, Z+3	; 0x03
    1eea:	e0 2d       	mov	r30, r0
    1eec:	42 e0       	ldi	r20, 0x02	; 2
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	6e eb       	ldi	r22, 0xBE	; 190
    1ef2:	72 e0       	ldi	r23, 0x02	; 2
    1ef4:	c8 01       	movw	r24, r16
    1ef6:	09 95       	icall
	Serial.write("\n\n");	
}
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	1f 91       	pop	r17
    1efe:	0f 91       	pop	r16
    1f00:	08 95       	ret

00001f02 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_>:
/*                                                                           */
/*  History     : 30.03.2021  IO  Created                                    */
/*                                                                           */
/*****************************************************************************/

void SmsHandlerClass::handleReceivedSms(ContactDirectoryClass *ContactDirectoryTemporary, ContactDirectoryClass *ContactDirectoryPermanent){
    1f02:	cf 92       	push	r12
    1f04:	df 92       	push	r13
    1f06:	ef 92       	push	r14
    1f08:	ff 92       	push	r15
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	ec 01       	movw	r28, r24
    1f14:	7b 01       	movw	r14, r22
    1f16:	6a 01       	movw	r12, r20
	
	if(strstr(GsmCommunication->receiveBuffer,"+CMT:") != NULL){	// if SMS received
    1f18:	08 81       	ld	r16, Y
    1f1a:	19 81       	ldd	r17, Y+1	; 0x01
    1f1c:	0c 5f       	subi	r16, 0xFC	; 252
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	65 ef       	ldi	r22, 0xF5	; 245
    1f22:	72 e0       	ldi	r23, 0x02	; 2
    1f24:	c8 01       	movw	r24, r16
    1f26:	0e 94 2e 11 	call	0x225c	; 0x225c <strstr>
    1f2a:	89 2b       	or	r24, r25
    1f2c:	d9 f1       	breq	.+118    	; 0x1fa4 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_+0xa2>
		
		isolateSmsSenderPhoneNr(&(GsmCommunication->receiveBuffer[0]));	
    1f2e:	b8 01       	movw	r22, r16
    1f30:	ce 01       	movw	r24, r28
    1f32:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_ZN15SmsHandlerClass23isolateSmsSenderPhoneNrEPc>
		
		
		
		// check Authorization
		if(AuthorizationHandler->checkAuthorization((char*)&smsSenderNr,ContactDirectoryTemporary,ContactDirectoryPermanent) == 1){	// check if sms seder is authorized
    1f36:	96 01       	movw	r18, r12
    1f38:	a7 01       	movw	r20, r14
    1f3a:	be 01       	movw	r22, r28
    1f3c:	6b 5f       	subi	r22, 0xFB	; 251
    1f3e:	7e 4f       	sbci	r23, 0xFE	; 254
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	9b 81       	ldd	r25, Y+3	; 0x03
    1f44:	0e 94 cc 08 	call	0x1198	; 0x1198 <_ZN25AuthorizationHandlerClass18checkAuthorizationEPcP21ContactDirectoryClassS2_>
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	d1 f4       	brne	.+52     	; 0x1f80 <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_+0x7e>
    1f4c:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    1f50:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    1f54:	02 80       	ldd	r0, Z+2	; 0x02
    1f56:	f3 81       	ldd	r31, Z+3	; 0x03
    1f58:	e0 2d       	mov	r30, r0
    1f5a:	48 e1       	ldi	r20, 0x18	; 24
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	68 e0       	ldi	r22, 0x08	; 8
    1f60:	73 e0       	ldi	r23, 0x03	; 3
    1f62:	88 e3       	ldi	r24, 0x38	; 56
    1f64:	93 e0       	ldi	r25, 0x03	; 3
    1f66:	09 95       	icall
			Serial.write("SMS sender AUTHORIZED !\n");
			
			// read sms Msg out of the receive Buffer
			readSms((char*)&GsmCommunication->receiveBuffer);
    1f68:	68 81       	ld	r22, Y
    1f6a:	79 81       	ldd	r23, Y+1	; 0x01
    1f6c:	6c 5f       	subi	r22, 0xFC	; 252
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f70:	ce 01       	movw	r24, r28
    1f72:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <_ZN15SmsHandlerClass7readSmsEPc>
			newSmsReceived = true;
    1f76:	cc 5f       	subi	r28, 0xFC	; 252
    1f78:	de 4f       	sbci	r29, 0xFE	; 254
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	88 83       	st	Y, r24
    1f7e:	15 c0       	rjmp	.+42     	; 0x1faa <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_+0xa8>
    1f80:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <__data_end>
    1f84:	f0 91 39 03 	lds	r31, 0x0339	; 0x800339 <__data_end+0x1>
    1f88:	02 80       	ldd	r0, Z+2	; 0x02
    1f8a:	f3 81       	ldd	r31, Z+3	; 0x03
    1f8c:	e0 2d       	mov	r30, r0
    1f8e:	45 e1       	ldi	r20, 0x15	; 21
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	61 e2       	ldi	r22, 0x21	; 33
    1f94:	73 e0       	ldi	r23, 0x03	; 3
    1f96:	88 e3       	ldi	r24, 0x38	; 56
    1f98:	93 e0       	ldi	r25, 0x03	; 3
    1f9a:	09 95       	icall
			// handle sms commands
		}else{
			Serial.write("SMS sender DECLINED \n");
			newSmsReceived = false;			// set flag for execute Comands
    1f9c:	cc 5f       	subi	r28, 0xFC	; 252
    1f9e:	de 4f       	sbci	r29, 0xFE	; 254
    1fa0:	18 82       	st	Y, r1
    1fa2:	03 c0       	rjmp	.+6      	; 0x1faa <_ZN15SmsHandlerClass17handleReceivedSmsEP21ContactDirectoryClassS1_+0xa8>
		}
	}else{
		newSmsReceived = false;
    1fa4:	cc 5f       	subi	r28, 0xFC	; 252
    1fa6:	de 4f       	sbci	r29, 0xFE	; 254
    1fa8:	18 82       	st	Y, r1
	}
}
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	ff 90       	pop	r15
    1fb4:	ef 90       	pop	r14
    1fb6:	df 90       	pop	r13
    1fb8:	cf 90       	pop	r12
    1fba:	08 95       	ret

00001fbc <__udivmodsi4>:
    1fbc:	a1 e2       	ldi	r26, 0x21	; 33
    1fbe:	1a 2e       	mov	r1, r26
    1fc0:	aa 1b       	sub	r26, r26
    1fc2:	bb 1b       	sub	r27, r27
    1fc4:	fd 01       	movw	r30, r26
    1fc6:	0d c0       	rjmp	.+26     	; 0x1fe2 <__udivmodsi4_ep>

00001fc8 <__udivmodsi4_loop>:
    1fc8:	aa 1f       	adc	r26, r26
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	ee 1f       	adc	r30, r30
    1fce:	ff 1f       	adc	r31, r31
    1fd0:	a2 17       	cp	r26, r18
    1fd2:	b3 07       	cpc	r27, r19
    1fd4:	e4 07       	cpc	r30, r20
    1fd6:	f5 07       	cpc	r31, r21
    1fd8:	20 f0       	brcs	.+8      	; 0x1fe2 <__udivmodsi4_ep>
    1fda:	a2 1b       	sub	r26, r18
    1fdc:	b3 0b       	sbc	r27, r19
    1fde:	e4 0b       	sbc	r30, r20
    1fe0:	f5 0b       	sbc	r31, r21

00001fe2 <__udivmodsi4_ep>:
    1fe2:	66 1f       	adc	r22, r22
    1fe4:	77 1f       	adc	r23, r23
    1fe6:	88 1f       	adc	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	1a 94       	dec	r1
    1fec:	69 f7       	brne	.-38     	; 0x1fc8 <__udivmodsi4_loop>
    1fee:	60 95       	com	r22
    1ff0:	70 95       	com	r23
    1ff2:	80 95       	com	r24
    1ff4:	90 95       	com	r25
    1ff6:	9b 01       	movw	r18, r22
    1ff8:	ac 01       	movw	r20, r24
    1ffa:	bd 01       	movw	r22, r26
    1ffc:	cf 01       	movw	r24, r30
    1ffe:	08 95       	ret

00002000 <__tablejump2__>:
    2000:	ee 0f       	add	r30, r30
    2002:	ff 1f       	adc	r31, r31
    2004:	05 90       	lpm	r0, Z+
    2006:	f4 91       	lpm	r31, Z
    2008:	e0 2d       	mov	r30, r0
    200a:	09 94       	ijmp

0000200c <malloc>:
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	82 30       	cpi	r24, 0x02	; 2
    2016:	91 05       	cpc	r25, r1
    2018:	10 f4       	brcc	.+4      	; 0x201e <malloc+0x12>
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	e0 91 f1 04 	lds	r30, 0x04F1	; 0x8004f1 <__flp>
    2022:	f0 91 f2 04 	lds	r31, 0x04F2	; 0x8004f2 <__flp+0x1>
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	30 97       	sbiw	r30, 0x00	; 0
    2030:	19 f1       	breq	.+70     	; 0x2078 <malloc+0x6c>
    2032:	40 81       	ld	r20, Z
    2034:	51 81       	ldd	r21, Z+1	; 0x01
    2036:	02 81       	ldd	r16, Z+2	; 0x02
    2038:	13 81       	ldd	r17, Z+3	; 0x03
    203a:	48 17       	cp	r20, r24
    203c:	59 07       	cpc	r21, r25
    203e:	c8 f0       	brcs	.+50     	; 0x2072 <malloc+0x66>
    2040:	84 17       	cp	r24, r20
    2042:	95 07       	cpc	r25, r21
    2044:	69 f4       	brne	.+26     	; 0x2060 <malloc+0x54>
    2046:	10 97       	sbiw	r26, 0x00	; 0
    2048:	31 f0       	breq	.+12     	; 0x2056 <malloc+0x4a>
    204a:	12 96       	adiw	r26, 0x02	; 2
    204c:	0c 93       	st	X, r16
    204e:	12 97       	sbiw	r26, 0x02	; 2
    2050:	13 96       	adiw	r26, 0x03	; 3
    2052:	1c 93       	st	X, r17
    2054:	27 c0       	rjmp	.+78     	; 0x20a4 <malloc+0x98>
    2056:	00 93 f1 04 	sts	0x04F1, r16	; 0x8004f1 <__flp>
    205a:	10 93 f2 04 	sts	0x04F2, r17	; 0x8004f2 <__flp+0x1>
    205e:	22 c0       	rjmp	.+68     	; 0x20a4 <malloc+0x98>
    2060:	21 15       	cp	r18, r1
    2062:	31 05       	cpc	r19, r1
    2064:	19 f0       	breq	.+6      	; 0x206c <malloc+0x60>
    2066:	42 17       	cp	r20, r18
    2068:	53 07       	cpc	r21, r19
    206a:	18 f4       	brcc	.+6      	; 0x2072 <malloc+0x66>
    206c:	9a 01       	movw	r18, r20
    206e:	bd 01       	movw	r22, r26
    2070:	ef 01       	movw	r28, r30
    2072:	df 01       	movw	r26, r30
    2074:	f8 01       	movw	r30, r16
    2076:	db cf       	rjmp	.-74     	; 0x202e <malloc+0x22>
    2078:	21 15       	cp	r18, r1
    207a:	31 05       	cpc	r19, r1
    207c:	f9 f0       	breq	.+62     	; 0x20bc <malloc+0xb0>
    207e:	28 1b       	sub	r18, r24
    2080:	39 0b       	sbc	r19, r25
    2082:	24 30       	cpi	r18, 0x04	; 4
    2084:	31 05       	cpc	r19, r1
    2086:	80 f4       	brcc	.+32     	; 0x20a8 <malloc+0x9c>
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	9b 81       	ldd	r25, Y+3	; 0x03
    208c:	61 15       	cp	r22, r1
    208e:	71 05       	cpc	r23, r1
    2090:	21 f0       	breq	.+8      	; 0x209a <malloc+0x8e>
    2092:	fb 01       	movw	r30, r22
    2094:	93 83       	std	Z+3, r25	; 0x03
    2096:	82 83       	std	Z+2, r24	; 0x02
    2098:	04 c0       	rjmp	.+8      	; 0x20a2 <malloc+0x96>
    209a:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <__flp+0x1>
    209e:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <__flp>
    20a2:	fe 01       	movw	r30, r28
    20a4:	32 96       	adiw	r30, 0x02	; 2
    20a6:	44 c0       	rjmp	.+136    	; 0x2130 <malloc+0x124>
    20a8:	fe 01       	movw	r30, r28
    20aa:	e2 0f       	add	r30, r18
    20ac:	f3 1f       	adc	r31, r19
    20ae:	81 93       	st	Z+, r24
    20b0:	91 93       	st	Z+, r25
    20b2:	22 50       	subi	r18, 0x02	; 2
    20b4:	31 09       	sbc	r19, r1
    20b6:	39 83       	std	Y+1, r19	; 0x01
    20b8:	28 83       	st	Y, r18
    20ba:	3a c0       	rjmp	.+116    	; 0x2130 <malloc+0x124>
    20bc:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <__brkval>
    20c0:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <__brkval+0x1>
    20c4:	23 2b       	or	r18, r19
    20c6:	41 f4       	brne	.+16     	; 0x20d8 <malloc+0xcc>
    20c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    20cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    20d0:	30 93 f0 04 	sts	0x04F0, r19	; 0x8004f0 <__brkval+0x1>
    20d4:	20 93 ef 04 	sts	0x04EF, r18	; 0x8004ef <__brkval>
    20d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    20dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20e0:	21 15       	cp	r18, r1
    20e2:	31 05       	cpc	r19, r1
    20e4:	41 f4       	brne	.+16     	; 0x20f6 <malloc+0xea>
    20e6:	2d b7       	in	r18, 0x3d	; 61
    20e8:	3e b7       	in	r19, 0x3e	; 62
    20ea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    20ee:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    20f2:	24 1b       	sub	r18, r20
    20f4:	35 0b       	sbc	r19, r21
    20f6:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <__brkval>
    20fa:	f0 91 f0 04 	lds	r31, 0x04F0	; 0x8004f0 <__brkval+0x1>
    20fe:	e2 17       	cp	r30, r18
    2100:	f3 07       	cpc	r31, r19
    2102:	a0 f4       	brcc	.+40     	; 0x212c <malloc+0x120>
    2104:	2e 1b       	sub	r18, r30
    2106:	3f 0b       	sbc	r19, r31
    2108:	28 17       	cp	r18, r24
    210a:	39 07       	cpc	r19, r25
    210c:	78 f0       	brcs	.+30     	; 0x212c <malloc+0x120>
    210e:	ac 01       	movw	r20, r24
    2110:	4e 5f       	subi	r20, 0xFE	; 254
    2112:	5f 4f       	sbci	r21, 0xFF	; 255
    2114:	24 17       	cp	r18, r20
    2116:	35 07       	cpc	r19, r21
    2118:	48 f0       	brcs	.+18     	; 0x212c <malloc+0x120>
    211a:	4e 0f       	add	r20, r30
    211c:	5f 1f       	adc	r21, r31
    211e:	50 93 f0 04 	sts	0x04F0, r21	; 0x8004f0 <__brkval+0x1>
    2122:	40 93 ef 04 	sts	0x04EF, r20	; 0x8004ef <__brkval>
    2126:	81 93       	st	Z+, r24
    2128:	91 93       	st	Z+, r25
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <malloc+0x124>
    212c:	e0 e0       	ldi	r30, 0x00	; 0
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	cf 01       	movw	r24, r30
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	08 95       	ret

0000213c <free>:
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	09 f4       	brne	.+2      	; 0x2146 <free+0xa>
    2144:	81 c0       	rjmp	.+258    	; 0x2248 <free+0x10c>
    2146:	fc 01       	movw	r30, r24
    2148:	32 97       	sbiw	r30, 0x02	; 2
    214a:	13 82       	std	Z+3, r1	; 0x03
    214c:	12 82       	std	Z+2, r1	; 0x02
    214e:	a0 91 f1 04 	lds	r26, 0x04F1	; 0x8004f1 <__flp>
    2152:	b0 91 f2 04 	lds	r27, 0x04F2	; 0x8004f2 <__flp+0x1>
    2156:	10 97       	sbiw	r26, 0x00	; 0
    2158:	81 f4       	brne	.+32     	; 0x217a <free+0x3e>
    215a:	20 81       	ld	r18, Z
    215c:	31 81       	ldd	r19, Z+1	; 0x01
    215e:	82 0f       	add	r24, r18
    2160:	93 1f       	adc	r25, r19
    2162:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <__brkval>
    2166:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <__brkval+0x1>
    216a:	28 17       	cp	r18, r24
    216c:	39 07       	cpc	r19, r25
    216e:	51 f5       	brne	.+84     	; 0x21c4 <free+0x88>
    2170:	f0 93 f0 04 	sts	0x04F0, r31	; 0x8004f0 <__brkval+0x1>
    2174:	e0 93 ef 04 	sts	0x04EF, r30	; 0x8004ef <__brkval>
    2178:	67 c0       	rjmp	.+206    	; 0x2248 <free+0x10c>
    217a:	ed 01       	movw	r28, r26
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	ce 17       	cp	r28, r30
    2182:	df 07       	cpc	r29, r31
    2184:	40 f4       	brcc	.+16     	; 0x2196 <free+0x5a>
    2186:	4a 81       	ldd	r20, Y+2	; 0x02
    2188:	5b 81       	ldd	r21, Y+3	; 0x03
    218a:	9e 01       	movw	r18, r28
    218c:	41 15       	cp	r20, r1
    218e:	51 05       	cpc	r21, r1
    2190:	f1 f0       	breq	.+60     	; 0x21ce <free+0x92>
    2192:	ea 01       	movw	r28, r20
    2194:	f5 cf       	rjmp	.-22     	; 0x2180 <free+0x44>
    2196:	d3 83       	std	Z+3, r29	; 0x03
    2198:	c2 83       	std	Z+2, r28	; 0x02
    219a:	40 81       	ld	r20, Z
    219c:	51 81       	ldd	r21, Z+1	; 0x01
    219e:	84 0f       	add	r24, r20
    21a0:	95 1f       	adc	r25, r21
    21a2:	c8 17       	cp	r28, r24
    21a4:	d9 07       	cpc	r29, r25
    21a6:	59 f4       	brne	.+22     	; 0x21be <free+0x82>
    21a8:	88 81       	ld	r24, Y
    21aa:	99 81       	ldd	r25, Y+1	; 0x01
    21ac:	84 0f       	add	r24, r20
    21ae:	95 1f       	adc	r25, r21
    21b0:	02 96       	adiw	r24, 0x02	; 2
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ba:	93 83       	std	Z+3, r25	; 0x03
    21bc:	82 83       	std	Z+2, r24	; 0x02
    21be:	21 15       	cp	r18, r1
    21c0:	31 05       	cpc	r19, r1
    21c2:	29 f4       	brne	.+10     	; 0x21ce <free+0x92>
    21c4:	f0 93 f2 04 	sts	0x04F2, r31	; 0x8004f2 <__flp+0x1>
    21c8:	e0 93 f1 04 	sts	0x04F1, r30	; 0x8004f1 <__flp>
    21cc:	3d c0       	rjmp	.+122    	; 0x2248 <free+0x10c>
    21ce:	e9 01       	movw	r28, r18
    21d0:	fb 83       	std	Y+3, r31	; 0x03
    21d2:	ea 83       	std	Y+2, r30	; 0x02
    21d4:	49 91       	ld	r20, Y+
    21d6:	59 91       	ld	r21, Y+
    21d8:	c4 0f       	add	r28, r20
    21da:	d5 1f       	adc	r29, r21
    21dc:	ec 17       	cp	r30, r28
    21de:	fd 07       	cpc	r31, r29
    21e0:	61 f4       	brne	.+24     	; 0x21fa <free+0xbe>
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	84 0f       	add	r24, r20
    21e8:	95 1f       	adc	r25, r21
    21ea:	02 96       	adiw	r24, 0x02	; 2
    21ec:	e9 01       	movw	r28, r18
    21ee:	99 83       	std	Y+1, r25	; 0x01
    21f0:	88 83       	st	Y, r24
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	9b 83       	std	Y+3, r25	; 0x03
    21f8:	8a 83       	std	Y+2, r24	; 0x02
    21fa:	e0 e0       	ldi	r30, 0x00	; 0
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	12 96       	adiw	r26, 0x02	; 2
    2200:	8d 91       	ld	r24, X+
    2202:	9c 91       	ld	r25, X
    2204:	13 97       	sbiw	r26, 0x03	; 3
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	19 f0       	breq	.+6      	; 0x2210 <free+0xd4>
    220a:	fd 01       	movw	r30, r26
    220c:	dc 01       	movw	r26, r24
    220e:	f7 cf       	rjmp	.-18     	; 0x21fe <free+0xc2>
    2210:	8d 91       	ld	r24, X+
    2212:	9c 91       	ld	r25, X
    2214:	11 97       	sbiw	r26, 0x01	; 1
    2216:	9d 01       	movw	r18, r26
    2218:	2e 5f       	subi	r18, 0xFE	; 254
    221a:	3f 4f       	sbci	r19, 0xFF	; 255
    221c:	82 0f       	add	r24, r18
    221e:	93 1f       	adc	r25, r19
    2220:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <__brkval>
    2224:	30 91 f0 04 	lds	r19, 0x04F0	; 0x8004f0 <__brkval+0x1>
    2228:	28 17       	cp	r18, r24
    222a:	39 07       	cpc	r19, r25
    222c:	69 f4       	brne	.+26     	; 0x2248 <free+0x10c>
    222e:	30 97       	sbiw	r30, 0x00	; 0
    2230:	29 f4       	brne	.+10     	; 0x223c <free+0x100>
    2232:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <__flp+0x1>
    2236:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <__flp>
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <free+0x104>
    223c:	13 82       	std	Z+3, r1	; 0x03
    223e:	12 82       	std	Z+2, r1	; 0x02
    2240:	b0 93 f0 04 	sts	0x04F0, r27	; 0x8004f0 <__brkval+0x1>
    2244:	a0 93 ef 04 	sts	0x04EF, r26	; 0x8004ef <__brkval>
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	08 95       	ret

0000224e <strcpy>:
    224e:	fb 01       	movw	r30, r22
    2250:	dc 01       	movw	r26, r24
    2252:	01 90       	ld	r0, Z+
    2254:	0d 92       	st	X+, r0
    2256:	00 20       	and	r0, r0
    2258:	e1 f7       	brne	.-8      	; 0x2252 <strcpy+0x4>
    225a:	08 95       	ret

0000225c <strstr>:
    225c:	fb 01       	movw	r30, r22
    225e:	51 91       	ld	r21, Z+
    2260:	55 23       	and	r21, r21
    2262:	a9 f0       	breq	.+42     	; 0x228e <strstr+0x32>
    2264:	bf 01       	movw	r22, r30
    2266:	dc 01       	movw	r26, r24
    2268:	4d 91       	ld	r20, X+
    226a:	45 17       	cp	r20, r21
    226c:	41 11       	cpse	r20, r1
    226e:	e1 f7       	brne	.-8      	; 0x2268 <strstr+0xc>
    2270:	59 f4       	brne	.+22     	; 0x2288 <strstr+0x2c>
    2272:	cd 01       	movw	r24, r26
    2274:	01 90       	ld	r0, Z+
    2276:	00 20       	and	r0, r0
    2278:	49 f0       	breq	.+18     	; 0x228c <strstr+0x30>
    227a:	4d 91       	ld	r20, X+
    227c:	40 15       	cp	r20, r0
    227e:	41 11       	cpse	r20, r1
    2280:	c9 f3       	breq	.-14     	; 0x2274 <strstr+0x18>
    2282:	fb 01       	movw	r30, r22
    2284:	41 11       	cpse	r20, r1
    2286:	ef cf       	rjmp	.-34     	; 0x2266 <strstr+0xa>
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	08 95       	ret

00002290 <sprintf>:
    2290:	ae e0       	ldi	r26, 0x0E	; 14
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	ee e4       	ldi	r30, 0x4E	; 78
    2296:	f1 e1       	ldi	r31, 0x11	; 17
    2298:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__prologue_saves__+0x1c>
    229c:	0d 89       	ldd	r16, Y+21	; 0x15
    229e:	1e 89       	ldd	r17, Y+22	; 0x16
    22a0:	86 e0       	ldi	r24, 0x06	; 6
    22a2:	8c 83       	std	Y+4, r24	; 0x04
    22a4:	1a 83       	std	Y+2, r17	; 0x02
    22a6:	09 83       	std	Y+1, r16	; 0x01
    22a8:	8f ef       	ldi	r24, 0xFF	; 255
    22aa:	9f e7       	ldi	r25, 0x7F	; 127
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
    22b0:	ae 01       	movw	r20, r28
    22b2:	47 5e       	subi	r20, 0xE7	; 231
    22b4:	5f 4f       	sbci	r21, 0xFF	; 255
    22b6:	6f 89       	ldd	r22, Y+23	; 0x17
    22b8:	78 8d       	ldd	r23, Y+24	; 0x18
    22ba:	ce 01       	movw	r24, r28
    22bc:	01 96       	adiw	r24, 0x01	; 1
    22be:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <vfprintf>
    22c2:	ef 81       	ldd	r30, Y+7	; 0x07
    22c4:	f8 85       	ldd	r31, Y+8	; 0x08
    22c6:	e0 0f       	add	r30, r16
    22c8:	f1 1f       	adc	r31, r17
    22ca:	10 82       	st	Z, r1
    22cc:	2e 96       	adiw	r28, 0x0e	; 14
    22ce:	e4 e0       	ldi	r30, 0x04	; 4
    22d0:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__epilogue_restores__+0x1c>

000022d4 <vfprintf>:
    22d4:	ab e0       	ldi	r26, 0x0B	; 11
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e0 e7       	ldi	r30, 0x70	; 112
    22da:	f1 e1       	ldi	r31, 0x11	; 17
    22dc:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__prologue_saves__>
    22e0:	6c 01       	movw	r12, r24
    22e2:	7b 01       	movw	r14, r22
    22e4:	8a 01       	movw	r16, r20
    22e6:	fc 01       	movw	r30, r24
    22e8:	17 82       	std	Z+7, r1	; 0x07
    22ea:	16 82       	std	Z+6, r1	; 0x06
    22ec:	83 81       	ldd	r24, Z+3	; 0x03
    22ee:	81 ff       	sbrs	r24, 1
    22f0:	cc c1       	rjmp	.+920    	; 0x268a <vfprintf+0x3b6>
    22f2:	ce 01       	movw	r24, r28
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	3c 01       	movw	r6, r24
    22f8:	f6 01       	movw	r30, r12
    22fa:	93 81       	ldd	r25, Z+3	; 0x03
    22fc:	f7 01       	movw	r30, r14
    22fe:	93 fd       	sbrc	r25, 3
    2300:	85 91       	lpm	r24, Z+
    2302:	93 ff       	sbrs	r25, 3
    2304:	81 91       	ld	r24, Z+
    2306:	7f 01       	movw	r14, r30
    2308:	88 23       	and	r24, r24
    230a:	09 f4       	brne	.+2      	; 0x230e <vfprintf+0x3a>
    230c:	ba c1       	rjmp	.+884    	; 0x2682 <vfprintf+0x3ae>
    230e:	85 32       	cpi	r24, 0x25	; 37
    2310:	39 f4       	brne	.+14     	; 0x2320 <vfprintf+0x4c>
    2312:	93 fd       	sbrc	r25, 3
    2314:	85 91       	lpm	r24, Z+
    2316:	93 ff       	sbrs	r25, 3
    2318:	81 91       	ld	r24, Z+
    231a:	7f 01       	movw	r14, r30
    231c:	85 32       	cpi	r24, 0x25	; 37
    231e:	29 f4       	brne	.+10     	; 0x232a <vfprintf+0x56>
    2320:	b6 01       	movw	r22, r12
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 61 13 	call	0x26c2	; 0x26c2 <fputc>
    2328:	e7 cf       	rjmp	.-50     	; 0x22f8 <vfprintf+0x24>
    232a:	91 2c       	mov	r9, r1
    232c:	21 2c       	mov	r2, r1
    232e:	31 2c       	mov	r3, r1
    2330:	ff e1       	ldi	r31, 0x1F	; 31
    2332:	f3 15       	cp	r31, r3
    2334:	d8 f0       	brcs	.+54     	; 0x236c <vfprintf+0x98>
    2336:	8b 32       	cpi	r24, 0x2B	; 43
    2338:	79 f0       	breq	.+30     	; 0x2358 <vfprintf+0x84>
    233a:	38 f4       	brcc	.+14     	; 0x234a <vfprintf+0x76>
    233c:	80 32       	cpi	r24, 0x20	; 32
    233e:	79 f0       	breq	.+30     	; 0x235e <vfprintf+0x8a>
    2340:	83 32       	cpi	r24, 0x23	; 35
    2342:	a1 f4       	brne	.+40     	; 0x236c <vfprintf+0x98>
    2344:	23 2d       	mov	r18, r3
    2346:	20 61       	ori	r18, 0x10	; 16
    2348:	1d c0       	rjmp	.+58     	; 0x2384 <vfprintf+0xb0>
    234a:	8d 32       	cpi	r24, 0x2D	; 45
    234c:	61 f0       	breq	.+24     	; 0x2366 <vfprintf+0x92>
    234e:	80 33       	cpi	r24, 0x30	; 48
    2350:	69 f4       	brne	.+26     	; 0x236c <vfprintf+0x98>
    2352:	23 2d       	mov	r18, r3
    2354:	21 60       	ori	r18, 0x01	; 1
    2356:	16 c0       	rjmp	.+44     	; 0x2384 <vfprintf+0xb0>
    2358:	83 2d       	mov	r24, r3
    235a:	82 60       	ori	r24, 0x02	; 2
    235c:	38 2e       	mov	r3, r24
    235e:	e3 2d       	mov	r30, r3
    2360:	e4 60       	ori	r30, 0x04	; 4
    2362:	3e 2e       	mov	r3, r30
    2364:	2a c0       	rjmp	.+84     	; 0x23ba <vfprintf+0xe6>
    2366:	f3 2d       	mov	r31, r3
    2368:	f8 60       	ori	r31, 0x08	; 8
    236a:	1d c0       	rjmp	.+58     	; 0x23a6 <vfprintf+0xd2>
    236c:	37 fc       	sbrc	r3, 7
    236e:	2d c0       	rjmp	.+90     	; 0x23ca <vfprintf+0xf6>
    2370:	20 ed       	ldi	r18, 0xD0	; 208
    2372:	28 0f       	add	r18, r24
    2374:	2a 30       	cpi	r18, 0x0A	; 10
    2376:	40 f0       	brcs	.+16     	; 0x2388 <vfprintf+0xb4>
    2378:	8e 32       	cpi	r24, 0x2E	; 46
    237a:	b9 f4       	brne	.+46     	; 0x23aa <vfprintf+0xd6>
    237c:	36 fc       	sbrc	r3, 6
    237e:	81 c1       	rjmp	.+770    	; 0x2682 <vfprintf+0x3ae>
    2380:	23 2d       	mov	r18, r3
    2382:	20 64       	ori	r18, 0x40	; 64
    2384:	32 2e       	mov	r3, r18
    2386:	19 c0       	rjmp	.+50     	; 0x23ba <vfprintf+0xe6>
    2388:	36 fe       	sbrs	r3, 6
    238a:	06 c0       	rjmp	.+12     	; 0x2398 <vfprintf+0xc4>
    238c:	8a e0       	ldi	r24, 0x0A	; 10
    238e:	98 9e       	mul	r9, r24
    2390:	20 0d       	add	r18, r0
    2392:	11 24       	eor	r1, r1
    2394:	92 2e       	mov	r9, r18
    2396:	11 c0       	rjmp	.+34     	; 0x23ba <vfprintf+0xe6>
    2398:	ea e0       	ldi	r30, 0x0A	; 10
    239a:	2e 9e       	mul	r2, r30
    239c:	20 0d       	add	r18, r0
    239e:	11 24       	eor	r1, r1
    23a0:	22 2e       	mov	r2, r18
    23a2:	f3 2d       	mov	r31, r3
    23a4:	f0 62       	ori	r31, 0x20	; 32
    23a6:	3f 2e       	mov	r3, r31
    23a8:	08 c0       	rjmp	.+16     	; 0x23ba <vfprintf+0xe6>
    23aa:	8c 36       	cpi	r24, 0x6C	; 108
    23ac:	21 f4       	brne	.+8      	; 0x23b6 <vfprintf+0xe2>
    23ae:	83 2d       	mov	r24, r3
    23b0:	80 68       	ori	r24, 0x80	; 128
    23b2:	38 2e       	mov	r3, r24
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <vfprintf+0xe6>
    23b6:	88 36       	cpi	r24, 0x68	; 104
    23b8:	41 f4       	brne	.+16     	; 0x23ca <vfprintf+0xf6>
    23ba:	f7 01       	movw	r30, r14
    23bc:	93 fd       	sbrc	r25, 3
    23be:	85 91       	lpm	r24, Z+
    23c0:	93 ff       	sbrs	r25, 3
    23c2:	81 91       	ld	r24, Z+
    23c4:	7f 01       	movw	r14, r30
    23c6:	81 11       	cpse	r24, r1
    23c8:	b3 cf       	rjmp	.-154    	; 0x2330 <vfprintf+0x5c>
    23ca:	98 2f       	mov	r25, r24
    23cc:	9f 7d       	andi	r25, 0xDF	; 223
    23ce:	95 54       	subi	r25, 0x45	; 69
    23d0:	93 30       	cpi	r25, 0x03	; 3
    23d2:	28 f4       	brcc	.+10     	; 0x23de <vfprintf+0x10a>
    23d4:	0c 5f       	subi	r16, 0xFC	; 252
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	9f e3       	ldi	r25, 0x3F	; 63
    23da:	99 83       	std	Y+1, r25	; 0x01
    23dc:	0d c0       	rjmp	.+26     	; 0x23f8 <vfprintf+0x124>
    23de:	83 36       	cpi	r24, 0x63	; 99
    23e0:	31 f0       	breq	.+12     	; 0x23ee <vfprintf+0x11a>
    23e2:	83 37       	cpi	r24, 0x73	; 115
    23e4:	71 f0       	breq	.+28     	; 0x2402 <vfprintf+0x12e>
    23e6:	83 35       	cpi	r24, 0x53	; 83
    23e8:	09 f0       	breq	.+2      	; 0x23ec <vfprintf+0x118>
    23ea:	59 c0       	rjmp	.+178    	; 0x249e <vfprintf+0x1ca>
    23ec:	21 c0       	rjmp	.+66     	; 0x2430 <vfprintf+0x15c>
    23ee:	f8 01       	movw	r30, r16
    23f0:	80 81       	ld	r24, Z
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	0e 5f       	subi	r16, 0xFE	; 254
    23f6:	1f 4f       	sbci	r17, 0xFF	; 255
    23f8:	88 24       	eor	r8, r8
    23fa:	83 94       	inc	r8
    23fc:	91 2c       	mov	r9, r1
    23fe:	53 01       	movw	r10, r6
    2400:	13 c0       	rjmp	.+38     	; 0x2428 <vfprintf+0x154>
    2402:	28 01       	movw	r4, r16
    2404:	f2 e0       	ldi	r31, 0x02	; 2
    2406:	4f 0e       	add	r4, r31
    2408:	51 1c       	adc	r5, r1
    240a:	f8 01       	movw	r30, r16
    240c:	a0 80       	ld	r10, Z
    240e:	b1 80       	ldd	r11, Z+1	; 0x01
    2410:	36 fe       	sbrs	r3, 6
    2412:	03 c0       	rjmp	.+6      	; 0x241a <vfprintf+0x146>
    2414:	69 2d       	mov	r22, r9
    2416:	70 e0       	ldi	r23, 0x00	; 0
    2418:	02 c0       	rjmp	.+4      	; 0x241e <vfprintf+0x14a>
    241a:	6f ef       	ldi	r22, 0xFF	; 255
    241c:	7f ef       	ldi	r23, 0xFF	; 255
    241e:	c5 01       	movw	r24, r10
    2420:	0e 94 56 13 	call	0x26ac	; 0x26ac <strnlen>
    2424:	4c 01       	movw	r8, r24
    2426:	82 01       	movw	r16, r4
    2428:	f3 2d       	mov	r31, r3
    242a:	ff 77       	andi	r31, 0x7F	; 127
    242c:	3f 2e       	mov	r3, r31
    242e:	16 c0       	rjmp	.+44     	; 0x245c <vfprintf+0x188>
    2430:	28 01       	movw	r4, r16
    2432:	22 e0       	ldi	r18, 0x02	; 2
    2434:	42 0e       	add	r4, r18
    2436:	51 1c       	adc	r5, r1
    2438:	f8 01       	movw	r30, r16
    243a:	a0 80       	ld	r10, Z
    243c:	b1 80       	ldd	r11, Z+1	; 0x01
    243e:	36 fe       	sbrs	r3, 6
    2440:	03 c0       	rjmp	.+6      	; 0x2448 <vfprintf+0x174>
    2442:	69 2d       	mov	r22, r9
    2444:	70 e0       	ldi	r23, 0x00	; 0
    2446:	02 c0       	rjmp	.+4      	; 0x244c <vfprintf+0x178>
    2448:	6f ef       	ldi	r22, 0xFF	; 255
    244a:	7f ef       	ldi	r23, 0xFF	; 255
    244c:	c5 01       	movw	r24, r10
    244e:	0e 94 4b 13 	call	0x2696	; 0x2696 <strnlen_P>
    2452:	4c 01       	movw	r8, r24
    2454:	f3 2d       	mov	r31, r3
    2456:	f0 68       	ori	r31, 0x80	; 128
    2458:	3f 2e       	mov	r3, r31
    245a:	82 01       	movw	r16, r4
    245c:	33 fc       	sbrc	r3, 3
    245e:	1b c0       	rjmp	.+54     	; 0x2496 <vfprintf+0x1c2>
    2460:	82 2d       	mov	r24, r2
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	88 16       	cp	r8, r24
    2466:	99 06       	cpc	r9, r25
    2468:	b0 f4       	brcc	.+44     	; 0x2496 <vfprintf+0x1c2>
    246a:	b6 01       	movw	r22, r12
    246c:	80 e2       	ldi	r24, 0x20	; 32
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	0e 94 61 13 	call	0x26c2	; 0x26c2 <fputc>
    2474:	2a 94       	dec	r2
    2476:	f4 cf       	rjmp	.-24     	; 0x2460 <vfprintf+0x18c>
    2478:	f5 01       	movw	r30, r10
    247a:	37 fc       	sbrc	r3, 7
    247c:	85 91       	lpm	r24, Z+
    247e:	37 fe       	sbrs	r3, 7
    2480:	81 91       	ld	r24, Z+
    2482:	5f 01       	movw	r10, r30
    2484:	b6 01       	movw	r22, r12
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 61 13 	call	0x26c2	; 0x26c2 <fputc>
    248c:	21 10       	cpse	r2, r1
    248e:	2a 94       	dec	r2
    2490:	21 e0       	ldi	r18, 0x01	; 1
    2492:	82 1a       	sub	r8, r18
    2494:	91 08       	sbc	r9, r1
    2496:	81 14       	cp	r8, r1
    2498:	91 04       	cpc	r9, r1
    249a:	71 f7       	brne	.-36     	; 0x2478 <vfprintf+0x1a4>
    249c:	e8 c0       	rjmp	.+464    	; 0x266e <vfprintf+0x39a>
    249e:	84 36       	cpi	r24, 0x64	; 100
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <vfprintf+0x1d2>
    24a2:	89 36       	cpi	r24, 0x69	; 105
    24a4:	41 f5       	brne	.+80     	; 0x24f6 <vfprintf+0x222>
    24a6:	f8 01       	movw	r30, r16
    24a8:	37 fe       	sbrs	r3, 7
    24aa:	07 c0       	rjmp	.+14     	; 0x24ba <vfprintf+0x1e6>
    24ac:	60 81       	ld	r22, Z
    24ae:	71 81       	ldd	r23, Z+1	; 0x01
    24b0:	82 81       	ldd	r24, Z+2	; 0x02
    24b2:	93 81       	ldd	r25, Z+3	; 0x03
    24b4:	0c 5f       	subi	r16, 0xFC	; 252
    24b6:	1f 4f       	sbci	r17, 0xFF	; 255
    24b8:	08 c0       	rjmp	.+16     	; 0x24ca <vfprintf+0x1f6>
    24ba:	60 81       	ld	r22, Z
    24bc:	71 81       	ldd	r23, Z+1	; 0x01
    24be:	07 2e       	mov	r0, r23
    24c0:	00 0c       	add	r0, r0
    24c2:	88 0b       	sbc	r24, r24
    24c4:	99 0b       	sbc	r25, r25
    24c6:	0e 5f       	subi	r16, 0xFE	; 254
    24c8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ca:	f3 2d       	mov	r31, r3
    24cc:	ff 76       	andi	r31, 0x6F	; 111
    24ce:	3f 2e       	mov	r3, r31
    24d0:	97 ff       	sbrs	r25, 7
    24d2:	09 c0       	rjmp	.+18     	; 0x24e6 <vfprintf+0x212>
    24d4:	90 95       	com	r25
    24d6:	80 95       	com	r24
    24d8:	70 95       	com	r23
    24da:	61 95       	neg	r22
    24dc:	7f 4f       	sbci	r23, 0xFF	; 255
    24de:	8f 4f       	sbci	r24, 0xFF	; 255
    24e0:	9f 4f       	sbci	r25, 0xFF	; 255
    24e2:	f0 68       	ori	r31, 0x80	; 128
    24e4:	3f 2e       	mov	r3, r31
    24e6:	2a e0       	ldi	r18, 0x0A	; 10
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	a3 01       	movw	r20, r6
    24ec:	0e 94 9d 13 	call	0x273a	; 0x273a <__ultoa_invert>
    24f0:	88 2e       	mov	r8, r24
    24f2:	86 18       	sub	r8, r6
    24f4:	45 c0       	rjmp	.+138    	; 0x2580 <vfprintf+0x2ac>
    24f6:	85 37       	cpi	r24, 0x75	; 117
    24f8:	31 f4       	brne	.+12     	; 0x2506 <vfprintf+0x232>
    24fa:	23 2d       	mov	r18, r3
    24fc:	2f 7e       	andi	r18, 0xEF	; 239
    24fe:	b2 2e       	mov	r11, r18
    2500:	2a e0       	ldi	r18, 0x0A	; 10
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	25 c0       	rjmp	.+74     	; 0x2550 <vfprintf+0x27c>
    2506:	93 2d       	mov	r25, r3
    2508:	99 7f       	andi	r25, 0xF9	; 249
    250a:	b9 2e       	mov	r11, r25
    250c:	8f 36       	cpi	r24, 0x6F	; 111
    250e:	c1 f0       	breq	.+48     	; 0x2540 <vfprintf+0x26c>
    2510:	18 f4       	brcc	.+6      	; 0x2518 <vfprintf+0x244>
    2512:	88 35       	cpi	r24, 0x58	; 88
    2514:	79 f0       	breq	.+30     	; 0x2534 <vfprintf+0x260>
    2516:	b5 c0       	rjmp	.+362    	; 0x2682 <vfprintf+0x3ae>
    2518:	80 37       	cpi	r24, 0x70	; 112
    251a:	19 f0       	breq	.+6      	; 0x2522 <vfprintf+0x24e>
    251c:	88 37       	cpi	r24, 0x78	; 120
    251e:	21 f0       	breq	.+8      	; 0x2528 <vfprintf+0x254>
    2520:	b0 c0       	rjmp	.+352    	; 0x2682 <vfprintf+0x3ae>
    2522:	e9 2f       	mov	r30, r25
    2524:	e0 61       	ori	r30, 0x10	; 16
    2526:	be 2e       	mov	r11, r30
    2528:	b4 fe       	sbrs	r11, 4
    252a:	0d c0       	rjmp	.+26     	; 0x2546 <vfprintf+0x272>
    252c:	fb 2d       	mov	r31, r11
    252e:	f4 60       	ori	r31, 0x04	; 4
    2530:	bf 2e       	mov	r11, r31
    2532:	09 c0       	rjmp	.+18     	; 0x2546 <vfprintf+0x272>
    2534:	34 fe       	sbrs	r3, 4
    2536:	0a c0       	rjmp	.+20     	; 0x254c <vfprintf+0x278>
    2538:	29 2f       	mov	r18, r25
    253a:	26 60       	ori	r18, 0x06	; 6
    253c:	b2 2e       	mov	r11, r18
    253e:	06 c0       	rjmp	.+12     	; 0x254c <vfprintf+0x278>
    2540:	28 e0       	ldi	r18, 0x08	; 8
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	05 c0       	rjmp	.+10     	; 0x2550 <vfprintf+0x27c>
    2546:	20 e1       	ldi	r18, 0x10	; 16
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <vfprintf+0x27c>
    254c:	20 e1       	ldi	r18, 0x10	; 16
    254e:	32 e0       	ldi	r19, 0x02	; 2
    2550:	f8 01       	movw	r30, r16
    2552:	b7 fe       	sbrs	r11, 7
    2554:	07 c0       	rjmp	.+14     	; 0x2564 <vfprintf+0x290>
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	0c 5f       	subi	r16, 0xFC	; 252
    2560:	1f 4f       	sbci	r17, 0xFF	; 255
    2562:	06 c0       	rjmp	.+12     	; 0x2570 <vfprintf+0x29c>
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	0e 5f       	subi	r16, 0xFE	; 254
    256e:	1f 4f       	sbci	r17, 0xFF	; 255
    2570:	a3 01       	movw	r20, r6
    2572:	0e 94 9d 13 	call	0x273a	; 0x273a <__ultoa_invert>
    2576:	88 2e       	mov	r8, r24
    2578:	86 18       	sub	r8, r6
    257a:	fb 2d       	mov	r31, r11
    257c:	ff 77       	andi	r31, 0x7F	; 127
    257e:	3f 2e       	mov	r3, r31
    2580:	36 fe       	sbrs	r3, 6
    2582:	0d c0       	rjmp	.+26     	; 0x259e <vfprintf+0x2ca>
    2584:	23 2d       	mov	r18, r3
    2586:	2e 7f       	andi	r18, 0xFE	; 254
    2588:	a2 2e       	mov	r10, r18
    258a:	89 14       	cp	r8, r9
    258c:	58 f4       	brcc	.+22     	; 0x25a4 <vfprintf+0x2d0>
    258e:	34 fe       	sbrs	r3, 4
    2590:	0b c0       	rjmp	.+22     	; 0x25a8 <vfprintf+0x2d4>
    2592:	32 fc       	sbrc	r3, 2
    2594:	09 c0       	rjmp	.+18     	; 0x25a8 <vfprintf+0x2d4>
    2596:	83 2d       	mov	r24, r3
    2598:	8e 7e       	andi	r24, 0xEE	; 238
    259a:	a8 2e       	mov	r10, r24
    259c:	05 c0       	rjmp	.+10     	; 0x25a8 <vfprintf+0x2d4>
    259e:	b8 2c       	mov	r11, r8
    25a0:	a3 2c       	mov	r10, r3
    25a2:	03 c0       	rjmp	.+6      	; 0x25aa <vfprintf+0x2d6>
    25a4:	b8 2c       	mov	r11, r8
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <vfprintf+0x2d6>
    25a8:	b9 2c       	mov	r11, r9
    25aa:	a4 fe       	sbrs	r10, 4
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <vfprintf+0x2f8>
    25ae:	fe 01       	movw	r30, r28
    25b0:	e8 0d       	add	r30, r8
    25b2:	f1 1d       	adc	r31, r1
    25b4:	80 81       	ld	r24, Z
    25b6:	80 33       	cpi	r24, 0x30	; 48
    25b8:	21 f4       	brne	.+8      	; 0x25c2 <vfprintf+0x2ee>
    25ba:	9a 2d       	mov	r25, r10
    25bc:	99 7e       	andi	r25, 0xE9	; 233
    25be:	a9 2e       	mov	r10, r25
    25c0:	09 c0       	rjmp	.+18     	; 0x25d4 <vfprintf+0x300>
    25c2:	a2 fe       	sbrs	r10, 2
    25c4:	06 c0       	rjmp	.+12     	; 0x25d2 <vfprintf+0x2fe>
    25c6:	b3 94       	inc	r11
    25c8:	b3 94       	inc	r11
    25ca:	04 c0       	rjmp	.+8      	; 0x25d4 <vfprintf+0x300>
    25cc:	8a 2d       	mov	r24, r10
    25ce:	86 78       	andi	r24, 0x86	; 134
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <vfprintf+0x300>
    25d2:	b3 94       	inc	r11
    25d4:	a3 fc       	sbrc	r10, 3
    25d6:	11 c0       	rjmp	.+34     	; 0x25fa <vfprintf+0x326>
    25d8:	a0 fe       	sbrs	r10, 0
    25da:	06 c0       	rjmp	.+12     	; 0x25e8 <vfprintf+0x314>
    25dc:	b2 14       	cp	r11, r2
    25de:	88 f4       	brcc	.+34     	; 0x2602 <vfprintf+0x32e>
    25e0:	28 0c       	add	r2, r8
    25e2:	92 2c       	mov	r9, r2
    25e4:	9b 18       	sub	r9, r11
    25e6:	0e c0       	rjmp	.+28     	; 0x2604 <vfprintf+0x330>
    25e8:	b2 14       	cp	r11, r2
    25ea:	60 f4       	brcc	.+24     	; 0x2604 <vfprintf+0x330>
    25ec:	b6 01       	movw	r22, r12
    25ee:	80 e2       	ldi	r24, 0x20	; 32
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <fputc>
    25f6:	b3 94       	inc	r11
    25f8:	f7 cf       	rjmp	.-18     	; 0x25e8 <vfprintf+0x314>
    25fa:	b2 14       	cp	r11, r2
    25fc:	18 f4       	brcc	.+6      	; 0x2604 <vfprintf+0x330>
    25fe:	2b 18       	sub	r2, r11
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <vfprintf+0x332>
    2602:	98 2c       	mov	r9, r8
    2604:	21 2c       	mov	r2, r1
    2606:	a4 fe       	sbrs	r10, 4
    2608:	10 c0       	rjmp	.+32     	; 0x262a <vfprintf+0x356>
    260a:	b6 01       	movw	r22, r12
    260c:	80 e3       	ldi	r24, 0x30	; 48
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	0e 94 61 13 	call	0x26c2	; 0x26c2 <fputc>
    2614:	a2 fe       	sbrs	r10, 2
    2616:	17 c0       	rjmp	.+46     	; 0x2646 <vfprintf+0x372>
    2618:	a1 fc       	sbrc	r10, 1
    261a:	03 c0       	rjmp	.+6      	; 0x2622 <vfprintf+0x34e>
    261c:	88 e7       	ldi	r24, 0x78	; 120
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <vfprintf+0x352>
    2622:	88 e5       	ldi	r24, 0x58	; 88
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	b6 01       	movw	r22, r12
    2628:	0c c0       	rjmp	.+24     	; 0x2642 <vfprintf+0x36e>
    262a:	8a 2d       	mov	r24, r10
    262c:	86 78       	andi	r24, 0x86	; 134
    262e:	59 f0       	breq	.+22     	; 0x2646 <vfprintf+0x372>
    2630:	a1 fe       	sbrs	r10, 1
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <vfprintf+0x364>
    2634:	8b e2       	ldi	r24, 0x2B	; 43
    2636:	01 c0       	rjmp	.+2      	; 0x263a <vfprintf+0x366>
    2638:	80 e2       	ldi	r24, 0x20	; 32
    263a:	a7 fc       	sbrc	r10, 7
    263c:	8d e2       	ldi	r24, 0x2D	; 45
    263e:	b6 01       	movw	r22, r12
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 61 13 	call	0x26c2	; 0x26c2 <fputc>
    2646:	89 14       	cp	r8, r9
    2648:	38 f4       	brcc	.+14     	; 0x2658 <vfprintf+0x384>
    264a:	b6 01       	movw	r22, r12
    264c:	80 e3       	ldi	r24, 0x30	; 48
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 61 13 	call	0x26c2	; 0x26c2 <fputc>
    2654:	9a 94       	dec	r9
    2656:	f7 cf       	rjmp	.-18     	; 0x2646 <vfprintf+0x372>
    2658:	8a 94       	dec	r8
    265a:	f3 01       	movw	r30, r6
    265c:	e8 0d       	add	r30, r8
    265e:	f1 1d       	adc	r31, r1
    2660:	80 81       	ld	r24, Z
    2662:	b6 01       	movw	r22, r12
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 61 13 	call	0x26c2	; 0x26c2 <fputc>
    266a:	81 10       	cpse	r8, r1
    266c:	f5 cf       	rjmp	.-22     	; 0x2658 <vfprintf+0x384>
    266e:	22 20       	and	r2, r2
    2670:	09 f4       	brne	.+2      	; 0x2674 <vfprintf+0x3a0>
    2672:	42 ce       	rjmp	.-892    	; 0x22f8 <vfprintf+0x24>
    2674:	b6 01       	movw	r22, r12
    2676:	80 e2       	ldi	r24, 0x20	; 32
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <fputc>
    267e:	2a 94       	dec	r2
    2680:	f6 cf       	rjmp	.-20     	; 0x266e <vfprintf+0x39a>
    2682:	f6 01       	movw	r30, r12
    2684:	86 81       	ldd	r24, Z+6	; 0x06
    2686:	97 81       	ldd	r25, Z+7	; 0x07
    2688:	02 c0       	rjmp	.+4      	; 0x268e <vfprintf+0x3ba>
    268a:	8f ef       	ldi	r24, 0xFF	; 255
    268c:	9f ef       	ldi	r25, 0xFF	; 255
    268e:	2b 96       	adiw	r28, 0x0b	; 11
    2690:	e2 e1       	ldi	r30, 0x12	; 18
    2692:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__epilogue_restores__>

00002696 <strnlen_P>:
    2696:	fc 01       	movw	r30, r24
    2698:	05 90       	lpm	r0, Z+
    269a:	61 50       	subi	r22, 0x01	; 1
    269c:	70 40       	sbci	r23, 0x00	; 0
    269e:	01 10       	cpse	r0, r1
    26a0:	d8 f7       	brcc	.-10     	; 0x2698 <strnlen_P+0x2>
    26a2:	80 95       	com	r24
    26a4:	90 95       	com	r25
    26a6:	8e 0f       	add	r24, r30
    26a8:	9f 1f       	adc	r25, r31
    26aa:	08 95       	ret

000026ac <strnlen>:
    26ac:	fc 01       	movw	r30, r24
    26ae:	61 50       	subi	r22, 0x01	; 1
    26b0:	70 40       	sbci	r23, 0x00	; 0
    26b2:	01 90       	ld	r0, Z+
    26b4:	01 10       	cpse	r0, r1
    26b6:	d8 f7       	brcc	.-10     	; 0x26ae <strnlen+0x2>
    26b8:	80 95       	com	r24
    26ba:	90 95       	com	r25
    26bc:	8e 0f       	add	r24, r30
    26be:	9f 1f       	adc	r25, r31
    26c0:	08 95       	ret

000026c2 <fputc>:
    26c2:	0f 93       	push	r16
    26c4:	1f 93       	push	r17
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	fb 01       	movw	r30, r22
    26cc:	23 81       	ldd	r18, Z+3	; 0x03
    26ce:	21 fd       	sbrc	r18, 1
    26d0:	03 c0       	rjmp	.+6      	; 0x26d8 <fputc+0x16>
    26d2:	8f ef       	ldi	r24, 0xFF	; 255
    26d4:	9f ef       	ldi	r25, 0xFF	; 255
    26d6:	2c c0       	rjmp	.+88     	; 0x2730 <fputc+0x6e>
    26d8:	22 ff       	sbrs	r18, 2
    26da:	16 c0       	rjmp	.+44     	; 0x2708 <fputc+0x46>
    26dc:	46 81       	ldd	r20, Z+6	; 0x06
    26de:	57 81       	ldd	r21, Z+7	; 0x07
    26e0:	24 81       	ldd	r18, Z+4	; 0x04
    26e2:	35 81       	ldd	r19, Z+5	; 0x05
    26e4:	42 17       	cp	r20, r18
    26e6:	53 07       	cpc	r21, r19
    26e8:	44 f4       	brge	.+16     	; 0x26fa <fputc+0x38>
    26ea:	a0 81       	ld	r26, Z
    26ec:	b1 81       	ldd	r27, Z+1	; 0x01
    26ee:	9d 01       	movw	r18, r26
    26f0:	2f 5f       	subi	r18, 0xFF	; 255
    26f2:	3f 4f       	sbci	r19, 0xFF	; 255
    26f4:	31 83       	std	Z+1, r19	; 0x01
    26f6:	20 83       	st	Z, r18
    26f8:	8c 93       	st	X, r24
    26fa:	26 81       	ldd	r18, Z+6	; 0x06
    26fc:	37 81       	ldd	r19, Z+7	; 0x07
    26fe:	2f 5f       	subi	r18, 0xFF	; 255
    2700:	3f 4f       	sbci	r19, 0xFF	; 255
    2702:	37 83       	std	Z+7, r19	; 0x07
    2704:	26 83       	std	Z+6, r18	; 0x06
    2706:	14 c0       	rjmp	.+40     	; 0x2730 <fputc+0x6e>
    2708:	8b 01       	movw	r16, r22
    270a:	ec 01       	movw	r28, r24
    270c:	fb 01       	movw	r30, r22
    270e:	00 84       	ldd	r0, Z+8	; 0x08
    2710:	f1 85       	ldd	r31, Z+9	; 0x09
    2712:	e0 2d       	mov	r30, r0
    2714:	09 95       	icall
    2716:	89 2b       	or	r24, r25
    2718:	e1 f6       	brne	.-72     	; 0x26d2 <fputc+0x10>
    271a:	d8 01       	movw	r26, r16
    271c:	16 96       	adiw	r26, 0x06	; 6
    271e:	8d 91       	ld	r24, X+
    2720:	9c 91       	ld	r25, X
    2722:	17 97       	sbiw	r26, 0x07	; 7
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	17 96       	adiw	r26, 0x07	; 7
    2728:	9c 93       	st	X, r25
    272a:	8e 93       	st	-X, r24
    272c:	16 97       	sbiw	r26, 0x06	; 6
    272e:	ce 01       	movw	r24, r28
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	1f 91       	pop	r17
    2736:	0f 91       	pop	r16
    2738:	08 95       	ret

0000273a <__ultoa_invert>:
    273a:	fa 01       	movw	r30, r20
    273c:	aa 27       	eor	r26, r26
    273e:	28 30       	cpi	r18, 0x08	; 8
    2740:	51 f1       	breq	.+84     	; 0x2796 <__ultoa_invert+0x5c>
    2742:	20 31       	cpi	r18, 0x10	; 16
    2744:	81 f1       	breq	.+96     	; 0x27a6 <__ultoa_invert+0x6c>
    2746:	e8 94       	clt
    2748:	6f 93       	push	r22
    274a:	6e 7f       	andi	r22, 0xFE	; 254
    274c:	6e 5f       	subi	r22, 0xFE	; 254
    274e:	7f 4f       	sbci	r23, 0xFF	; 255
    2750:	8f 4f       	sbci	r24, 0xFF	; 255
    2752:	9f 4f       	sbci	r25, 0xFF	; 255
    2754:	af 4f       	sbci	r26, 0xFF	; 255
    2756:	b1 e0       	ldi	r27, 0x01	; 1
    2758:	3e d0       	rcall	.+124    	; 0x27d6 <__ultoa_invert+0x9c>
    275a:	b4 e0       	ldi	r27, 0x04	; 4
    275c:	3c d0       	rcall	.+120    	; 0x27d6 <__ultoa_invert+0x9c>
    275e:	67 0f       	add	r22, r23
    2760:	78 1f       	adc	r23, r24
    2762:	89 1f       	adc	r24, r25
    2764:	9a 1f       	adc	r25, r26
    2766:	a1 1d       	adc	r26, r1
    2768:	68 0f       	add	r22, r24
    276a:	79 1f       	adc	r23, r25
    276c:	8a 1f       	adc	r24, r26
    276e:	91 1d       	adc	r25, r1
    2770:	a1 1d       	adc	r26, r1
    2772:	6a 0f       	add	r22, r26
    2774:	71 1d       	adc	r23, r1
    2776:	81 1d       	adc	r24, r1
    2778:	91 1d       	adc	r25, r1
    277a:	a1 1d       	adc	r26, r1
    277c:	20 d0       	rcall	.+64     	; 0x27be <__ultoa_invert+0x84>
    277e:	09 f4       	brne	.+2      	; 0x2782 <__ultoa_invert+0x48>
    2780:	68 94       	set
    2782:	3f 91       	pop	r19
    2784:	2a e0       	ldi	r18, 0x0A	; 10
    2786:	26 9f       	mul	r18, r22
    2788:	11 24       	eor	r1, r1
    278a:	30 19       	sub	r19, r0
    278c:	30 5d       	subi	r19, 0xD0	; 208
    278e:	31 93       	st	Z+, r19
    2790:	de f6       	brtc	.-74     	; 0x2748 <__ultoa_invert+0xe>
    2792:	cf 01       	movw	r24, r30
    2794:	08 95       	ret
    2796:	46 2f       	mov	r20, r22
    2798:	47 70       	andi	r20, 0x07	; 7
    279a:	40 5d       	subi	r20, 0xD0	; 208
    279c:	41 93       	st	Z+, r20
    279e:	b3 e0       	ldi	r27, 0x03	; 3
    27a0:	0f d0       	rcall	.+30     	; 0x27c0 <__ultoa_invert+0x86>
    27a2:	c9 f7       	brne	.-14     	; 0x2796 <__ultoa_invert+0x5c>
    27a4:	f6 cf       	rjmp	.-20     	; 0x2792 <__ultoa_invert+0x58>
    27a6:	46 2f       	mov	r20, r22
    27a8:	4f 70       	andi	r20, 0x0F	; 15
    27aa:	40 5d       	subi	r20, 0xD0	; 208
    27ac:	4a 33       	cpi	r20, 0x3A	; 58
    27ae:	18 f0       	brcs	.+6      	; 0x27b6 <__ultoa_invert+0x7c>
    27b0:	49 5d       	subi	r20, 0xD9	; 217
    27b2:	31 fd       	sbrc	r19, 1
    27b4:	40 52       	subi	r20, 0x20	; 32
    27b6:	41 93       	st	Z+, r20
    27b8:	02 d0       	rcall	.+4      	; 0x27be <__ultoa_invert+0x84>
    27ba:	a9 f7       	brne	.-22     	; 0x27a6 <__ultoa_invert+0x6c>
    27bc:	ea cf       	rjmp	.-44     	; 0x2792 <__ultoa_invert+0x58>
    27be:	b4 e0       	ldi	r27, 0x04	; 4
    27c0:	a6 95       	lsr	r26
    27c2:	97 95       	ror	r25
    27c4:	87 95       	ror	r24
    27c6:	77 95       	ror	r23
    27c8:	67 95       	ror	r22
    27ca:	ba 95       	dec	r27
    27cc:	c9 f7       	brne	.-14     	; 0x27c0 <__ultoa_invert+0x86>
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	61 05       	cpc	r22, r1
    27d2:	71 05       	cpc	r23, r1
    27d4:	08 95       	ret
    27d6:	9b 01       	movw	r18, r22
    27d8:	ac 01       	movw	r20, r24
    27da:	0a 2e       	mov	r0, r26
    27dc:	06 94       	lsr	r0
    27de:	57 95       	ror	r21
    27e0:	47 95       	ror	r20
    27e2:	37 95       	ror	r19
    27e4:	27 95       	ror	r18
    27e6:	ba 95       	dec	r27
    27e8:	c9 f7       	brne	.-14     	; 0x27dc <__ultoa_invert+0xa2>
    27ea:	62 0f       	add	r22, r18
    27ec:	73 1f       	adc	r23, r19
    27ee:	84 1f       	adc	r24, r20
    27f0:	95 1f       	adc	r25, r21
    27f2:	a0 1d       	adc	r26, r0
    27f4:	08 95       	ret

000027f6 <eeprom_read_byte>:
    27f6:	f9 99       	sbic	0x1f, 1	; 31
    27f8:	fe cf       	rjmp	.-4      	; 0x27f6 <eeprom_read_byte>
    27fa:	92 bd       	out	0x22, r25	; 34
    27fc:	81 bd       	out	0x21, r24	; 33
    27fe:	f8 9a       	sbi	0x1f, 0	; 31
    2800:	99 27       	eor	r25, r25
    2802:	80 b5       	in	r24, 0x20	; 32
    2804:	08 95       	ret

00002806 <eeprom_write_byte>:
    2806:	26 2f       	mov	r18, r22

00002808 <eeprom_write_r18>:
    2808:	f9 99       	sbic	0x1f, 1	; 31
    280a:	fe cf       	rjmp	.-4      	; 0x2808 <eeprom_write_r18>
    280c:	1f ba       	out	0x1f, r1	; 31
    280e:	92 bd       	out	0x22, r25	; 34
    2810:	81 bd       	out	0x21, r24	; 33
    2812:	20 bd       	out	0x20, r18	; 32
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	fa 9a       	sbi	0x1f, 2	; 31
    281a:	f9 9a       	sbi	0x1f, 1	; 31
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	01 96       	adiw	r24, 0x01	; 1
    2820:	08 95       	ret

00002822 <__prologue_saves__>:
    2822:	2f 92       	push	r2
    2824:	3f 92       	push	r3
    2826:	4f 92       	push	r4
    2828:	5f 92       	push	r5
    282a:	6f 92       	push	r6
    282c:	7f 92       	push	r7
    282e:	8f 92       	push	r8
    2830:	9f 92       	push	r9
    2832:	af 92       	push	r10
    2834:	bf 92       	push	r11
    2836:	cf 92       	push	r12
    2838:	df 92       	push	r13
    283a:	ef 92       	push	r14
    283c:	ff 92       	push	r15
    283e:	0f 93       	push	r16
    2840:	1f 93       	push	r17
    2842:	cf 93       	push	r28
    2844:	df 93       	push	r29
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	ca 1b       	sub	r28, r26
    284c:	db 0b       	sbc	r29, r27
    284e:	0f b6       	in	r0, 0x3f	; 63
    2850:	f8 94       	cli
    2852:	de bf       	out	0x3e, r29	; 62
    2854:	0f be       	out	0x3f, r0	; 63
    2856:	cd bf       	out	0x3d, r28	; 61
    2858:	09 94       	ijmp

0000285a <__epilogue_restores__>:
    285a:	2a 88       	ldd	r2, Y+18	; 0x12
    285c:	39 88       	ldd	r3, Y+17	; 0x11
    285e:	48 88       	ldd	r4, Y+16	; 0x10
    2860:	5f 84       	ldd	r5, Y+15	; 0x0f
    2862:	6e 84       	ldd	r6, Y+14	; 0x0e
    2864:	7d 84       	ldd	r7, Y+13	; 0x0d
    2866:	8c 84       	ldd	r8, Y+12	; 0x0c
    2868:	9b 84       	ldd	r9, Y+11	; 0x0b
    286a:	aa 84       	ldd	r10, Y+10	; 0x0a
    286c:	b9 84       	ldd	r11, Y+9	; 0x09
    286e:	c8 84       	ldd	r12, Y+8	; 0x08
    2870:	df 80       	ldd	r13, Y+7	; 0x07
    2872:	ee 80       	ldd	r14, Y+6	; 0x06
    2874:	fd 80       	ldd	r15, Y+5	; 0x05
    2876:	0c 81       	ldd	r16, Y+4	; 0x04
    2878:	1b 81       	ldd	r17, Y+3	; 0x03
    287a:	aa 81       	ldd	r26, Y+2	; 0x02
    287c:	b9 81       	ldd	r27, Y+1	; 0x01
    287e:	ce 0f       	add	r28, r30
    2880:	d1 1d       	adc	r29, r1
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	ed 01       	movw	r28, r26
    288e:	08 95       	ret

00002890 <_exit>:
    2890:	f8 94       	cli

00002892 <__stop_program>:
    2892:	ff cf       	rjmp	.-2      	; 0x2892 <__stop_program>
